<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>炼丹基础</title>
      <link href="/2024/11/11/alchemist-1/"/>
      <url>/2024/11/11/alchemist-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考文献：<br><a href="https://numpy.org.cn/user/quickstart.html">NumPy 中文文档</a> 用于 Python 的开源数值计算库<br><a href="https://pandas.ac.cn/docs/getting_started/intro_tutorials/01_table_oriented.html">Pandas 中文文档</a> 数据处理库<br><a href="https://matplotlib.org.cn/tutorials/index.html">Matplotlib 中文文档</a> 绘图库<br><a href="https://docs.scipy.org.cn/doc/scipy/tutorial/index.html#user-guide">Scipy 中文文档</a> 构建在 NumPy 上的数学算法和函数的集合<br><a href="https://pytorch.org/tutorials/beginner/basics/quickstart_tutorial.html">PyTorch 官方文档</a> 深度学习框架<br><a href="https://swanlab.cn/">SwanLab</a> 一站式跟踪、比较、分享模型<br><a href="https://scikit-learn.org/stable/index.html">Scikit-learn</a> 机器学习<br><a href="https://tqdm.github.io/">tqdm 进度条</a> 很方便的进度条<br><a href="https://rich.readthedocs.io/en/stable/introduction.html#">rich</a> 更加好看的东西</p></blockquote><h2 id="NumPy"><a href="#NumPy" class="headerlink" title="NumPy"></a>NumPy</h2><h3 id="NDArray"><a href="#NDArray" class="headerlink" title="NDArray"></a>NDArray</h3><p>核心是多维数组。底层由C实现，效率高。</p><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])  <span class="comment"># 创建一个一维数组 arr1，包含元素 1 到 5</span></span><br><span class="line">arr2 = np.zeros([<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>], dtype=np.float32)<span class="comment"># 创建一个形状为 (2, 2, 3) 的数组 arr2，元素全为 0，数据类型为 float32</span></span><br><span class="line">arr3 = np.ones([<span class="number">2</span>, <span class="number">2</span>])<span class="comment"># 创建一个形状为 (2, 2) 的数组 arr3，元素全为 1</span></span><br><span class="line">arr4 = np.random.rand(<span class="number">2</span>, <span class="number">3</span>)<span class="comment"># 创建一个形状为 (2, 3) 的数组 arr4，元素为从 0 到 1 之间的随机数</span></span><br><span class="line">arr5 = np.random.randn(<span class="number">2</span>, <span class="number">3</span>)<span class="comment"># 创建一个形状为 (2, 3) 的数组 arr5，元素为从标准正态分布中随机抽取的数</span></span><br><span class="line">arr6 = np.random.randint(<span class="number">0</span>, <span class="number">6</span>, size=(<span class="number">2</span>, <span class="number">3</span>))<span class="comment"># 创建一个形状为 (2, 3) 的数组 arr6，元素为从 0 到 6 之间的随机整数</span></span><br><span class="line">arr7 = np.random.normal(loc=<span class="number">0.0</span>, scale=<span class="number">1.0</span>, size=(<span class="number">2</span>, <span class="number">3</span>))<span class="comment"># 创建一个形状为 (2, 3) 的数组 arr7，元素为从均值为 0、标准差为 1 的正态分布中随机抽取的数</span></span><br><span class="line">arr8 = np.random.random((<span class="number">2</span>, <span class="number">3</span>))<span class="comment"># 创建一个形状为 (2, 3) 的数组 arr8，元素为从 0 到 1 之间的随机浮点数</span></span><br></pre></td></tr></table></figure><h3 id="修改合并"><a href="#修改合并" class="headerlink" title="修改合并"></a>修改合并</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.zeros([<span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>],  dtype=np.int32)</span><br><span class="line">arr2 = np.ones([<span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>], dtype=np.int32)</span><br><span class="line">arr = np.concatenate([arr1, arr2], axis=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;concatenate:&#x27;</span>, arr)</span><br></pre></td></tr></table></figure><h3 id="获取数组属性"><a href="#获取数组属性" class="headerlink" title="获取数组属性"></a>获取数组属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr = np.array([[<span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>], [<span class="number">1</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">10</span>]])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;size:&#x27;</span>, arr.size)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;shape:&#x27;</span>, arr.shape)</span><br></pre></td></tr></table></figure><h3 id="切片和筛选"><a href="#切片和筛选" class="headerlink" title="切片和筛选"></a>切片和筛选</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">arr = np.array([[<span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>], </span><br><span class="line">                [<span class="number">4</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">9</span>],</span><br><span class="line">                [<span class="number">8</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>], </span><br><span class="line">                [<span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>], </span><br><span class="line">                [<span class="number">9</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">10</span>]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;single choose&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(arr[[<span class="number">1</span>, <span class="number">0</span>], [<span class="number">2</span>, <span class="number">3</span>]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;slice&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(arr[:<span class="number">2</span>, :<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;filter&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(arr&gt;<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(arr[arr&gt;<span class="number">7</span>])</span><br></pre></td></tr></table></figure><h3 id="按条件选择、替换数据"><a href="#按条件选择、替换数据" class="headerlink" title="按条件选择、替换数据"></a>按条件选择、替换数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">condition = arr&gt;<span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(condition)</span><br><span class="line"><span class="built_in">print</span>(np.where(condition, -<span class="number">1</span>, arr))</span><br><span class="line"><span class="built_in">print</span>(np.where(condition, -<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">rra = -arr</span><br><span class="line"><span class="built_in">print</span>(np.where(condition, arr, rra))</span><br></pre></td></tr></table></figure><h3 id="数据保存和加载"><a href="#数据保存和加载" class="headerlink" title="数据保存和加载"></a>数据保存和加载</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.save(file, arr, allow_pickle=<span class="literal">True</span>, fix_imports=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><ul><li>file：要保存的文件，扩展名为 .npy，如果文件路径末尾没有扩展名 .npy，该扩展名会被自动加上。</li><li>arr: 要保存的数组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.savez(file, *args, **kwds)</span><br></pre></td></tr></table></figure><ul><li>file：要保存的文件，扩展名为 .npz，如果文件路径末尾没有扩展名 .npz，该扩展名会被自动加上。</li><li>args: 要保存的数组，可以使用关键字参数为数组起一个名字，非关键字参数传递的数组会自动起名为 arr_0, arr_1, …　。</li><li>kwds: 要保存的数组使用关键字名称。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```python</span><br><span class="line"><span class="comment"># 保存</span></span><br><span class="line">a = np.array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>])</span><br><span class="line">b = np.array([[<span class="number">1</span>, <span class="number">9</span>, <span class="number">1</span>], [<span class="number">9</span>, <span class="number">8</span>, <span class="number">10</span>]])</span><br><span class="line"></span><br><span class="line">np.save(<span class="string">&quot;./a&quot;</span>, a)</span><br><span class="line">np.savez(<span class="string">&quot;./ab&quot;</span>, a=a, b=b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载</span></span><br><span class="line">a = np.load(<span class="string">&#x27;./a.npy&#x27;</span>)</span><br><span class="line">ab = np.load(<span class="string">&#x27;./ab.npz&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(ab)</span><br><span class="line"><span class="built_in">print</span>(ab[<span class="string">&#x27;a&#x27;</span>])</span><br></pre></td></tr></table></figure></li></ul><h3 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h3><p>一种自动复制填充机制，使得原本形状不同的两个array能够进行原本只有两相同形状array才能进行的操作。</p><p>广播的规则如下：</p><ol><li>从后向前，如果两数组对应维度上轴的长度相同或其中一个的轴长度为1，广播兼容，可在轴长度为1的轴上进行广播机制处理。</li><li>如果两个数组的维度不同导致某个数组的前方没有维度，那么给低维度的数组前扩展提升一维，扩展维的轴长度为1,然后在扩展出的维上进行广播机制处理。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a: (3, 5)</span></span><br><span class="line"><span class="string">b: (5)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1. extend b into (1, 5)</span></span><br><span class="line"><span class="string">2. copy b in dim 0 to (3, 5)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">a = np.arange(<span class="number">1</span>, <span class="number">16</span>).reshape([<span class="number">3</span>, <span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">b = np.array([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(a+b)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">2: ()</span></span><br><span class="line"><span class="string">a: (3, 5)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1. extend 2 into (1)</span></span><br><span class="line"><span class="string">2. copy 2 in dim 0 to (5)</span></span><br><span class="line"><span class="string">3. extend 2 into (1, 5)</span></span><br><span class="line"><span class="string">4. copy 2 in dim 0 to (3, 5)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">1</span>, <span class="number">16</span>).reshape([<span class="number">3</span>, <span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span> * a)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">a: (1, 5)</span></span><br><span class="line"><span class="string">b: (3, 4, 1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1. copy b in dim 2 to (3, 4, 5)</span></span><br><span class="line"><span class="string">2. copy a in dim 0 to (4, 5)</span></span><br><span class="line"><span class="string">3. extend a into (1, 4, 5)</span></span><br><span class="line"><span class="string">4. copy a in dim 0 to (3, 4, 5)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line">b = np.arange(<span class="number">0</span>, <span class="number">12</span>).reshape((<span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(a + b)</span><br></pre></td></tr></table></figure><h3 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 矩阵和向量积</span></span><br><span class="line">a = np.random.randint(<span class="number">5</span>, size=(<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line">b = np.random.randint(<span class="number">5</span>, size = (<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;a:<span class="subst">&#123;a&#125;</span>\nb:<span class="subst">&#123;b&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dot根据不同情况选择，1维数组为内积，2维数组为矩阵乘，其他情况请阅读文档</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;dot:\n <span class="subst">&#123;np.dot(a, b)&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># vdot计算逐元素乘积并求和</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;vdot:\n <span class="subst">&#123;np.vdot(a, b)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># inner 计算最后一维内积</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;inner:\n <span class="subst">&#123;np.inner(a, b)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># 展开后算ab^T</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;outer:\n <span class="subst">&#123;np.outer(a, b)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment"># matmul计算矩阵乘</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;matmul:\n <span class="subst">&#123;a@b&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="Einstein-Notation"><a href="#Einstein-Notation" class="headerlink" title="Einstein Notation"></a>Einstein Notation</h3><p>$$<br>a_i b_i &#x3D; \sum_{i} a_i b_i<br>$$</p><p>$$<br>a_{ij}b_{jk} &#x3D; \sum_{j}a_{ij}b_{jk}<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">a = np.arange(<span class="number">0</span>, <span class="number">9</span>).reshape(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(np.einsum(<span class="string">&quot;ij-&gt;ji&quot;</span>, a))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">A = torch.tensor(np.random.randint(<span class="number">5</span>, size=(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>))).reshape(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">B = torch.tensor(np.random.randint(<span class="number">5</span>, size=(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>))).reshape(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">想将两者的第2个维度分别reshape为2x1和1x2的两个向量，然后计算外积，得到一个2x2的kernel</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(A.shape, B.shape)</span><br><span class="line">res = torch.einsum(</span><br><span class="line">    <span class="string">&quot;ijk...,iko...-&gt;ijo...&quot;</span>, [A, B]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(res.shape)</span><br></pre></td></tr></table></figure><h3 id="NumPy-使用原则"><a href="#NumPy-使用原则" class="headerlink" title="NumPy 使用原则"></a>NumPy 使用原则</h3><p>尽量向量化所有操作，让numpy可以自动并行</p><ol><li>减少遍历操作</li><li>尽量使用内置方法和函数</li><li>善用广播</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">s_time = time.time()</span><br><span class="line">a = np.array([i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1919810</span>)])</span><br><span class="line"><span class="built_in">print</span>(time.time()-s_time)</span><br><span class="line"></span><br><span class="line">s_time = time.time()</span><br><span class="line">a = np.linspace(<span class="number">0</span>, <span class="number">1919810</span>, <span class="number">1919811</span>)</span><br><span class="line"><span class="built_in">print</span>(time.time() - s_time)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = np.random.random(<span class="number">1919810</span>)</span><br><span class="line">b = np.random.random(<span class="number">1919810</span>)</span><br><span class="line"></span><br><span class="line">s_time = time.time()</span><br><span class="line"><span class="built_in">print</span>(a@b)</span><br><span class="line"><span class="built_in">print</span>(time.time() - s_time)</span><br><span class="line"></span><br><span class="line">s_time = time.time()</span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    res += a[i]*b[i]</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="built_in">print</span>(time.time() - s_time)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">samples = np.random.random((<span class="number">1145</span>, <span class="number">14</span>))</span><br><span class="line"></span><br><span class="line">s_time = time.time()</span><br><span class="line"></span><br><span class="line">dists = []</span><br><span class="line"><span class="keyword">for</span> p1 <span class="keyword">in</span> samples:</span><br><span class="line">    <span class="keyword">for</span> p2 <span class="keyword">in</span> samples:</span><br><span class="line">        dists.append(np.linalg.norm(p1-p2))</span><br><span class="line"><span class="built_in">print</span>(np.mean(dists))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(time.time() - s_time)</span><br><span class="line"></span><br><span class="line">s_time = time.time()</span><br><span class="line"></span><br><span class="line">diff = samples[:, np.newaxis, :] - samples[np.newaxis, :, :]</span><br><span class="line">dist = np.linalg.norm(diff, axis = -<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(np.mean(dist))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(time.time() - s_time)</span><br></pre></td></tr></table></figure><h2 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h2><h3 id="创建、读取、保存数据"><a href="#创建、读取、保存数据" class="headerlink" title="创建、读取、保存数据"></a><strong>创建、读取、保存数据</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, np.nan])</span><br><span class="line">s.tolist() <span class="comment"># 转为列表</span></span><br><span class="line">s.to_numpy() <span class="comment"># 转为 NumPy 数组</span></span><br><span class="line">s.to_dict() <span class="comment"># 转为字典</span></span><br><span class="line">data = &#123;<span class="string">&#x27;col1&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">&#x27;col2&#x27;</span>: [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;file.csv&#x27;</span>)</span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;file.xlsx&#x27;</span>)</span><br><span class="line">df = pd.read_json(<span class="string">&#x27;data.json&#x27;</span>)</span><br><span class="line">df.to_csv(<span class="string">&#x27;output.csv&#x27;</span>, index=<span class="literal">False</span>)</span><br><span class="line">df.to_excel(<span class="string">&#x27;output.xlsx&#x27;</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h3 id="数据访问"><a href="#数据访问" class="headerlink" title="数据访问"></a><strong>数据访问</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看数据</span></span><br><span class="line">df.head() <span class="comment"># 查看 DataFrame 的前几行</span></span><br><span class="line">df.tail() <span class="comment"># 查看 DataFrame 的后几行</span></span><br><span class="line">df.info() <span class="comment"># 查看 DataFrame 的摘要信息</span></span><br><span class="line">df.describe() <span class="comment"># 查看 DataFrame 的统计摘要</span></span><br><span class="line">df.shape <span class="comment"># 查看 DataFrame 的维度</span></span><br><span class="line">df.columns <span class="comment"># 查看列名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择数据</span></span><br><span class="line">df[<span class="string">&#x27;col1&#x27;</span>] <span class="comment"># 选择单列</span></span><br><span class="line">df[[<span class="string">&#x27;col1&#x27;</span>, <span class="string">&#x27;col2&#x27;</span>]] <span class="comment"># 选择多列</span></span><br><span class="line">element = df.iloc[<span class="number">0</span>, <span class="number">1</span>] <span class="comment"># 选择第一行第二列的元素</span></span><br><span class="line">df.loc[<span class="number">0</span>]   <span class="comment"># 按标签选择</span></span><br><span class="line">df[df[<span class="string">&#x27;col1&#x27;</span>] &gt; <span class="number">2</span>] <span class="comment"># 条件筛选</span></span><br></pre></td></tr></table></figure><h3 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a><strong>数据清洗</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">df.isna().<span class="built_in">sum</span>() <span class="comment"># 查看缺失值</span></span><br><span class="line">df.fillna(<span class="number">0</span>) <span class="comment"># 填充缺失值</span></span><br><span class="line">df.dropna() <span class="comment"># 删除含有缺失值的行</span></span><br><span class="line">df[<span class="string">&#x27;col1&#x27;</span>].fillna(df[<span class="string">&#x27;col1&#x27;</span>].mean(), inplace=<span class="literal">True</span>) <span class="comment"># 用列的均值填充缺失值</span></span><br><span class="line">df.drop_duplicates() <span class="comment"># 删除重复行</span></span><br><span class="line">df[df.duplicated()] <span class="comment"># 查找重复值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串操作</span></span><br><span class="line">df[<span class="string">&#x27;col1&#x27;</span>] = df[<span class="string">&#x27;col1&#x27;</span>].<span class="built_in">str</span>.lower()  <span class="comment"># 转换为小写</span></span><br><span class="line">df[<span class="string">&#x27;col1&#x27;</span>] = df[<span class="string">&#x27;col1&#x27;</span>].<span class="built_in">str</span>.replace(<span class="string">&#x27;old&#x27;</span>, <span class="string">&#x27;new&#x27;</span>)  <span class="comment"># 字符替换</span></span><br><span class="line">df[<span class="string">&#x27;col1&#x27;</span>] = df[<span class="string">&#x27;col1&#x27;</span>].<span class="built_in">str</span>.split()  <span class="comment"># 分割字符串</span></span><br><span class="line">elements = data[<span class="string">&#x27;Formula&#x27;</span>].<span class="built_in">str</span>.findall(pattern).apply(<span class="keyword">lambda</span> x: [<span class="keyword">match</span>[<span class="number">0</span>] <span class="keyword">for</span> <span class="keyword">match</span> <span class="keyword">in</span> x])</span><br><span class="line">df.apply(<span class="keyword">lambda</span> row: row[<span class="string">&#x27;col1&#x27;</span>] + row[<span class="string">&#x27;col2&#x27;</span>], axis=<span class="number">1</span>) <span class="comment"># 对每一行应用一个函数</span></span><br><span class="line">df.apply(<span class="keyword">lambda</span> col: col.<span class="built_in">sum</span>(), axis=<span class="number">0</span>) <span class="comment"># 对每一列应用一个函数</span></span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a><strong>排序</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df.sort_values(by=<span class="string">&#x27;col1&#x27;</span>) <span class="comment"># 按单列排序</span></span><br><span class="line">df.sort_values(by=[<span class="string">&#x27;col1&#x27;</span>, <span class="string">&#x27;col2&#x27;</span>], ascending=[<span class="literal">True</span>, <span class="literal">False</span>]) <span class="comment"># 按多列排序</span></span><br><span class="line">df.sort_index() <span class="comment"># 排序索引</span></span><br></pre></td></tr></table></figure><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a><strong>合并</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df1.merge(df2, on=<span class="string">&#x27;key&#x27;</span>) <span class="comment"># 合并两个 DataFrame</span></span><br><span class="line">df1.merge(df2, on=<span class="string">&#x27;key&#x27;</span>, how=<span class="string">&#x27;left&#x27;</span>) <span class="comment"># 左连接</span></span><br><span class="line">df_concat = pd.concat([df1, df2], axis=<span class="number">0</span>) <span class="comment"># 连接 DataFrame（按列）</span></span><br><span class="line">df_concat = pd.concat([df1, df2], axis=<span class="number">1</span>) <span class="comment"># 连接 DataFrame（按行）</span></span><br></pre></td></tr></table></figure><h2 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a>Matplotlib</h2><h3 id="Matplotlib的核心概念"><a href="#Matplotlib的核心概念" class="headerlink" title="Matplotlib的核心概念"></a><strong>Matplotlib的核心概念</strong></h3><ul><li><p><strong>Figure</strong>：<code>Figure</code> 是整个图像的容器，包含了所有的图形元素，如子图（Axes）、标题、标签等。一个 <code>Figure</code> 对象可以包含多个 <code>Axes</code> 对象。</p></li><li><p><strong>Axes</strong>：<code>Axes</code> 是图形中的一个区域，包含坐标系、数据的可视化内容（如线条、点、柱状图等）。每个 <code>Axes</code> 可以有自己的坐标轴、标签和标题。</p></li><li><p><strong>Plot</strong>：<code>Plot</code> 是在 <code>Axes</code> 中显示的数据可视化内容。<code>Matplotlib</code> 提供了多种不同的 <code>plot</code> 类型，如线图、散点图、柱状图、直方图等。</p></li><li><p><strong>Axis</strong>：<code>Axis</code> 是坐标轴，用于定义图形的横坐标和纵坐标。每个 <code>Axes</code> 对象都包含两个 <code>Axis</code>，分别表示 x 轴和 y 轴。</p></li><li><p><strong>Artist</strong>：<code>Artist</code> 是 <code>Matplotlib</code> 中的基本对象，包括所有可以在图形上绘制的元素，例如文本、线条、矩形、坐标轴、标签等。</p></li></ul><h3 id="Matplotlib的常用函数"><a href="#Matplotlib的常用函数" class="headerlink" title="Matplotlib的常用函数"></a><strong>Matplotlib的常用函数</strong></h3><h4 id="基本绘图"><a href="#基本绘图" class="headerlink" title="基本绘图"></a>基本绘图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备数据</span></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">y1 = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br><span class="line">y2 = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建子图，1行2列</span></span><br><span class="line">fig, axs = plt.subplots(<span class="number">1</span>, <span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">5</span>))</span><br><span class="line">fig.suptitle(<span class="string">&#x27;图形标题&#x27;</span>, fontsize=<span class="number">16</span>)</span><br><span class="line">fig.subplots_adjust(top=<span class="number">0.85</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置图形背景颜色</span></span><br><span class="line">fig.patch.set_facecolor(<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制第一个子图</span></span><br><span class="line">axs[<span class="number">0</span>].plot(x, y1, <span class="string">&#x27;r-&#x27;</span>, label=<span class="string">&#x27;平方值&#x27;</span>)</span><br><span class="line">axs[<span class="number">0</span>].set_title(<span class="string">&#x27;平方函数&#x27;</span>)</span><br><span class="line">axs[<span class="number">0</span>].set_xlabel(<span class="string">&#x27;x 轴&#x27;</span>)</span><br><span class="line">axs[<span class="number">0</span>].set_ylabel(<span class="string">&#x27;y 轴&#x27;</span>)</span><br><span class="line">axs[<span class="number">0</span>].grid(<span class="literal">True</span>)  <span class="comment"># 显示网格</span></span><br><span class="line">axs[<span class="number">0</span>].legend(</span><br><span class="line">    loc=<span class="string">&#x27;upper left&#x27;</span>,        <span class="comment"># 设置图例的位置为左上角</span></span><br><span class="line">    fontsize=<span class="number">12</span>,             <span class="comment"># 设置图例文本的字体大小为12</span></span><br><span class="line">    frameon=<span class="literal">False</span>,           <span class="comment"># 不显示图例的边框</span></span><br><span class="line">    title=<span class="string">&#x27;图例&#x27;</span>,           <span class="comment"># 设置图例的标题为&#x27;图例&#x27;</span></span><br><span class="line">    title_fontsize=<span class="number">12</span>,      <span class="comment"># 设置图例标题文本的字体大小为12</span></span><br><span class="line">    ncol=<span class="number">2</span>,                 <span class="comment"># 设置图例中的列数为2</span></span><br><span class="line">    shadow=<span class="literal">True</span>,            <span class="comment"># 添加阴影效果</span></span><br><span class="line">    bbox_to_anchor=(<span class="number">0.5</span>, <span class="number">1.15</span>),  <span class="comment"># 设置图例位置的锚点，(0.5, 1.15)表示相对于子图的位置</span></span><br><span class="line">    handlelength=<span class="number">2</span>,         <span class="comment"># 设置图例标识符的长度为2</span></span><br><span class="line">    handletextpad=<span class="number">1</span>         <span class="comment"># 设置图例标签与标识符之间的间距为1</span></span><br><span class="line">)</span><br><span class="line">axs[<span class="number">0</span>].set_facecolor(<span class="string">&#x27;white&#x27;</span>)  <span class="comment"># 设置子图背景颜色</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 x 轴和 y 轴的范围</span></span><br><span class="line">axs[<span class="number">0</span>].set_xlim(<span class="number">0</span>, <span class="number">6</span>)  <span class="comment"># x 轴范围从 0 到 6</span></span><br><span class="line">axs[<span class="number">0</span>].set_ylim(<span class="number">0</span>, <span class="number">30</span>)  <span class="comment"># y 轴范围从 0 到 30</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置刻度</span></span><br><span class="line">axs[<span class="number">0</span>].set_xticks([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line">axs[<span class="number">0</span>].set_yticks([<span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加标注</span></span><br><span class="line">axs[<span class="number">0</span>].annotate(<span class="string">&#x27;最大值&#x27;</span>, xy=(<span class="number">5</span>, <span class="number">25</span>), xytext=(<span class="number">4</span>, <span class="number">30</span>),</span><br><span class="line">                 arrowprops=<span class="built_in">dict</span>(facecolor=<span class="string">&#x27;black&#x27;</span>, shrink=<span class="number">0.05</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制第二个子图</span></span><br><span class="line">axs[<span class="number">1</span>].plot(x, y2, <span class="string">&#x27;b-&#x27;</span>, label=<span class="string">&#x27;质数&#x27;</span>)</span><br><span class="line">axs[<span class="number">1</span>].set_title(<span class="string">&#x27;质数序列&#x27;</span>)</span><br><span class="line">axs[<span class="number">1</span>].set_xlabel(<span class="string">&#x27;x 轴&#x27;</span>)</span><br><span class="line">axs[<span class="number">1</span>].set_ylabel(<span class="string">&#x27;y 轴&#x27;</span>)</span><br><span class="line">axs[<span class="number">1</span>].grid(<span class="literal">True</span>)  <span class="comment"># 显示网格</span></span><br><span class="line">axs[<span class="number">1</span>].legend(loc=<span class="string">&#x27;upper left&#x27;</span>)</span><br><span class="line">axs[<span class="number">1</span>].set_facecolor(<span class="string">&#x27;white&#x27;</span>)  <span class="comment"># 设置子图背景颜色</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 x 轴和 y 轴的范围</span></span><br><span class="line">axs[<span class="number">1</span>].set_xlim(<span class="number">0</span>, <span class="number">6</span>)  <span class="comment"># x 轴范围从 0 到 6</span></span><br><span class="line">axs[<span class="number">1</span>].set_ylim(<span class="number">0</span>, <span class="number">12</span>)  <span class="comment"># y 轴范围从 0 到 12</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置刻度</span></span><br><span class="line">axs[<span class="number">1</span>].set_xticks([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line">axs[<span class="number">1</span>].set_yticks([<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">12</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调整布局</span></span><br><span class="line">plt.tight_layout()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图形</span></span><br><span class="line">plt.show()</span><br><span class="line">plt.savefig(<span class="string">&#x27;plot.png&#x27;</span>)  <span class="comment"># 保存图形为PNG文件</span></span><br></pre></td></tr></table></figure><ul><li><code>plt.legend()</code> 显示 label 图例, 应放在 label 之后设置</li><li><code>plt.xlabel</code>适用于简单情况, <code>ax.set_xlabel()</code>适用于复杂情况。</li><li><code>plt.xlim(0, 6)</code>设置 x 轴显示范围，超出范围不可见</li></ul><h4 id="动态更新图形"><a href="#动态更新图形" class="headerlink" title="动态更新图形"></a>动态更新图形</h4><ul><li><strong><code>matplotlib.animation.FuncAnimation</code></strong>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib.animation <span class="keyword">import</span> FuncAnimation</span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">line, = ax.plot([], [], lw=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init</span>():</span><br><span class="line">    line.set_data([], [])</span><br><span class="line">    <span class="keyword">return</span> line,</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">animate</span>(<span class="params">i</span>):</span><br><span class="line">    x = np.linspace(<span class="number">0</span>, <span class="number">2</span> * np.pi, <span class="number">100</span>)</span><br><span class="line">    y = np.sin(x + i / <span class="number">10.0</span>)</span><br><span class="line">    line.set_data(x, y)</span><br><span class="line">    <span class="keyword">return</span> line,</span><br><span class="line"></span><br><span class="line">ani = FuncAnimation(fig, animate, init_func=init, frames=<span class="number">100</span>, interval=<span class="number">20</span>, blit=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="3D-绘图"><a href="#3D-绘图" class="headerlink" title="3D 绘图"></a>3D 绘图</h4><ul><li><strong><code>matplotlib.pyplot.axes(projection=&#39;3d&#39;)</code></strong><br>用于创建 3D 绘图。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>, projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line">ax.plot(x, y, z)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></li></ul><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">fig, axs = plt.subplot_mosaic([[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;right&#x27;</span>],[<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;right&#x27;</span>]],figsize=(<span class="number">3</span>,<span class="number">4</span>), layout = <span class="string">&#x27;constrained&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> ax_name, ax <span class="keyword">in</span> axs.items():</span><br><span class="line">    ax.text(<span class="number">0.5</span>, <span class="number">0.5</span>, ax_name, ha = <span class="string">&#x27;center&#x27;</span>, va = <span class="string">&#x27;center&#x27;</span>, fontsize = <span class="number">18</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>, <span class="number">6</span>), dpi=<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">X = np.linspace(-np.pi, np.pi, <span class="number">30</span>, endpoint=<span class="literal">True</span>)</span><br><span class="line">C, S, T, A = np.cos(X), np.sin(X), np.arctan(X), np.arccos(X)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># 绘制余弦曲线，使用蓝色的、连续的、宽度为 1 （像素）的线条</span></span><br><span class="line">plt.plot(X, C, color=<span class="string">&quot;blue&quot;</span>, linewidth=<span class="number">1.0</span>, linestyle=<span class="string">&quot;-&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># 绘制正弦曲线，使用绿色的、连续的、宽度为 1 （像素）的线条</span></span><br><span class="line">plt.plot(X, S, color=<span class="string">&quot;green&quot;</span>, linewidth=<span class="number">4.0</span>, linestyle=<span class="string">&quot;-.&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">plt.scatter(X, T, color=<span class="string">&#x27;red&#x27;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">plt.bar(X, T, color=<span class="string">&quot;yellow&quot;</span>, alpha=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在屏幕上显示</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">X = np.linspace(-np.pi, np.pi, <span class="number">256</span>, endpoint=<span class="literal">True</span>)</span><br><span class="line">C, S = np.cos(X), np.sin(X)</span><br><span class="line"></span><br><span class="line">plt.plot(X, C, label = <span class="string">&#x27;sin&#x27;</span>)</span><br><span class="line">plt.plot(X, S, label=<span class="string">&#x27;cos&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改标签</span></span><br><span class="line">plt.xticks(</span><br><span class="line">    [-np.pi, -np.pi / <span class="number">2</span>, <span class="number">0</span>, np.pi / <span class="number">2</span>, np.pi],</span><br><span class="line">    [<span class="string">r&quot;$-\pi$&quot;</span>, <span class="string">r&quot;$-\pi/2$&quot;</span>, <span class="string">r&quot;$0$&quot;</span>, <span class="string">r&quot;$+\pi/2$&quot;</span>, <span class="string">r&quot;$+\pi$&quot;</span>],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">plt.yticks([-<span class="number">1</span>, <span class="number">0</span>, +<span class="number">1</span>], [<span class="string">r&quot;$-1$&quot;</span>, <span class="string">r&quot;$0$&quot;</span>, <span class="string">r&quot;$+1$&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改坐标轴位置</span></span><br><span class="line">ax = plt.gca()</span><br><span class="line">ax.spines[<span class="string">&quot;right&quot;</span>].set_color(<span class="string">&quot;none&quot;</span>)</span><br><span class="line">ax.spines[<span class="string">&quot;top&quot;</span>].set_color(<span class="string">&quot;none&quot;</span>)</span><br><span class="line">ax.xaxis.set_ticks_position(<span class="string">&quot;bottom&quot;</span>)</span><br><span class="line">ax.spines[<span class="string">&quot;bottom&quot;</span>].set_position((<span class="string">&quot;data&quot;</span>, <span class="number">0</span>))</span><br><span class="line">ax.yaxis.set_ticks_position(<span class="string">&quot;left&quot;</span>)</span><br><span class="line">ax.spines[<span class="string">&quot;left&quot;</span>].set_position((<span class="string">&quot;data&quot;</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图例</span></span><br><span class="line">plt.legend(loc=<span class="string">&quot;upper left&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标注</span></span><br><span class="line">t = <span class="number">2</span> * np.pi / <span class="number">3</span></span><br><span class="line">plt.scatter(</span><br><span class="line">    [</span><br><span class="line">        t,</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        np.sin(t),</span><br><span class="line">    ],</span><br><span class="line">    s=<span class="number">100</span>,</span><br><span class="line">    color=<span class="string">&quot;red&quot;</span>,</span><br><span class="line">)</span><br><span class="line">plt.annotate(</span><br><span class="line">    <span class="string">r&quot;$\sin(\frac&#123;2\pi&#125;&#123;3&#125;)=\frac&#123;\sqrt&#123;3&#125;&#125;&#123;2&#125;$&quot;</span>,</span><br><span class="line">    xy=(t, np.sin(t)),</span><br><span class="line">    xycoords=<span class="string">&quot;data&quot;</span>,</span><br><span class="line">    xytext=(+<span class="number">10</span>, +<span class="number">30</span>),</span><br><span class="line">    textcoords=<span class="string">&quot;offset points&quot;</span>,</span><br><span class="line">    arrowprops= <span class="built_in">dict</span>(arrowstyle = <span class="string">&quot;-&gt;&quot;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="PyTorch"><a href="#PyTorch" class="headerlink" title="PyTorch"></a>PyTorch</h2><h3 id="线性层（nn-Linear）"><a href="#线性层（nn-Linear）" class="headerlink" title="线性层（nn.Linear）"></a><strong>线性层（<code>nn.Linear</code>）</strong></h3><p>线性层（全连接层）执行线性变换，通常用于多层感知器（MLP）模型中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入大小 3，输出大小 2</span></span><br><span class="line">linear_layer = nn.Linear(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">input_data = torch.randn(<span class="number">1</span>, <span class="number">3</span>)  <span class="comment"># 假设输入是 (1, 3) 的张量</span></span><br><span class="line">output_data = linear_layer(input_data)</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：计算 <code>y = xA^T + b</code>，其中 <code>A</code> 是权重矩阵，<code>b</code> 是偏置。</li></ul><h3 id="卷积层（nn-Conv2d）"><a href="#卷积层（nn-Conv2d）" class="headerlink" title="卷积层（nn.Conv2d）"></a><strong>卷积层（<code>nn.Conv2d</code>）</strong></h3><p>卷积层用于处理图像或其他网格数据。<code>nn.Conv2d</code> 是二维卷积层，通常用于图像分类和其他计算机视觉任务。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conv_layer = nn.Conv2d(in_channels=<span class="number">1</span>, out_channels=<span class="number">16</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>)</span><br><span class="line">input_data = torch.randn(<span class="number">1</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>)  <span class="comment"># 假设输入是 (1, 1, 28, 28) 的张量</span></span><br><span class="line">output_data = conv_layer(input_data)</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：通过卷积操作提取特征，通常应用于图像数据。</li></ul><h3 id="池化层（nn-MaxPool2d、nn-AvgPool2d）"><a href="#池化层（nn-MaxPool2d、nn-AvgPool2d）" class="headerlink" title="池化层（nn.MaxPool2d、nn.AvgPool2d）"></a><strong>池化层（<code>nn.MaxPool2d</code>、<code>nn.AvgPool2d</code>）</strong></h3><p>池化层用于下采样，减少特征图的空间维度（如宽度和高度），同时保持重要特征。常用的池化操作包括最大池化（Max Pooling）和平均池化（Average Pooling）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">max_pool_layer = nn.MaxPool2d(kernel_size=<span class="number">2</span>, stride=<span class="number">2</span>)</span><br><span class="line">input_data = torch.randn(<span class="number">1</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line">output_data = max_pool_layer(input_data)</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：最大池化通常选择池化区域中的最大值；平均池化选择池化区域中的平均值。</li></ul><h3 id="激活函数（nn-ReLU、nn-Sigmoid、nn-Tanh）"><a href="#激活函数（nn-ReLU、nn-Sigmoid、nn-Tanh）" class="headerlink" title="激活函数（nn.ReLU、nn.Sigmoid、nn.Tanh）"></a><strong>激活函数（<code>nn.ReLU</code>、<code>nn.Sigmoid</code>、<code>nn.Tanh</code>）</strong></h3><p>激活函数引入非线性特性，帮助模型捕捉复杂的模式。常用的激活函数包括 ReLU、Sigmoid 和 Tanh。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">relu = nn.ReLU()</span><br><span class="line">input_data = torch.randn(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">output_data = relu(input_data)</span><br></pre></td></tr></table></figure><ul><li><strong>ReLU</strong>：<code>f(x) = max(0, x)</code>，常用于隐藏层。</li><li><strong>Sigmoid</strong>：<code>f(x) = 1 / (1 + exp(-x))</code>，常用于输出层（如二分类问题）。</li><li><strong>Tanh</strong>：<code>f(x) = (exp(x) - exp(-x)) / (exp(x) + exp(-x))</code>，输出范围为 (-1, 1)。</li></ul><h3 id="批归一化层（nn-BatchNorm2d）"><a href="#批归一化层（nn-BatchNorm2d）" class="headerlink" title="批归一化层（nn.BatchNorm2d）"></a><strong>批归一化层（<code>nn.BatchNorm2d</code>）</strong></h3><p>批归一化层用于加速训练并稳定模型，通过标准化每一层的输入，使其均值为 0，方差为 1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">batch_norm = nn.BatchNorm2d(<span class="number">16</span>)  <span class="comment"># 16 是输入的通道数</span></span><br><span class="line">input_data = torch.randn(<span class="number">1</span>, <span class="number">16</span>, <span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line">output_data = batch_norm(input_data)</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：对每个小批量的输入进行归一化，确保训练过程中更稳定的梯度更新。</li></ul><h3 id="丢弃层（nn-Dropout）"><a href="#丢弃层（nn-Dropout）" class="headerlink" title="丢弃层（nn.Dropout）"></a><strong>丢弃层（<code>nn.Dropout</code>）</strong></h3><p>丢弃层用于防止过拟合。它在训练过程中随机将部分神经元的输出设置为 0，避免模型过于依赖某些特定的特征。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dropout = nn.Dropout(p=<span class="number">0.5</span>)  <span class="comment"># 50% 的神经元会被丢弃</span></span><br><span class="line">input_data = torch.randn(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">output_data = dropout(input_data)</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：丢弃率（<code>p</code>）定义了在每次前向传播时丢弃的神经元比例。</li></ul><h3 id="转置卷积层（nn-ConvTranspose2d）"><a href="#转置卷积层（nn-ConvTranspose2d）" class="headerlink" title="转置卷积层（nn.ConvTranspose2d）"></a><strong>转置卷积层（<code>nn.ConvTranspose2d</code>）</strong></h3><p>转置卷积层（也称为反卷积层）用于上采样操作，通常用于生成对抗网络（GAN）和图像生成模型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conv_transpose_layer = nn.ConvTranspose2d(in_channels=<span class="number">16</span>, out_channels=<span class="number">1</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">2</span>, padding=<span class="number">1</span>)</span><br><span class="line">input_data = torch.randn(<span class="number">1</span>, <span class="number">16</span>, <span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line">output_data = conv_transpose_layer(input_data)</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：实现反向卷积（或上采样），用于恢复原始输入的空间分辨率。</li></ul><h3 id="嵌入层（nn-Embedding）"><a href="#嵌入层（nn-Embedding）" class="headerlink" title="嵌入层（nn.Embedding）"></a><strong>嵌入层（<code>nn.Embedding</code>）</strong></h3><p>嵌入层通常用于处理离散的输入数据（如单词、类别标签等），将其转换为连续的高维向量表示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">embedding = nn.Embedding(num_embeddings=<span class="number">10</span>, embedding_dim=<span class="number">5</span>)</span><br><span class="line">input_data = torch.LongTensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">output_data = embedding(input_data)</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：将整数索引映射到固定维度的向量空间。</li></ul><h3 id="LSTM层（nn-LSTM）"><a href="#LSTM层（nn-LSTM）" class="headerlink" title="LSTM层（nn.LSTM）"></a><strong>LSTM层（<code>nn.LSTM</code>）</strong></h3><p>LSTM（长短期记忆）层用于处理序列数据，能够捕捉长程依赖关系。常用于自然语言处理（NLP）任务。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lstm_layer = nn.LSTM(input_size=<span class="number">10</span>, hidden_size=<span class="number">20</span>)</span><br><span class="line">input_data = torch.randn(<span class="number">5</span>, <span class="number">3</span>, <span class="number">10</span>)  <span class="comment"># (sequence_length, batch_size, input_size)</span></span><br><span class="line">output_data, (h_n, c_n) = lstm_layer(input_data)</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：LSTM 层用于处理序列数据，能够有效地学习时间序列或语言模型中的长期依赖。</li></ul><h3 id="GRU层（nn-GRU）"><a href="#GRU层（nn-GRU）" class="headerlink" title="GRU层（nn.GRU）"></a><strong>GRU层（<code>nn.GRU</code>）</strong></h3><p>GRU（门控循环单元）是另一种用于序列数据处理的循环神经网络（RNN）层。与 LSTM 类似，GRU 也能捕捉序列中的长程依赖。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gru_layer = nn.GRU(input_size=<span class="number">10</span>, hidden_size=<span class="number">20</span>)</span><br><span class="line">input_data = torch.randn(<span class="number">5</span>, <span class="number">3</span>, <span class="number">10</span>)</span><br><span class="line">output_data, h_n = gru_layer(input_data)</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：与 LSTM 类似，GRU 也是一种序列处理层，但结构上更简洁，计算效率更高。</li></ul><h3 id="自定义层"><a href="#自定义层" class="headerlink" title="自定义层"></a><strong>自定义层</strong></h3><p>你还可以在 <code>PyTorch</code> 中创建自定义层，继承 <code>nn.Module</code> 并实现 <code>forward()</code> 方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyLayer</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, in_channels, out_channels</span>):</span><br><span class="line">        <span class="built_in">super</span>(MyLayer, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.conv = nn.Conv2d(in_channels, out_channels, kernel_size=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.conv(x)</span><br><span class="line"></span><br><span class="line">my_layer = MyLayer(<span class="number">1</span>, <span class="number">16</span>)</span><br><span class="line">input_data = torch.randn(<span class="number">1</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line">output_data = my_layer(input_data)</span><br></pre></td></tr></table></figure><h3 id="全局平均池化（nn-AdaptiveAvgPool2d）"><a href="#全局平均池化（nn-AdaptiveAvgPool2d）" class="headerlink" title="全局平均池化（nn.AdaptiveAvgPool2d）"></a><strong>全局平均池化（<code>nn.AdaptiveAvgPool2d</code>）</strong></h3><p>全局平均池化层通常用于模型最后，用于将特征图的每个通道池化成一个值（即全局平均）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adaptive_avg_pool = nn.AdaptiveAvgPool2d((<span class="number">1</span>, <span class="number">1</span>))  <span class="comment"># 输出大小是 (1, 1)</span></span><br><span class="line">input_data = torch.randn(<span class="number">1</span>, <span class="number">16</span>, <span class="number">28</span>, <span class="number">28</span>)</span><br><span class="line">output_data = adaptive_avg_pool(input_data)</span><br></pre></td></tr></table></figure><ul><li><strong>功能</strong>：将特征图压缩为一个固定大小的输出。</li></ul><h2 id="Utils"><a href="#Utils" class="headerlink" title="Utils"></a>Utils</h2><h3 id="os-文件和目录操作"><a href="#os-文件和目录操作" class="headerlink" title="os - 文件和目录操作"></a><code>os</code> - 文件和目录操作</h3><ul><li><code>os.path.join</code>：拼接路径。</li><li><code>os.path.exists</code>：判断文件或目录是否存在。</li><li><code>os.path.isfile</code>：判断是否为文件。</li><li><code>os.path.isdir</code>：判断是否为目录。</li><li><code>os.path.getsize</code>：获取文件大小。</li><li><code>os.path.splitext</code>：分离文件名和扩展名。</li><li><code>os.path.basename</code>：获取文件名。</li><li><code>os.path.dirname</code>：获取目录名。</li><li><code>os.path.expandvars</code>：展开环境变量。</li></ul><h3 id="join"><a href="#join" class="headerlink" title="join"></a><code>join</code></h3><p><code>join()</code> 是字符串对象的一个方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>.join(iterable) <span class="comment"># str 是用作连接符的字符串， iterable 可以是字符串、列表、元组等，其中包含要连接的字符串元素</span></span><br><span class="line"></span><br><span class="line">words = [<span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;from&quot;</span>, <span class="string">&quot;Fitten&quot;</span>]</span><br><span class="line">result = <span class="string">&quot; &quot;</span>.join(words)  <span class="comment"># 用空格连接</span></span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 输出: Hello world from Fitten</span></span><br><span class="line"></span><br><span class="line">items = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>]</span><br><span class="line">result = <span class="string">&quot;, &quot;</span>.join(items)  <span class="comment"># 用逗号和空格连接</span></span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 输出: apple, banana, cherry</span></span><br><span class="line"></span><br><span class="line">chars = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">result = <span class="string">&quot;-&quot;</span>.join(chars)  <span class="comment"># 用连字符连接</span></span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 输出: a-b-c-d</span></span><br></pre></td></tr></table></figure><h3 id="swanlab"><a href="#swanlab" class="headerlink" title="swanlab"></a>swanlab</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> swanlab</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化SwanLab</span></span><br><span class="line">run = swanlab.init(</span><br><span class="line">    <span class="comment"># 设置项目</span></span><br><span class="line">    project=<span class="string">&quot;Alchemist&quot;</span>,</span><br><span class="line">    <span class="comment"># 跟踪超参数与实验元数据</span></span><br><span class="line">    config=&#123;</span><br><span class="line">        <span class="string">&quot;learning_rate&quot;</span>: <span class="number">0.01</span>,</span><br><span class="line">        <span class="string">&quot;batch_size&quot;</span>: <span class="number">64</span>,</span><br><span class="line">        <span class="string">&quot;epochs&quot;</span>: <span class="number">10</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;学习率为<span class="subst">&#123;run.config.learning_rate&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">offset = random.random() / <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟训练过程</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, run.config.epochs):</span><br><span class="line">    acc = <span class="number">1</span> - <span class="number">2</span>**-epoch - random.random() / epoch - offset</span><br><span class="line">    loss = <span class="number">2</span>**-epoch + random.random() / epoch + offset</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;epoch=<span class="subst">&#123;epoch&#125;</span>, accuracy=<span class="subst">&#123;acc&#125;</span>, loss=<span class="subst">&#123;loss&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># 记录指标</span></span><br><span class="line">    swanlab.log(&#123;<span class="string">&quot;accuracy&quot;</span>: acc, <span class="string">&quot;loss&quot;</span>: loss&#125;)</span><br><span class="line">    swanlab.log(&#123;<span class="string">&quot;generated_image&quot;</span>: wandb.Image(image)&#125;)</span><br><span class="line">    <span class="comment"># 自定义图表</span></span><br><span class="line">    <span class="comment"># wandb.log(&#123;&quot;my_custom_chart&quot;: wandb.plot.line_series(</span></span><br><span class="line">        <span class="comment"># xs=[1, 2, 3, 4], ys=[2, 3, 4, 5], keys=[&quot;train&quot;, &quot;test&quot;])&#125;)</span></span><br><span class="line">    </span><br><span class="line">swanlab.save(<span class="string">&quot;model.h5&quot;</span>)</span><br><span class="line">swanlab.finish()</span><br><span class="line"><span class="comment"># 加载模型</span></span><br><span class="line">swanlab.restore(<span class="string">&quot;model.h5&quot;</span>)</span><br><span class="line"><span class="comment"># 清理所有实验数据</span></span><br><span class="line">swanlab.reset()</span><br></pre></td></tr></table></figure><p><code>wandb.Artifact</code> 是一种用于追踪、版本控制和共享数据的方式。它允许你记录、存储和共享数据集、模型、代码等对象。</p><ul><li>创建和保存一个 Artifact：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">artifact = wandb.Artifact(<span class="string">&quot;model&quot;</span>, <span class="built_in">type</span>=<span class="string">&quot;model&quot;</span>)</span><br><span class="line">artifact.add_file(<span class="string">&quot;model.h5&quot;</span>)</span><br><span class="line">wandb.log_artifact(artifact)</span><br></pre></td></tr></table></figure></li><li>获取并使用 Artifact：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">artifact = wandb.use_artifact(<span class="string">&quot;my-username/my-project/model:latest&quot;</span>)</span><br><span class="line">artifact.download()</span><br></pre></td></tr></table></figure></li></ul><h3 id="pprint"><a href="#pprint" class="headerlink" title="pprint"></a>pprint</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">30</span>, <span class="string">&#x27;address&#x27;</span>: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;New York&#x27;</span>, <span class="string">&#x27;zip&#x27;</span>: <span class="string">&#x27;10001&#x27;</span>&#125;&#125;</span><br><span class="line">pprint(data)</span><br><span class="line">pprint(<span class="built_in">dir</span>(networkx),indent=<span class="number">4</span>,width=<span class="number">100</span>,compact=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>width 默认 80</p><p><code>PrettyPrinter()</code> 是 <code>pprint</code> 模块的一个类，允许你通过更多的自定义选项来创建一个格式化打印对象，然后调用它来打印数据。你可以通过这个类设置输出的最大深度、缩进级别等参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> PrettyPrinter</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">25</span>, <span class="string">&#x27;address&#x27;</span>: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;Los Angeles&#x27;</span>, <span class="string">&#x27;zip&#x27;</span>: <span class="string">&#x27;90001&#x27;</span>&#125;&#125;</span><br><span class="line">printer = PrettyPrinter(depth=<span class="number">2</span>)</span><br><span class="line">printer.pprint(data)</span><br></pre></td></tr></table></figure><h3 id="tqdm"><a href="#tqdm" class="headerlink" title="tqdm"></a>tqdm</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">100</span>), desc=<span class="string">&quot;Processing items&quot;</span>, unit=<span class="string">&quot;item&quot;</span>):</span><br><span class="line">    <span class="comment"># 执行某些操作</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><code>tqdm</code> 允许你在多个嵌套循环中显示进度条。可以通过 <code>tqdm</code> 嵌套多次来显示不同层次的进度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">5</span>), desc=<span class="string">&quot;Outer loop&quot;</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">100</span>), desc=<span class="string">&quot;Inner loop&quot;</span>, leave=<span class="literal">False</span>):</span><br><span class="line">        <span class="comment"># 执行某些操作</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li><code>leave=False</code> 表示内层进度条完成后不保留在屏幕上。</li></ul><p>有时我们可能需要手动更新进度条，可以通过 <code>update()</code> 方法来更新进度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pbar = tqdm(total=<span class="number">100</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="comment"># 做一些事情</span></span><br><span class="line">    pbar.update(<span class="number">10</span>)  <span class="comment"># 每次更新进度</span></span><br><span class="line">pbar.close()</span><br></pre></td></tr></table></figure><h2 id="Scikit-learn"><a href="#Scikit-learn" class="headerlink" title="Scikit-learn"></a>Scikit-learn</h2><h3 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a><strong>数据预处理</strong></h3><h4 id="特征缩放和标准化"><a href="#特征缩放和标准化" class="headerlink" title="特征缩放和标准化"></a>特征缩放和标准化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler, MinMaxScaler</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标准化：均值为0，方差为1</span></span><br><span class="line">scaler = StandardScaler()</span><br><span class="line">X_scaled = scaler.fit_transform(X)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 归一化：将数据缩放到 [0, 1]</span></span><br><span class="line">scaler = MinMaxScaler()</span><br><span class="line">X_scaled = scaler.fit_transform(X)</span><br></pre></td></tr></table></figure><h4 id="类别数据编码"><a href="#类别数据编码" class="headerlink" title="类别数据编码"></a>类别数据编码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> LabelEncoder, OneHotEncoder</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标签编码：将类别标签转化为数字</span></span><br><span class="line">encoder = LabelEncoder()</span><br><span class="line">y_encoded = encoder.fit_transform(y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 独热编码：将类别数据转换为二进制（0/1）矩阵</span></span><br><span class="line">onehot_encoder = OneHotEncoder()</span><br><span class="line">y_onehot = onehot_encoder.fit_transform(y.reshape(-<span class="number">1</span>, <span class="number">1</span>)).toarray()</span><br></pre></td></tr></table></figure><h4 id="缺失值处理"><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.impute <span class="keyword">import</span> SimpleImputer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 填充缺失值</span></span><br><span class="line">imputer = SimpleImputer(strategy=<span class="string">&#x27;mean&#x27;</span>)  <span class="comment"># &#x27;mean&#x27;, &#x27;median&#x27;, &#x27;most_frequent&#x27;</span></span><br><span class="line">X_imputed = imputer.fit_transform(X)</span><br></pre></td></tr></table></figure><h4 id="特征选择"><a href="#特征选择" class="headerlink" title="特征选择"></a>特征选择</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> SelectKBest, f_classif</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于卡方检验选择前k个最佳特征</span></span><br><span class="line">selector = SelectKBest(score_func=f_classif, k=<span class="number">5</span>)</span><br><span class="line">X_new = selector.fit_transform(X, y)</span><br></pre></td></tr></table></figure><h3 id="模型训练与预测"><a href="#模型训练与预测" class="headerlink" title="模型训练与预测"></a><strong>模型训练与预测</strong></h3><h4 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机森林分类器</span></span><br><span class="line">model = RandomForestClassifier(n_estimators=<span class="number">100</span>)</span><br><span class="line">model.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逻辑回归分类器</span></span><br><span class="line">model = LogisticRegression()</span><br><span class="line">model.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 支持向量机分类器</span></span><br><span class="line">model = SVC(kernel=<span class="string">&#x27;linear&#x27;</span>)</span><br><span class="line">model.fit(X_train, y_train)</span><br></pre></td></tr></table></figure><h4 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用训练好的模型进行预测</span></span><br><span class="line">y_pred = model.predict(X_test)</span><br></pre></td></tr></table></figure><h4 id="回归模型"><a href="#回归模型" class="headerlink" title="回归模型"></a>回归模型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"></span><br><span class="line"><span class="comment"># 线性回归模型</span></span><br><span class="line">model = LinearRegression()</span><br><span class="line">model.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用回归模型进行预测</span></span><br><span class="line">y_pred = model.predict(X_test)</span><br></pre></td></tr></table></figure><h3 id="模型评估"><a href="#模型评估" class="headerlink" title="模型评估"></a><strong>模型评估</strong></h3><h4 id="评估回归模型"><a href="#评估回归模型" class="headerlink" title="评估回归模型"></a>评估回归模型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error, r2_score</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算均方误差</span></span><br><span class="line">mse = mean_squared_error(y_test, y_pred)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算决定系数 R^2</span></span><br><span class="line">r2 = r2_score(y_test, y_pred)</span><br></pre></td></tr></table></figure><h4 id="评估分类模型"><a href="#评估分类模型" class="headerlink" title="评估分类模型"></a>评估分类模型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score, confusion_matrix, classification_report</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算准确率</span></span><br><span class="line">accuracy = accuracy_score(y_test, y_pred)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算混淆矩阵</span></span><br><span class="line">conf_matrix = confusion_matrix(y_test, y_pred)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出分类报告：包括精准率、召回率和F1值</span></span><br><span class="line">report = classification_report(y_test, y_pred)</span><br></pre></td></tr></table></figure><h4 id="ROC-曲线和-AUC"><a href="#ROC-曲线和-AUC" class="headerlink" title="ROC 曲线和 AUC"></a>ROC 曲线和 AUC</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> roc_curve, auc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算ROC曲线的FPR、TPR</span></span><br><span class="line">fpr, tpr, thresholds = roc_curve(y_test, y_pred_prob)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算AUC值</span></span><br><span class="line">roc_auc = auc(fpr, tpr)</span><br></pre></td></tr></table></figure><h3 id="交叉验证与模型选择"><a href="#交叉验证与模型选择" class="headerlink" title="交叉验证与模型选择"></a><strong>交叉验证与模型选择</strong></h3><h4 id="K折交叉验证"><a href="#K折交叉验证" class="headerlink" title="K折交叉验证"></a>K折交叉验证</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"></span><br><span class="line"><span class="comment"># K折交叉验证</span></span><br><span class="line">scores = cross_val_score(model, X, y, cv=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h4 id="网格搜索调参"><a href="#网格搜索调参" class="headerlink" title="网格搜索调参"></a>网格搜索调参</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义参数范围</span></span><br><span class="line">param_grid = &#123;<span class="string">&#x27;n_estimators&#x27;</span>: [<span class="number">50</span>, <span class="number">100</span>, <span class="number">200</span>], <span class="string">&#x27;max_depth&#x27;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 网格搜索</span></span><br><span class="line">grid_search = GridSearchCV(estimator=model, param_grid=param_grid, cv=<span class="number">5</span>)</span><br><span class="line">grid_search.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取最佳参数</span></span><br><span class="line">best_params = grid_search.best_params_</span><br></pre></td></tr></table></figure><h4 id="随机搜索调参"><a href="#随机搜索调参" class="headerlink" title="随机搜索调参"></a>随机搜索调参</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> RandomizedSearchCV</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机搜索</span></span><br><span class="line">random_search = RandomizedSearchCV(estimator=model, param_distributions=param_grid, n_iter=<span class="number">10</span>, cv=<span class="number">5</span>)</span><br><span class="line">random_search.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取最佳参数</span></span><br><span class="line">best_params = random_search.best_params_</span><br></pre></td></tr></table></figure><h3 id="特征工程"><a href="#特征工程" class="headerlink" title="特征工程"></a><strong>特征工程</strong></h3><h4 id="主成分分析-PCA"><a href="#主成分分析-PCA" class="headerlink" title="主成分分析 (PCA)"></a>主成分分析 (PCA)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主成分分析</span></span><br><span class="line">pca = PCA(n_components=<span class="number">2</span>)</span><br><span class="line">X_pca = pca.fit_transform(X)</span><br></pre></td></tr></table></figure><h4 id="线性判别分析-LDA"><a href="#线性判别分析-LDA" class="headerlink" title="线性判别分析 (LDA)"></a>线性判别分析 (LDA)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.discriminant_analysis <span class="keyword">import</span> LinearDiscriminantAnalysis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 线性判别分析</span></span><br><span class="line">lda = LinearDiscriminantAnalysis(n_components=<span class="number">1</span>)</span><br><span class="line">X_lda = lda.fit_transform(X, y)</span><br></pre></td></tr></table></figure><h4 id="特征提取"><a href="#特征提取" class="headerlink" title="特征提取"></a>特征提取</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction.text <span class="keyword">import</span> TfidfVectorizer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文本特征提取（TF-IDF）</span></span><br><span class="line">vectorizer = TfidfVectorizer()</span><br><span class="line">X_tfidf = vectorizer.fit_transform(corpus)</span><br></pre></td></tr></table></figure><h3 id="模型持久化"><a href="#模型持久化" class="headerlink" title="模型持久化"></a><strong>模型持久化</strong></h3><h4 id="保存模型"><a href="#保存模型" class="headerlink" title="保存模型"></a>保存模型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> joblib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存模型到文件</span></span><br><span class="line">joblib.dump(model, <span class="string">&#x27;model.pkl&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="加载模型"><a href="#加载模型" class="headerlink" title="加载模型"></a>加载模型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从文件加载模型</span></span><br><span class="line">model = joblib.load(<span class="string">&#x27;model.pkl&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="管道与组合"><a href="#管道与组合" class="headerlink" title="管道与组合"></a><strong>管道与组合</strong></h3><h4 id="使用管道"><a href="#使用管道" class="headerlink" title="使用管道"></a>使用管道</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> Pipeline</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个包含预处理和模型的管道</span></span><br><span class="line">pipeline = Pipeline([</span><br><span class="line">    (<span class="string">&#x27;scaler&#x27;</span>, StandardScaler()),</span><br><span class="line">    (<span class="string">&#x27;classifier&#x27;</span>, RandomForestClassifier())</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练管道</span></span><br><span class="line">pipeline.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用管道进行预测</span></span><br><span class="line">y_pred = pipeline.predict(X_test)</span><br></pre></td></tr></table></figure><h3 id="其他常见方法"><a href="#其他常见方法" class="headerlink" title="其他常见方法"></a><strong>其他常见方法</strong></h3><h4 id="特征重要性"><a href="#特征重要性" class="headerlink" title="特征重要性"></a>特征重要性</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取模型的特征重要性（对于决策树类模型）</span></span><br><span class="line">importances = model.feature_importances_</span><br></pre></td></tr></table></figure><h4 id="模型预测概率"><a href="#模型预测概率" class="headerlink" title="模型预测概率"></a>模型预测概率</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取预测的类别概率</span></span><br><span class="line">y_pred_prob = model.predict_proba(X_test)</span><br></pre></td></tr></table></figure><h4 id="训练模型的过程显示"><a href="#训练模型的过程显示" class="headerlink" title="训练模型的过程显示"></a>训练模型的过程显示</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在训练过程中显示进度</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.2</span>)</span><br><span class="line">model = RandomForestClassifier(n_estimators=<span class="number">100</span>)</span><br><span class="line">model.fit(X_train, y_train)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QQMusic-CLI 开发日记</title>
      <link href="/2024/11/08/QQMusic-CLI-1-md/"/>
      <url>/2024/11/08/QQMusic-CLI-1-md/</url>
      
        <content type="html"><![CDATA[<h2 id="关于-C-的一些知识"><a href="#关于-C-的一些知识" class="headerlink" title="关于 C++ 的一些知识"></a>关于 C++ 的一些知识</h2><h3 id="链接-链接性（Linkage）指的是符号（如变量和函数）在不同翻译单元之间的可见性。C-C-中有三种链接性："><a href="#链接-链接性（Linkage）指的是符号（如变量和函数）在不同翻译单元之间的可见性。C-C-中有三种链接性：" class="headerlink" title="链接 链接性（Linkage）指的是符号（如变量和函数）在不同翻译单元之间的可见性。C&#x2F;C++中有三种链接性："></a>链接 链接性（Linkage）指的是符号（如变量和函数）在不同翻译单元之间的可见性。C&#x2F;C++中有三种链接性：</h3><ol><li><strong>内部链接性（Internal Linkage）</strong>：符号只能在定义它的翻译单元内可见。</li><li><strong>外部链接性（External Linkage）</strong>：符号可以在多个翻译单元之间共享。默认情况下，函数和全局变量具有外部链接性。</li><li><strong>无链接性（No Linkage）</strong>：符号只能在定义它的块内可见。局部变量和函数参数具有无链接性。</li></ol><p>对于全局变量和函数，有以下关键字可用于指定链接性：</p><ol><li><code>static</code><br><code>static</code> 修饰的全局变量和函数具有内部链接性，即只在它所处的翻译单元内可见。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">float</span> b = <span class="number">3.14f</span>;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>extern</code><br><code>extern</code> 修饰的全局变量和函数具有外部链接性，即可以在多个翻译单元之间共享。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="type">int</span> <span class="title">printf</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *__restrict __format, ...)</span></span>;</span><br></pre></td></tr></table></figure><p>他们的定义可以在自身的翻译单元，也可以在别的翻译单元中。</p><ol start="3"><li><code>const</code><br><code>const</code> 修饰全局变量除了指定其为常量以外，还使其默认具有内部链接性，但可以显示指定 <code>extern</code> 使其具有外部链接性。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> a = <span class="number">42</span>;           <span class="comment">// 具有内部链接性</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> b = <span class="number">42</span>;    <span class="comment">// 具有内部链接性</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">const</span> <span class="type">int</span> c = <span class="number">42</span>;    <span class="comment">// 具有外部链接性</span></span><br></pre></td></tr></table></figure><ol start="4"><li><code>inline</code><br><code>inline</code> 修饰符修饰的函数和变量具有外部链接性，与 <code>extern</code> 不同，<code>inline</code> 允许函数被定义多次，但是每个定义必须相同，称作外部静态链接。在此之前，如果把函数的实现和全局变量定义也写在头文件中，那么函数和变量就会被多个翻译单元同时定义，造成重复定义。使用 <code>inline</code> 后，函数的实现和变量定义就可以写在头文件中。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> TEST_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TEST_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>这个头文件就不会引起重复定义。</p><p><strong>库文件</strong>是用于在不同程序中重用代码而产生的，具体分为<strong>静态链接库</strong>和<strong>动态链接库</strong>两种。<br><strong>动态库</strong>和<strong>静态库</strong>是两种用于代码重用和共享的库文件形式。他们在编译和链接过程中具有不同的行为和用途。<br><strong>静态库</strong>是在编译时将库的代码复制到最终可执行文件中。静态库通常具有 <code>.a</code> 或 <code>.lib</code> 后缀。</p><ul><li><strong>编译时链接</strong>：静态库在编译时被链接到可执行文件中。</li><li><strong>独立性</strong>：生成的可执行文件包含所有必要的库代码，因此在运行是不需要依赖外部库文件。</li><li><strong>文件大小</strong>：大。</li><li><strong>更新困难</strong>：如果库代码需要更新，必须重新编译所有使用该库的可执行文件。</li></ul><p><strong>动态库</strong>是在运行时由操作系统加载到内存中。动态库通常具有 <code>.so</code> 或 <code>.dll</code> 后缀。</p><ul><li><strong>运行时链接</strong>：动态库在运行时被链接到可执行文件中。</li><li><strong>共享性</strong>：多个可执行文件可以共享同一个动态库，减少内存占用和磁盘空间。</li><li><strong>文件大小</strong>：小。</li><li><strong>更新方便</strong>：只需更新动态库文件。</li></ul><h3 id="GDB-调试"><a href="#GDB-调试" class="headerlink" title="GDB 调试"></a>GDB 调试</h3><h2 id="FFMpeg"><a href="#FFMpeg" class="headerlink" title="FFMpeg"></a>FFMpeg</h2><p><code>FFmpeg</code> 是一个强大的多媒体处理工具，广泛用于视频和音频的转换、处理等操作。以下是一些常用的 <code>FFmpeg</code> 参数：</p><h3 id="输入和输出参数"><a href="#输入和输出参数" class="headerlink" title="输入和输出参数"></a>输入和输出参数</h3><ul><li><code>-i &lt;input_file&gt;</code>：指定输入文件。</li><li><code>&lt;output_file&gt;</code>：指定输出文件（通常放在参数的最后）。</li></ul><h3 id="格式转换"><a href="#格式转换" class="headerlink" title="格式转换"></a>格式转换</h3><ul><li><code>-f &lt;format&gt;</code>：指定输出格式，例如 <code>mp4</code>、<code>mp3</code>、<code>wav</code> 等。</li></ul><h3 id="视频编码参数"><a href="#视频编码参数" class="headerlink" title="视频编码参数"></a>视频编码参数</h3><ul><li><code>-c:v &lt;codec&gt;</code>：指定视频编码器，比如 <code>libx264</code>、<code>libx265</code>、<code>mpeg4</code>。</li><li><code>-b:v &lt;bitrate&gt;</code>：指定视频比特率，比如 <code>1M</code> 表示 1 Mbps。</li><li><code>-r &lt;fps&gt;</code>：设置视频帧率（如 <code>30</code>、<code>60</code> 等）。</li><li><code>-s &lt;resolution&gt;</code>：设置分辨率（如 <code>1920x1080</code>）。</li><li><code>-crf &lt;value&gt;</code>：恒定速率因子，控制视频质量（范围通常是 <code>0-51</code>，越低质量越好，常用 <code>23</code> 左右）。</li><li><code>-preset &lt;speed&gt;</code>：设置编码速度，例如 <code>ultrafast</code>、<code>superfast</code>、<code>veryfast</code>、<code>faster</code>、<code>fast</code>、<code>medium</code>、<code>slow</code>、<code>slower</code>、<code>veryslow</code>。越快文件越大，但编码速度越快。</li></ul><h3 id="音频编码参数"><a href="#音频编码参数" class="headerlink" title="音频编码参数"></a>音频编码参数</h3><ul><li><code>-c:a &lt;codec&gt;</code>：指定音频编码器，比如 <code>aac</code>、<code>mp3</code>、<code>pcm_s16le</code>。</li><li><code>-b:a &lt;bitrate&gt;</code>：指定音频比特率，比如 <code>128k</code>。</li><li><code>-ar &lt;rate&gt;</code>：设置音频采样率，比如 <code>44100</code>。</li><li><code>-ac &lt;channels&gt;</code>：设置音频通道数，比如 <code>1</code>（单声道）或 <code>2</code>（立体声）。</li></ul><h3 id="截取和裁剪"><a href="#截取和裁剪" class="headerlink" title="截取和裁剪"></a>截取和裁剪</h3><ul><li><code>-ss &lt;time&gt;</code>：设置开始时间，格式如 <code>00:01:30</code> 表示从 1 分 30 秒处开始。</li><li><code>-to &lt;time&gt;</code>：设置结束时间。</li><li><code>-t &lt;duration&gt;</code>：设置持续时间，比如 <code>00:00:10</code> 表示截取 10 秒长的视频。</li><li><code>-vf &quot;crop=w:h:x:y&quot;</code>：裁剪视频的宽、高和起始位置。例如，<code>crop=1920:1080:0:0</code> 表示裁剪 1920x1080 的区域，从左上角开始。</li></ul><h3 id="缩放与旋转"><a href="#缩放与旋转" class="headerlink" title="缩放与旋转"></a>缩放与旋转</h3><ul><li><code>-vf &quot;scale=&lt;width&gt;:&lt;height&gt;&quot;</code>：调整视频分辨率。</li><li><code>-vf &quot;transpose=&lt;value&gt;&quot;</code>：旋转视频（0&#x3D;90° 顺时针，1&#x3D;90° 逆时针，2&#x3D;水平翻转，3&#x3D;垂直翻转）。</li></ul><h3 id="其他常用参数"><a href="#其他常用参数" class="headerlink" title="其他常用参数"></a>其他常用参数</h3><ul><li><code>-an</code>：去除音频。</li><li><code>-vn</code>：去除视频。</li><li><code>-y</code>：自动覆盖输出文件。</li><li><code>-threads &lt;num&gt;</code>：设置线程数来加速处理。</li><li><code>-filter_complex</code>：用于更复杂的滤镜操作（如叠加、拼接）。</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul><li><strong>转换格式</strong>：<code>ffmpeg -i input.mp4 output.avi</code></li><li><strong>截取视频</strong>：<code>ffmpeg -i input.mp4 -ss 00:00:30 -t 10 output.mp4</code></li><li><strong>改变分辨率</strong>：<code>ffmpeg -i input.mp4 -vf scale=1280:720 output.mp4</code></li><li><strong>压缩视频</strong>：<code>ffmpeg -i input.mp4 -vcodec libx265 -crf 28 output.mp4</code></li><li><strong>提取音频</strong>：<code>ffmpeg -i input.mp4 -vn -acodec mp3 output.mp3</code></li></ul><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h2 id="Linux-进阶"><a href="#Linux-进阶" class="headerlink" title="Linux 进阶"></a>Linux 进阶</h2><ol><li>ps</li><li>htop</li></ol><ul><li><C-z> 挂起进程</li><li>jobs 后台运行 </li><li>fg %1<br><strong>nuhup</strong><br>在命令后加 <code>&amp;</code> 符号，可以将命令放入后台运行。</li></ul><p><strong>systemd</strong> systemd status<br>jounalctl -eu <unit> 查看某个服务最后的日志</p><h3 id="创建一个自己的服务"><a href="#创建一个自己的服务" class="headerlink" title="创建一个自己的服务"></a>创建一个自己的服务</h3><p><code>sudo vim /etc/systemd/system/myservice.service</code></p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=My Service</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/usr/bin/myservice</span><br><span class="line">Restart=always</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>重载配置文件<br><code>sudo systemctl daemon-reload</code></p><p>使用 <code>systemctl</code> 命令启动、停止、重启服务<br><code>sudo systemctl enable/disable ping</code><br><code>sudo systemctl start/stop/restart myservice</code></p><h3 id="用户和权限"><a href="#用户和权限" class="headerlink" title="用户和权限"></a>用户和权限</h3><p><code>/etc/passwd</code> 包含了所有用户的信息，包括用户名、密码、UID、GID、描述、家目录、登录 shell 等。<br><code>etc/group</code> 包含了所有用户组的信息，包括组名、GID、包含的用户等。</p><p>把用户加入<code>docker</code>组，可以免密码使用<code>docker</code>命令。</p><p><code>useradd</code> 命令用于创建用户，<code>-m</code> 参数用于创建用户的家目录。<br><code>usermod name -aG group username</code> 命令用于修改用户信息。<br><code>userdel</code> 命令用于删除用户。</p><p><code>ls</code> 硬链接数 所有者 所有组</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 组第一次授课前夕的网络问题解决</title>
      <link href="/2024/10/28/vmf-network/"/>
      <url>/2024/10/28/vmf-network/</url>
      
        <content type="html"><![CDATA[<h2 id="虚拟机-vmware-网络配置"><a href="#虚拟机-vmware-网络配置" class="headerlink" title="虚拟机 vmware 网络配置"></a>虚拟机 vmware 网络配置</h2><p><img src="/./images/vmf-network/ipv4.png"></p><p><img src="/./images/vmf-network/private_ipv4.png"></p><ul><li><strong>回送地址</strong>（loopback address）：127.0.0.1，用于主机之间通信，表示本机。无论什么程序，一旦使用回送地址发送数据，协议软件立即返回之，不进行任何网络传输。含网络号127的分组不能出现在任何网络上。<code>Ping 127.0.0.1</code> 如果反馈信息失败,说明你的网卡不能和IP协议栈进行通信。</li><li><strong>广播地址</strong>（broadcast address）：255.255.255.255，用于网络广播，表示整个网络。任何一台计算机向该地址发送数据，该数据将被该网络上的所有计算机接收。</li><li><strong>网络地址</strong>（network address）：192.168.0.0&#x2F;24，用于局域网内通信，表示该网络。</li><li><strong>子网掩码</strong>（subnet mask）：255.255.255.0，用于标识网络地址的哪些位标识主机，哪些位标识网络。<br>TCP&#x2F;IP规定，主机号全为”1”的网络地址用于广播之用，叫做广播地址。所谓广播，指同时向同一子网所有主机发送报文。</li></ul><p><a href="https://www.bilibili.com/video/BV11M4y1J7zP/?share_source=copy_web&vd_source=4e6e3d05c54fbafa49b2a00b5cc81815">【【虚拟机网络模式】NAT | NAT网络 | 桥接Bridged | 内部网络Internal | 仅主机(Host-Only)】 </a></p><p><a href="https://www.cnblogs.com/bokers/p/15763286.html">vmware 网络配置</a></p><h2 id="局域网内文件传输"><a href="#局域网内文件传输" class="headerlink" title="局域网内文件传输"></a>局域网内文件传输</h2><p>两台计算机在同一局域网内</p><p>需要传输文件的一方：</p><p>windows 系统下：<code>ipconfig</code>查看 ipv4 地址</p><p>在需要传输的文件目录下打开 cmd 输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m http.server 8000</span><br></pre></td></tr></table></figure><p>接受文件的一方：</p><p>在浏览器地址栏中输入：ipv4:8000</p><p>即可看到文件列表，点击文件名即可下载文件。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 经历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于 matplotlib 的一点小事</title>
      <link href="/2024/10/28/matplotlib/"/>
      <url>/2024/10/28/matplotlib/</url>
      
        <content type="html"><![CDATA[<blockquote><p>matplotlib 的最新版本只支持 Python 3.9 及以下版本。<br>在 matplotlib 中使用 latex 语法，直接使用即可，不必在全局启用，否则会报一个找不到 latex.fmt 的错误。</p></blockquote><h2 id="获取系统支持字体"><a href="#获取系统支持字体" class="headerlink" title="获取系统支持字体"></a>获取系统支持字体</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line">a=<span class="built_in">sorted</span>([f.name <span class="keyword">for</span> f <span class="keyword">in</span> matplotlib.font_manager.fontManager.ttflist])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>听说比较好看的字体：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">goodfont=[</span><br><span class="line"> <span class="string">&#x27;Adobe Heiti Std&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;Arial Unicode MS&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;DengXian&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;SimHei&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;STKaiti&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;STXihei&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>SimHei 字体下载链接：<a href="https://www.webfontfree.com/cn/download/SimHei">Link🔗</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd  </span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.family&#x27;</span>] = <span class="string">&#x27;DejaVu Serif&#x27;</span></span><br><span class="line">zhfont1 = matplotlib.font_manager.FontProperties(fname=<span class="string">&quot;./SimHei.ttf&quot;</span>) </span><br><span class="line"></span><br><span class="line">data = &#123;  </span><br><span class="line">    <span class="string">&#x27;Voltage (V)&#x27;</span>: <span class="built_in">list</span>(np.linspace(<span class="number">0.5</span> ,<span class="number">80</span>,num=<span class="number">160</span>,endpoint=<span class="literal">True</span>)),</span><br><span class="line">    <span class="string">&#x27;Current (10^-7 A)&#x27;</span>: [</span><br><span class="line">        <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>, <span class="number">0.2</span>, <span class="number">0.6</span>, <span class="number">1.2</span>, <span class="number">2.3</span>, <span class="number">3.5</span>, <span class="number">5.1</span>, <span class="number">6.9</span>, <span class="number">8.4</span>, <span class="number">10.3</span>,<span class="number">12.0</span>,<span class="number">13.4</span>,<span class="number">15.0</span>,<span class="number">16.4</span>,<span class="number">17.4</span>,<span class="number">18.7</span>,<span class="number">19.9</span>,<span class="number">20.6</span>,<span class="number">21.6</span>,<span class="number">22.2</span>,</span><br><span class="line">        <span class="number">22.5</span>,<span class="number">22.7</span>,<span class="number">22.9</span>,<span class="number">23.0</span>,<span class="number">22.9</span>,<span class="number">22.7</span>,<span class="number">22.1</span>,<span class="number">21.7</span>,<span class="number">21.3</span>,<span class="number">21.0</span>,<span class="number">21.0</span>,<span class="number">21.4</span>,<span class="number">22.1</span>,<span class="number">23.1</span>,<span class="number">24.5</span>,<span class="number">26.2</span>,<span class="number">27.8</span>,<span class="number">29.7</span>,<span class="number">31.6</span>,<span class="number">33.3</span>,</span><br><span class="line">        <span class="number">34.6</span>,<span class="number">35.8</span>,<span class="number">36.7</span>,<span class="number">37.1</span>,<span class="number">37.2</span>,<span class="number">36.8</span>,<span class="number">36.1</span>,<span class="number">34.8</span>,<span class="number">33.2</span>,<span class="number">31.6</span>,<span class="number">29.5</span>,<span class="number">27.5</span>,<span class="number">26.0</span>,<span class="number">24.7</span>,<span class="number">24.4</span>,<span class="number">25.2</span>,<span class="number">27.1</span>,<span class="number">29.9</span>,<span class="number">32.8</span>,<span class="number">36.5</span>,</span><br><span class="line">        <span class="number">40.2</span>,<span class="number">43.7</span>,<span class="number">46.1</span>,<span class="number">48.5</span>,<span class="number">50.3</span>,<span class="number">51.0</span>,<span class="number">51.1</span>,<span class="number">50.3</span>,<span class="number">48.9</span>,<span class="number">46.5</span>,<span class="number">43.3</span>,<span class="number">40.3</span>,<span class="number">36.3</span>,<span class="number">32.3</span>,<span class="number">29.2</span>,<span class="number">26.3</span>,<span class="number">24.8</span>,<span class="number">25.2</span>,<span class="number">27.5</span>,<span class="number">31.4</span>,</span><br><span class="line">        <span class="number">36.7</span>,<span class="number">41.3</span>,<span class="number">46.9</span>,<span class="number">52.1</span>,<span class="number">55.9</span>,<span class="number">59.7</span>,<span class="number">62.4</span>,<span class="number">63.9</span>,<span class="number">64.5</span>,<span class="number">64.1</span>,<span class="number">62.8</span>,<span class="number">60.1</span>,<span class="number">56.4</span>,<span class="number">52.6</span>,<span class="number">47.5</span>,<span class="number">41.9</span>,<span class="number">37.3</span>,<span class="number">32.2</span>,<span class="number">28.7</span>,<span class="number">27.4</span>,</span><br><span class="line">        <span class="number">28.3</span>,<span class="number">32.0</span>,<span class="number">37.2</span>,<span class="number">42.1</span>,<span class="number">49.4</span>,<span class="number">56.0</span>,<span class="number">61.0</span>,<span class="number">66.5</span>,<span class="number">70.3</span>,<span class="number">73.3</span>,<span class="number">75.7</span>,<span class="number">76.7</span>,<span class="number">76.5</span>,<span class="number">75.1</span>,<span class="number">72.4</span>,<span class="number">69.2</span>,<span class="number">64.5</span>,<span class="number">58.8</span>,<span class="number">53.7</span>,<span class="number">47.3</span>,</span><br><span class="line">        <span class="number">41.2</span>,<span class="number">36.2</span>,<span class="number">33.7</span>,<span class="number">33.0</span>,<span class="number">35.3</span>,<span class="number">39.1</span>,<span class="number">45.1</span>,<span class="number">52.1</span>,<span class="number">57.9</span>,<span class="number">64.9</span>,<span class="number">71.3</span>,<span class="number">75.9</span>,<span class="number">80.5</span>,<span class="number">83.9</span>,<span class="number">85.7</span>,<span class="number">86.8</span>,<span class="number">86.5</span>,<span class="number">85.4</span>,<span class="number">82.8</span>,<span class="number">79.1</span></span><br><span class="line">    ]</span><br><span class="line">&#125;  </span><br><span class="line">df = pd.DataFrame(data)  </span><br><span class="line"></span><br><span class="line">thresholds = [<span class="number">22.0</span>, <span class="number">32.5</span>, <span class="number">43.5</span>, <span class="number">54.5</span>, <span class="number">66.0</span>, <span class="number">78.0</span>]</span><br><span class="line">currents = [<span class="number">23.0</span>, <span class="number">37.2</span>, <span class="number">51.1</span>, <span class="number">64.5</span>, <span class="number">76.7</span>, <span class="number">86.8</span>]</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))  </span><br><span class="line">plt.plot(df[<span class="string">&#x27;Voltage (V)&#x27;</span>], df[<span class="string">&#x27;Current (10^-7 A)&#x27;</span>], label=<span class="string">&#x27;Current vs. Second Grid Voltage&#x27;</span>)  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(thresholds)):</span><br><span class="line">    plt.plot([thresholds[i], thresholds[i]], [<span class="number">0</span>, currents[i]], color=<span class="string">&#x27;black&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>)</span><br><span class="line">    plt.text(x=thresholds[i]-<span class="number">1</span>, y=-<span class="number">5</span>, s=<span class="string">rf&#x27;$U_<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>$&#x27;</span>, color=<span class="string">&#x27;black&#x27;</span>, fontsize=<span class="number">12</span>, fontproperties=zhfont1)</span><br><span class="line">    plt.text(x=thresholds[i]-<span class="number">5</span>, y=currents[i]+<span class="number">3</span>, s=<span class="string">f&#x27;<span class="subst">&#123;thresholds[i], currents[i]&#125;</span>&#x27;</span>, color=<span class="string">&#x27;black&#x27;</span>, fontsize=<span class="number">12</span>, fontproperties=zhfont1)</span><br><span class="line">    </span><br><span class="line">plt.text(x=<span class="number">20</span>,y=<span class="number">60</span>,s=<span class="string">r&#x27;I-$U_&#123;G_2K&#125;$曲线&#x27;</span>,horizontalalignment=<span class="string">&#x27;center&#x27;</span>,color=<span class="string">&#x27;black&#x27;</span> ,fontsize=<span class="number">15</span>,fontproperties=zhfont1)</span><br><span class="line">plt.text(x=<span class="number">0</span>,y=<span class="number">100</span>,s=<span class="string">&#x27;XXX&#x27;</span>,horizontalalignment=<span class="string">&#x27;center&#x27;</span>,color=<span class="string">&#x27;black&#x27;</span> ,fontsize=<span class="number">15</span>,fontproperties=zhfont1)</span><br><span class="line">plt.xlabel(<span class="string">r&#x27;$U_&#123;G_2K&#125; (V)$&#x27;</span>,loc=<span class="string">&#x27;right&#x27;</span>)  </span><br><span class="line">plt.ylabel(<span class="string">r&#x27;$I (10^&#123;-7&#125; A)$&#x27;</span>,loc=<span class="string">&#x27;top&#x27;</span>)  </span><br><span class="line">plt.title(<span class="string">r&#x27;弗兰克-赫兹实验的 $I-U_&#123;G_2K&#125;$ 曲线&#x27;</span>,fontsize=<span class="number">22</span>,fontproperties=zhfont1)  </span><br><span class="line">plt.legend()  </span><br><span class="line">plt.grid(<span class="literal">True</span>)  </span><br><span class="line"></span><br><span class="line">ax = plt.gca()</span><br><span class="line">ax.spines[<span class="string">&quot;right&quot;</span>].set_color(<span class="string">&quot;none&quot;</span>)</span><br><span class="line">ax.spines[<span class="string">&quot;top&quot;</span>].set_color(<span class="string">&quot;none&quot;</span>)</span><br><span class="line">ax.xaxis.set_ticks_position(<span class="string">&quot;bottom&quot;</span>)</span><br><span class="line">ax.spines[<span class="string">&quot;bottom&quot;</span>].set_position((<span class="string">&quot;data&quot;</span>,<span class="number">0</span>))</span><br><span class="line">ax.yaxis.set_ticks_position(<span class="string">&quot;left&quot;</span>)</span><br><span class="line">ax.spines[<span class="string">&quot;left&quot;</span>].set_position((<span class="string">&quot;data&quot;</span>,<span class="number">0</span>))</span><br><span class="line">plt.savefig(<span class="string">&#x27;exp.png&#x27;</span>,dpi=<span class="number">300</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 环境配置</title>
      <link href="/2024/10/26/python-env/"/>
      <url>/2024/10/26/python-env/</url>
      
        <content type="html"><![CDATA[<blockquote><p>观前提醒：请先参阅以下文章，遇到问题请先自行使用搜索引擎查找解决方案。<br><a href="https://lug.ustc.edu.cn/wiki/doc/smart-questions/">提问的智慧</a>或者<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/main/README-zh_CN.md">提问的智慧</a><br><a href="https://imchenway.com/2019/12/14/%E5%96%84%E7%94%A8Google/">善用google</a>和<a href="https://csdiy.wiki/%E5%BF%85%E5%AD%A6%E5%B7%A5%E5%85%B7/%E4%BF%A1%E6%81%AF%E6%A3%80%E7%B4%A2/">信息检索</a></p></blockquote><hr><h2 id="解释型语言"><a href="#解释型语言" class="headerlink" title="解释型语言"></a>解释型语言</h2><ul><li><p><strong>编译型语言</strong>需要将项目先<strong>编译</strong>成机器码，再执行。</p></li><li><p><strong>解释型语言</strong>逐行<strong>解释</strong>。解释的过程中就包括了编译，整个项目执行完后，会产生一个编译产物<code>*.pyc</code>文件在<code>__pycache__</code>目录下，下次运行时直接加载这个文件，就不需要再次编译。可理解为缓存文件。</p></li></ul><h2 id="python-相关工具介绍"><a href="#python-相关工具介绍" class="headerlink" title="python 相关工具介绍"></a>python 相关工具介绍</h2><ol><li>你编辑代码，需要<strong>编辑器</strong>（记事本，vim，VS Code等）</li><li>你运行代码，需要<strong>解释器</strong>（python.exe，ipython.exe等）</li><li>你调试代码，需要<strong>调试器</strong>（pdb，ipdb等）</li><li>你安装第三方库，需要<strong>包管理器</strong>（pip，conda等）</li><li>你管理环境，需要<strong>虚拟环境</strong>（virtualenv，venv等）</li><li>集多重功能于一体的，叫<strong>集成开发环境 IDE</strong>（如PyCharm）</li></ol><p>对于上面的工具，我做一些简单介绍：</p><ul><li><strong>编辑器</strong>：VS Code 非常轻量，下载方便（windows中有两种下载方式，一种是从官网下载，一种是从微软商店里下载）相关的配置文件你也可以保存在 github 上，方便你在其他人电脑（或者你自己的其他设备）上快速布置你的开发环境，或者在不小心丢失了配置时从 github 上直接下载。而且 VS Code 高度可拓展，你可以安装各种插件来提高你的开发效率。而且 VS Code 基本支持所有语言，不需要像 IDE 那样学一门语言就要多学一个 IDE 。另外，VS Code 还支持 wsl2</li><li><strong>解释器</strong>：python 有很多版本的解释器，比如 CPython（由 Python 创始人开发，用C语言写出来的），PyPy（用 Python 写出来的）</li><li><strong>IPython</strong>：IPython 是可以基于 CPython 的交互式解释器，常与 Jupyter Notebook 配合使用。</li><li><strong>包管理器</strong>：你在看别人代码时，经常在开头看到<code>import xxx</code>，但是在你自己这却会报错，这是因为你从官网下载了 Python 后，里面是内置了很多库，但是就是没有这个报错的库，这时你就需要用包管理器来安装这个库，比如 pip，conda。在这里经常出的问题是换源问题，这在院科协 python 组的招新试题中已有提醒。</li><li><strong>虚拟环境</strong>：你使用包管理器安装的第三方库是有版本的，然而有些库的版本不兼容，你把他们安装在一起就会冲突，所以需要用虚拟环境把他们隔开。<code>conda create -n 虚拟环境名称 python=某一个python版本</code>即可创建一个虚拟环境，然后<code>conda activate 虚拟环境名称</code>激活虚拟环境，在虚拟环境里安装第三方库。你会发现，conda 不仅可以下载第三方库，也可以管理虚拟环境。</li><li><strong>Anaconda</strong>：你装了 Anaconda 就有了 conda 和 Jupyter Notebook。</li><li><strong>Jupyter Notebook</strong>：交互式计算环境。当你装了 Anaconda 后，你就可以用 Anaconda 打开一个在浏览器里的 Jupyter Notebook 了。当然，你也可以使用 VS Code 打开，文件名后缀为<code>.ipynb</code>。</li><li><strong>python 版本选择</strong>：截至目前，python 3.13 版本是最新的，但不是说最新的最好用，你要看你想要使用的第三方库支持的是哪一个版本，虚拟环境就是可以帮助你选择版本的。</li></ul><p>你可以选择：</p><ol><li>最朴素的环境：记事本 + 从官网下载的 python（包括了python解释器和pip包管理器）+ virtualenv（创建虚拟环境）</li><li>推荐：VS Code + Anaconda （安装后就不需要再从官网安装 python 了）</li><li>当然，你也可以选择只使用一个 Anaconda 在浏览器中打开 Jupyter Notebook。</li><li>云开发环境：Google Colab，Kaggle 等。</li></ol><hr><h2 id="安装-Anaconda"><a href="#安装-Anaconda" class="headerlink" title="安装 Anaconda"></a>安装 Anaconda</h2><blockquote><p>观前提醒，请先从各种你能想到的途径学会科学上网，下载一个东西，凡是以小时记的，基本上都需要科学上网。</p></blockquote><ul><li><p>不科学上网使用镜像站下载快：<br><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/?C=M&O=D">清华大学开源软件镜像站</a></p></li><li><p>官网下载(不科学上网需要5分钟以上时间，你猜猜是多久呢)：<br><a href="https://www.anaconda.com/download">官网</a></p></li></ul><p><img src="/./images/python-env/env_4.png" alt="跳过注册"></p><p><img src="/./images/python-env/env_5.png" alt="点击下载"></p><h3 id="法一：手动配置环境变量（我相信你以后肯定还是会走这条路的）"><a href="#法一：手动配置环境变量（我相信你以后肯定还是会走这条路的）" class="headerlink" title="法一：手动配置环境变量（我相信你以后肯定还是会走这条路的）"></a>法一：手动配置环境变量（我相信你以后肯定还是会走这条路的）</h3><p>接下来，你可以选择一路 next 到底，安装完成后，再配置环境变量。在你电脑中找到下图中对应的三个环境变量，注意更改成你自己的环境路径。</p><p><img src="/./images/python-env/env_3.png" alt="anaconda环境变量配置"></p><p><code>win+r</code>打开运行框，输入<code>cmd</code>打开终端，在<code>cmd</code>中输入 <code>conda --version</code> 验证是否安装成功。</p><h3 id="法二：自动配置（适用初学者）"><a href="#法二：自动配置（适用初学者）" class="headerlink" title="法二：自动配置（适用初学者）"></a>法二：自动配置（适用初学者）</h3><p>我们只说需要改动的地方：</p><p><img src="/./images/python-env/env_6.png" alt="随便截了张图"></p><p>这里红字就是说会自动给你添加环境变量。</p><p>最后这个页面，两个东西可以不勾选，这是安装后打开 Anaconda 和了解它信息的东西。</p><p><img src="/./images/python-env/env_7.png" alt="不要勾选"></p><hr><h2 id="安装-VS-Code"><a href="#安装-VS-Code" class="headerlink" title="安装 VS Code"></a>安装 VS Code</h2><p><a href="https://code.visualstudio.com/">官网下载点这里</a></p><p><img src="/./images/python-env/vscode.png"></p><p>点击<code>download</code>会跳转页面，已经在下载了。<code>ctrl+j</code>会打开浏览器的下载管理，里面可以查看下载进度。下载完成后，双击安装包，安装程序会自动安装。</p><h3 id="如果你只希望能够使用"><a href="#如果你只希望能够使用" class="headerlink" title="如果你只希望能够使用"></a>如果你只希望能够使用</h3><ol><li>在<code>User Installer</code>和<code>System Installer</code>中选择前者（即默认）。</li><li>同意协议。</li><li>选择安装路径（非中文）。</li><li>选择附加任务：全部勾选（桌面快捷方式就是在桌面上会不会有这个图标，可以根据自己的喜好选择，如果不勾选，你还是可以有n种方式打开的;添加到PATH一定要勾选）。</li><li>准备安装：安装。</li><li>安装完成：完成。</li></ol><h3 id="深入理解环境变量"><a href="#深入理解环境变量" class="headerlink" title="深入理解环境变量"></a>深入理解环境变量</h3><p>我们只讨论上述安装过程中的第4步，也就是环境变量的问题。</p><p>你下载了一个东西，安装程序把它安装在一个地方，但是你的程序怎么知道它被安装在哪里呢？</p><p>在Windows操作系统中，查找环境变量的顺序通常遵循以下步骤（由AI生成）：</p><ol><li><p><strong>当前用户的环境变量</strong>：首先，系统会查找当前用户设置的环境变量。这些变量一般是在用户的用户配置文件中定义的。</p></li><li><p><strong>系统环境变量</strong>：如果在当前用户的环境变量中未找到，则系统接下来会查找系统范围内的环境变量。这些环境变量对所有用户都是可用的。</p></li><li><p><strong>特定应用程序的环境变量</strong>：某些应用程序可能会设置自己的环境变量，这些变量通常在应用程序启动时定义。如果这些环境变量存在，优先级高于用户和系统变量。</p></li><li><p><strong>默认环境变量</strong>：如果以上步骤都未能找到所需的变量，则可能会使用默认的环境变量。</p></li></ol><p>打开环境变量设置的最快方法：</p><ol><li>按下<code>win</code>键，启动搜索</li><li>输入<code>env</code></li><li><code>enter</code></li><li>点击<code>环境变量</code></li></ol><p><img src="/./images/python-env/env_1.png"></p><p><img src="/./images/python-env/env_2.png"></p><p>你设置的环境变量，无论是用户还是系统，理论上都能找到，都能使用。</p><h3 id="配置-VS-Code"><a href="#配置-VS-Code" class="headerlink" title="配置 VS Code"></a>配置 VS Code</h3><p><a href="https://code.visualstudio.com/docs/python/python-quick-start">官方教程</a></p><p><img src="/./images/python-env/extension.png" alt="拓展"></p><h3 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h3><p>接下来，你就可以按 <code>ctrl+f5</code> 运行程序了。或者按右上角的小三角</p><p><img src="/./images/python-env/run.png" alt="运行程序"></p><p>当然，你也可以用命令行，在终端输入<code>python 文件名.py</code>运行程序。加<code>-m</code>参数可以让解释器直接运行模块，产生<code>*.pyc</code>文件。</p><hr><p>偶然间发现了去年授课：<br><a href="https://bigbigbigwaterbucket.github.io/2023/10/29/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%E7%9A%84%E7%90%90%E4%BA%8B/Pycharm%E8%A3%85%E5%BA%93%E6%8C%87%E5%8C%97/">Pycharm 装库指北</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开会的要义</title>
      <link href="/2024/10/13/meeting/"/>
      <url>/2024/10/13/meeting/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：由两次集体项目开发有感，下文第一次项目代号S,第二次项目代号Q</p><p>本文仅讨论小团队中的开会和管理，约为10人左右，例如临时组建的小团队和沆瀣一气的家伙们组建的小团队，其他规模团队应当有其他的管理方式</p><p>关于团队开发，后来经朋友推荐，知道了<a href="https://oopg233.github.io/The-Mythical-Man-Month-zh/ch1.html">人月神话</a>,非常推荐阅读</p></blockquote><h3 id="少数服从多数的不合理性"><a href="#少数服从多数的不合理性" class="headerlink" title="少数服从多数的不合理性"></a>少数服从多数的不合理性</h3><p>在团队讨论中，经常会出现一些需要集体性进行决策的场景，比如决定项目的开发计划、项目的分工等，于是会有投票的决策方式。但是，这种看似公平公正的决策方式不一定是最优决策。有时在生死攸关的问题上，少数人会有更加聪明的独到的想法，但却由于多数人的无知和盲目而被动接受少数服从多数的结果。</p><p>我们应当充分尊重有不同见解，或者有坚定立场，或者有能力解决问题的成员，而不是一味地服从少数服从多数的原则。</p><p>我偏好在投票和讨论中设置弃权以为少数更加有用的想法不被埋没。</p><h3 id="民主共和还是霸道独裁"><a href="#民主共和还是霸道独裁" class="headerlink" title="民主共和还是霸道独裁"></a>民主共和还是霸道独裁</h3><p>在项目发起阶段，我认为项目发起人应当充分的霸道和独裁，在项目的全局性决策上，就应当做好所有决策，以此为基础吸引其他合作者的参与。合作者在参与前，应当首先充分的了解项目的背景和目的，以及为实现该目的所准备使用的工具和资源。应当保证核心人员的全局性参与。</p><p>我偏好在决定上的霸道和独裁，但不排除需要群策群力的情况。</p><h3 id="群体还是个人"><a href="#群体还是个人" class="headerlink" title="群体还是个人"></a>群体还是个人</h3><p>在开会或者讨论时，我们的讨论对象看似是整个群体，但群体终归还是由个人组成，特别是这样的小团队。在群体中的交流效果对于个人而言永远低于个人与个人的交流效果。</p><p>我偏好在发布集体性决策结果后，再针对每个人的特性，再发一条针对性的消息给相应个人。</p><h3 id="特定职位（偏将和吉祥物）"><a href="#特定职位（偏将和吉祥物）" class="headerlink" title="特定职位（偏将和吉祥物）"></a>特定职位（偏将和吉祥物）</h3><p>我认为设置个性化的特定职位将有助于团队成员明确自己的工作职责。</p><p>我偏好在团队中默认一个偏将的存在，这将大大减轻项目总负责人的决策压力。</p><p>如果能有一个吉祥物就更好了。</p><h3 id="学习成本"><a href="#学习成本" class="headerlink" title="学习成本"></a>学习成本</h3><p>项目发起人应当意识到其他人和自己的技术水平有所差别，在项目发起阶段，应当格外重视学习成本，而不是一直推项目进度。</p><p>在进行开会讨论前，也应保证与会者进行了相关学习，都能听懂会议内容。</p><h3 id="沟通成本和集体开发"><a href="#沟通成本和集体开发" class="headerlink" title="沟通成本和集体开发"></a>沟通成本和集体开发</h3><p>在项目S中，我们采取了集体开发的方式。在这种方式下，团队成员间的沟通交流成本应当是最低的。但不免闲聊（但是还是聊的技术相关的，别的也很开心）</p><p>我并不认为集体开发中闲聊降低开发效率，反而是减少了沟通成本，也有固定的开发时间，可以更好的集中精力。</p><p>所以如果有条件进行集体开发，我推荐进行。</p><h3 id="简短有力"><a href="#简短有力" class="headerlink" title="简短有力"></a>简短有力</h3><p>如果有开会，会议应当尽可能简短有力，没有人会喜欢花太多时间在开会上，仅是”开会”这一词便足以引起反感。</p><p>我认为开会应当尽量避免讨论太多细枝末节，而是聚焦于项目的全局性决策。议题应当明确，会议应当足够具有重要性。</p><h3 id="会前准备"><a href="#会前准备" class="headerlink" title="会前准备"></a>会前准备</h3><p>没有会前准备的会议将是一团垃圾。会前应当充分准备，包括会议的主题、议题、时间、地点、参会人员、准备材料等。</p><p>项目发起人可在会前指定在会上谁该作如何的发言，以及准备什么材料。这可以避免冷场。</p><p>我偏好在会前安排好发言顺序，让发言人有充足准备时间和适当的紧迫感。</p><h3 id="会议记录"><a href="#会议记录" class="headerlink" title="会议记录"></a>会议记录</h3><p>所有人都应当有记录会议内容的习惯。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PPT学习笔记</title>
      <link href="/2024/10/09/PPT/"/>
      <url>/2024/10/09/PPT/</url>
      
        <content type="html"><![CDATA[<p>学习地址：</p><p><a href="https://www.bilibili.com/video/BV1w54y1Q7cZ/?share_source=copy_web&vd_source=4e6e3d05c54fbafa49b2a00b5cc81815">PPT教程 | PPT高手之路，零基础做出高逼格PPT，免费PPT设计制作技巧教学！OFFICE&#x2F;WPS&#x2F;演示&#x2F;幻灯片&#x2F;PPT模板&#x2F;keynote&#x2F;汇报&#x2F;总结</a></p><p>第11集最后关于各种 PPT 板式和如何将 Word 一步步变为 PPT 的讲解，值得回味。</p><h3 id="PPT-中刚开始容易忽视的概念"><a href="#PPT-中刚开始容易忽视的概念" class="headerlink" title="PPT 中刚开始容易忽视的概念"></a>PPT 中刚开始容易忽视的概念</h3><ol><li>母版：母版是指PPT的基础模板，它包含了所有页面的基本设置，如背景、字体、颜色、布局、动画、透明度等。</li><li>模板：模板是指PPT的布局模板，它是指一套完整的PPT模板，包括了所有页面的基本设置，如背景、字体、颜色、布局、动画、透明度等。</li><li>布局：布局是指PPT页面的排版方式，它决定了PPT页面的版式、版心、版式。</li><li>占位符：占位符是指PPT页面上用来插入其他内容的空白区域，它可以用来插入图片、形状、表格、文本等。</li><li>wps 与 office 的关系和区别</li></ol><h3 id="PPT-默认设置"><a href="#PPT-默认设置" class="headerlink" title="PPT 默认设置"></a>PPT 默认设置</h3><ol><li>外观</li><li>150次撤回</li><li>自动保存</li><li>字体设置</li><li>标尺，参考线，网格线</li><li>插入形状为默认形状</li><li>图片压缩</li><li>导出</li></ol><h3 id="PPT-快捷键"><a href="#PPT-快捷键" class="headerlink" title="PPT 快捷键"></a>PPT 快捷键</h3><p>左手键盘，右手鼠标</p><ol><li><code>shift</code> 水平&#x2F;竖直移动，等比例放大缩小（点击生成），旋转 15 度</li><li><code>ctrl+D</code> 快速复制（复制空间和距离）</li><li><code>ctrl+鼠标拖拽</code> 复制</li><li><code>ctrl+m</code>&#x2F;<code>enter</code> 复制页面</li><li><code>ctrl+g</code> 组合</li><li><code>ctrl+shift+g</code> 取消组合</li><li><code>ctrl+y</code> 撤销</li><li><code>ctrl+shift+复制</code> 水平复制</li><li><code>ctrl+shift+alt+放大</code> 等比例中心放大</li><li><code>ctrl+shift+c``ctrl+shift+v</code> 格式刷</li><li><code>ctrl+[``ctrl+]``ctrl+shift+[</code> 向上&#x2F;向下移动一层&#x2F;向上移动一层</li><li><code>=lorem()</code> 自动生成文本</li></ol><h3 id="形状组合"><a href="#形状组合" class="headerlink" title="形状组合"></a>形状组合</h3><p>内置 200 多种</p><ol><li>合并形状</li></ol><ul><li>结合: 两个形状合并变成一个形状</li><li>组合: 删除重合部分，保留未重合部分</li><li>拆分: 重合部分和未重合部分拆分成三个部分</li><li>相交: 只保留重合区域</li><li>剪除: 保留先选择的图形，删除后选择的图形</li></ul><ol start="2"><li>绘制图标<br>图标下载:阿里巴巴矢量图标库</li></ol><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>底纹</p><p>框线</p><p>单元格</p><ol><li>主题色从 logo 中获取（取色器）</li><li>内容行双色交替（白色+白色与logo色间接中最接近白色的色）</li><li>内框线虚化（内框线：0.5磅 + 笔颜色 白色 背景1 深色25%），外框线加粗（2.25磅 + 深黑色）</li><li>字体：微软雅黑 + 标题行白色 + 内容行次一级黑色 + 标题行字大于内容行 + 居中</li></ol><h3 id="编辑顶点"><a href="#编辑顶点" class="headerlink" title="编辑顶点"></a>编辑顶点</h3><ul><li>顶点<ol><li>平滑顶点-两个空点在同一条直线上且长度一致</li><li>直线点-两个空点在同一条直线上且长度不一致</li><li>角部顶点-两个空点不在同一直线上且长度不一致</li></ol></li><li>线段<ol><li>抻直弓形</li><li>曲线段</li><li>开放路径</li></ol></li></ul><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><p>遮罩动画</p><p>3D 动画</p><h3 id="图片获取"><a href="#图片获取" class="headerlink" title="图片获取"></a>图片获取</h3><p>手机壁纸</p><p>摄影协会</p><p><a href="https://magdeleine.co/">Magdeleine</a><br><a href="https://www.pexels.com/fr-fr/">Pexels</a><br><a href="https://pixabay.com/">pixabay</a><br><a href="https://mani-unsplash-clone.netlify.app/">Unsplash</a></p><h3 id="icon"><a href="#icon" class="headerlink" title="icon"></a>icon</h3><p><a href="https://icons8.com/">icons8</a><br><a href="https://www.cleanpng.com/">cleanpng</a></p><h3 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h3><p>图片墙</p><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p>思源黑体</p><h3 id="相关软件"><a href="#相关软件" class="headerlink" title="相关软件"></a>相关软件</h3><p>画图3D 导出 .3mf 文件</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>地图素材注意合法</p><h3 id="第三方辅助软件"><a href="#第三方辅助软件" class="headerlink" title="第三方辅助软件"></a>第三方辅助软件</h3><p>Canva 可画</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim --&gt; nvim --&gt; lunarvim</title>
      <link href="/2024/09/21/vim/"/>
      <url>/2024/09/21/vim/</url>
      
        <content type="html"><![CDATA[<blockquote><p>作者正在从 vim 切换到 nvim ，之后的相关插件和配置也会跟进，不断更新，文章会偏向于供作者本人自己回顾，推荐学习路径（按顺序）：</p><ol><li><a href="https://vim-adventures.com/">Vim Adventures</a>有趣的 vim 冒险游戏，我的入门教学，尽管冒险因为后面的不是免费而戛然而止，但也让我熟悉了 vim 的基本操作。</li><li><code>vimtutor</code> 完成vim自带的教学</li><li><a href="https://www.bilibili.com/video/BV1s4421A7he?spm_id_from=333.788.videopod.episodes&vd_source=3d42bec98b97febcea06d86ccf19505f">视频</a> 这是一个比 missing-semester 更好的学习视频，全程无废话全干货，目前为止看到最好的 vim 教学视频</li><li><a href="https://learnku.com/docs/practical-vim-2nd-edition/notation-for-simulating-vim-on-the-page-playing-melodies/14252">Practical Vim</a> 已学完</li><li><a href="https://gitlab.com/wsdjeg/vim-galore-zh_cn">vim 从入门到精通</a> 正在学习中</li><li><a href="https://www.lunarvim.org/">LunarVim</a> 一个基于 neovim 的插件集合，功能丰富，配置简单</li><li><a href="http://michael.peopleofhonoronly.com/vim/">Vim Cheat Sheet</a> vim 速查表<br>提醒：尽量不要花大把时间在配置上，有时间不如多打打代码</li></ol></blockquote><h2 id="我的-Vim-学习"><a href="#我的-Vim-学习" class="headerlink" title="我的 Vim 学习"></a>我的 Vim 学习</h2><p><strong>第一批学习的命令</strong>：</p><p><code>w</code> <code>e</code> <code>b</code>(向后跳到前一个单词的开头) <code>a</code> <code>i</code> <code>y</code> <code>p</code> <code>o</code> <code>u</code> <code>r</code> <code>x</code> <code>ctrl+u/d/f/b</code> <code>v</code> <code>ctrl+v</code> <code>V</code> <code>gg</code> <code>G</code> <code>d</code> <code>.</code> <code>dd</code> <code>ctrl+r</code></p><p><strong>第二批学习的命令</strong>:</p><p><code>W</code> <code>E</code> <code>B</code> <code>A</code>(大写命名的魅力时刻) <code>I</code> <code>/</code> <code>?</code> <code>n</code> <code>$</code> <code>^</code> <code>%</code> <code>caw</code> <code>ci&#123;</code> <code>ci(</code> <code>zz</code> <code>-</code> <code>K</code> <code>~</code>(大小写转换) <code>H</code> <code>M</code> <code>L</code></p><p><strong>第三批学习的命令</strong>：</p><p><code>f</code>(在单行内移动的最快方式) <code>t</code> <code>,</code> <code>F</code> <code>;</code> <code>qaq</code> <code>@@</code> <code>ma</code> <code>ctrl+o</code>(相当有用) <code>ctrl+i</code> <code>s</code>(cl进阶) <code>R</code> <code>J</code> <code>ctrl+a</code>（很神奇的增加数字,需要2次）<code>ctrl+x</code> <code>nG</code> <code>J</code></p><p><code>*</code>(查找光标所在位置单词的下一个) <code>[[</code>(跳转到下一个段落的开头)</p><p><strong>第四批学习的命令</strong>：</p><p><code>S</code> <code>zz</code> <code>zt</code> <code>zb</code> <code>I</code> <code>A</code> <code>O</code> <code>cc</code>(进化为S) <code>yy</code> <code>:sp</code> <code>:vsp</code> <code>:!ls</code> <code>:e</code> <code>&gt;&gt;</code> <code>mm</code></p><p><strong>第五批学习的命令</strong>：</p><p><code>gv</code>(重新选取上一次可视模式下的内容) <code>ge</code> <code>C</code>(删除当前光标所在处到当前行最后一个字符并进入插入模式) <code>n@a</code> <code>:e %%</code>(重新编辑当前文件，%%意为当前文件名) <code>dap</code></p><p><code>dit</code>(删除一个HTML标签中的内容)  <code>&gt;G</code>(增加从当前行到文件最后一行的所有行的缩进，宽度由 shiftwidth 决定) <code>&amp;</code>(与上次相同的替换操作)</p><p><code>,</code>(反向重复上一次查找的命令) <code>gcc</code>(注释当前行) <code>gcap</code>(注释当前段落) <code>ctrl+r 0</code>(在插入模式下粘贴刚才复制的内容)<br><code>gUit</code>(将标签内的单词转换为大写) <code>gUw</code> <code>gx</code>(打开链接)</p><p><strong>可视模式</strong>：</p><p><code>u</code>(选中内容转小写) <code>U</code>(选中内容转大写) <code>&lt;C-v&gt; I</code>选中列快后在开头插入 <code>=</code>自动对齐<br><code>viw</code>(在可视模式下选中当前单词) <code>viWc</code><br><code>vit</code>(选中光标所在标签对内部的内容)</p><p><strong>键盘映射</strong>：</p><p>vscode 中使用 vim 插件键盘映射方式，在 settings.json 文件中添加以下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;keyboard.dispatch&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyCode&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="多文件管理"><a href="#多文件管理" class="headerlink" title="多文件管理"></a>多文件管理</h2><h3 id="使用标签页（Tab-Pages）"><a href="#使用标签页（Tab-Pages）" class="headerlink" title="使用标签页（Tab Pages）"></a><strong>使用标签页（Tab Pages）</strong></h3><p>标签页（tab pages）可以让你像浏览器标签一样在多个文件之间切换，每个标签页都可以包含多个窗口（window）。</p><ul><li><code>:tabnew [filename]</code>：打开一个新的标签页并加载指定的文件。如果不指定文件，会打开一个空的标签页。</li><li><code>:bn</code>：切换到下一个标签页。</li><li><code>:bp</code>：切换到上一个标签页。</li><li><code>:tabedit [filename]</code>：与 <code>:tabnew</code> 类似，打开指定文件到新标签页。</li><li><code>gt</code> 或 <code>gT</code>：分别跳转到下一个或上一个标签页。</li></ul><h3 id="使用窗口（Windows）"><a href="#使用窗口（Windows）" class="headerlink" title="使用窗口（Windows）"></a><strong>使用窗口（Windows）</strong></h3><p>窗口（windows）是将 <code>vim</code> 编辑器分成多个视图，每个视图可以显示不同的文件或同一文件的不同部分。</p><ul><li><code>:sp [filename]</code>：水平分割窗口并打开指定文件。</li><li><code>:vsp [filename]</code>：垂直分割窗口并打开指定文件。</li><li><code>Ctrl-w h/j/k/l</code>：在多个窗口之间切换，<code>h</code>、<code>j</code>、<code>k</code>、<code>l</code> 分别表示左、下、上、右。</li><li><code>:close</code>：关闭当前窗口。</li><li><code>:only</code>：关闭所有窗口，仅保留当前窗口。</li></ul><h3 id="使用缓冲区（Buffers）"><a href="#使用缓冲区（Buffers）" class="headerlink" title="使用缓冲区（Buffers）"></a><strong>使用缓冲区（Buffers）</strong></h3><p>缓冲区（buffers）是 <code>vim</code> 中用于处理打开文件的内部表示。每个文件都在内存中作为缓冲区进行处理。</p><ul><li><p><code>:e [filename]</code>：打开一个文件，创建新的缓冲区。</p></li><li><p><code>:ls</code> 或 <code>:buffers</code>：列出所有打开的缓冲区。</p></li><li><p><code>:bnext</code> 或 <code>:bn</code>：切换到下一个缓冲区。</p></li><li><p><code>:bprev</code> 或 <code>:bp</code>：切换到上一个缓冲区。</p></li><li><p><code>:b [buffer number or name]</code>：切换到指定的缓冲区。</p></li><li><p><code>:bd</code> 或 <code>:bdelete</code>：删除当前缓冲区。</p></li><li><p><code>:bw</code>：关闭当前窗口并删除缓冲区（但不退出 <code>vim</code>）。</p></li><li><p><strong>内置标记</strong>：</p><ul><li>&#96;&#96;：上次跳转前的位置。</li><li>&#96;.：上次修改的位置。</li><li>&#96;^：上次插入的位置。</li></ul></li><li><p><code>[%</code> 跳到当前配对符号的起始位置</p></li><li><p><code>(%</code> 限定在当前段落或块内，跳到段落或块的起始符号</p></li><li><p><code>&#123;%</code> 向后查找上一个包含{}的代码块的开头位置</p></li></ul><h2 id="寄存器与宏"><a href="#寄存器与宏" class="headerlink" title="寄存器与宏"></a>寄存器与宏</h2><p><strong>特别的寄存器</strong>：</p><ul><li>“：默认寄存器，平时复制、删除的内容都放在里面。</li><li>%：当前文件名。</li><li>.：上一次插入的内容。</li><li>:：上一次执行的命令。</li></ul><p><strong>常用命令</strong>：</p><ul><li><code>:reg &#123;register&#125;</code>查看对应寄存器中的内容。</li><li><code>&quot;ayy</code>：将这一行复制到a寄存器中。</li><li><code>&quot;bdiw</code>：将单词删除，保存到b寄存器中。</li><li><code>&quot;cp</code>：将c寄存器中的内容粘贴出来。</li></ul><p><strong>寄存器字符大写</strong>：添加（append）而非覆盖。</p><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><h3 id="Ex-命令格式"><a href="#Ex-命令格式" class="headerlink" title="Ex 命令格式"></a>Ex 命令格式</h3><p><code>:[range] &#123;excommand&#125; [args]</code></p><ul><li><code>range</code>：作用范围，不指定则默认是当前行。</li><li><code>excommand</code>：特殊命令，适用于 Command 模式。</li><li><code>args</code>：后续参数，视命令而定。</li><li><code>:[range] d &#123;register&#125;</code></li><li><code>:[range] y &#123;register&#125;</code></li><li><code>:[range] p &#123;register&#125;</code></li></ul><h3 id="Range-与-Address"><a href="#Range-与-Address" class="headerlink" title="Range 与 Address"></a>Range 与 Address</h3><ul><li><code>address</code> 可以是：<ul><li><code>&#123;lineno&#125;</code>：行号，如 <code>3</code> 代表第三行（<code>0</code> 代表第一行上面的虚拟行）。</li><li><code>$</code>：最后一行。</li><li><code>.</code>：光标所在行。</li><li><code>/&#123;pattern&#125;/</code>：下一个 <code>pattern</code> 所在的行。</li></ul></li><li><code>address</code> 可以做加减法，如 <code>.+3</code> 代表光标往下第三行，<code>$-3</code> 代表倒数第四行。</li><li><code>1,3</code>：文件的 1-3 行。</li><li><code>.,.+4</code>：当前行到当前往下 4 行（共 5 行）。</li><li><code>$-3,$</code>：文件的最后 4 行。</li><li><code>%</code>：特殊的 <code>range</code>，代表当前文件的所有内容。</li><li><code>&#39;&lt;&#39;&gt;</code>：可视模式中选中范围的开头和结尾（可视模式下直接按 <code>:</code> 可以直接设置）。</li></ul><h3 id="行的复制、移动、粘贴"><a href="#行的复制、移动、粘贴" class="headerlink" title="行的复制、移动、粘贴"></a>行的复制、移动、粘贴</h3><ul><li><code>:[range] copy &#123;address&#125;</code>：把 <code>range</code> 中的行复制到 <code>address</code> 后面。</li><li><code>:[range] move &#123;address&#125;</code>：把 <code>range</code> 中的行移动到 <code>address</code> 后面。</li><li><code>:[address] put [x]</code>：把寄存器 <code>x</code> 的内容粘贴到 <code>address</code> 后面。</li><li><code>0</code> 作为虚拟行的 <code>address</code>，可以用来将内容插入第一行。</li></ul><h3 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h3><h4 id="normal-命令"><a href="#normal-命令" class="headerlink" title="normal 命令"></a>normal 命令</h4><ul><li>格式：<code>:[range] normal &#123;commands&#125;</code></li><li>含义：对 <code>range</code> 中的所有行执行 Normal 模式下的命令 <code>commands</code>。</li><li>常用做法：先做一次修改操作，再用 <code>normal</code> 命令在指定的行上完成操作。</li><li><code>.</code> 命令只能记录一次修改，用宏可以实现记录多个操作。</li><li><code>:[range] normal @&#123;register&#125;</code>：先把想要的操作录制成宏，再用 <code>normal</code> 命令在指定的行上重放宏。</li><li><code>:1,4 normal I# </code></li></ul><h3 id="global-命令"><a href="#global-命令" class="headerlink" title="global 命令"></a>global 命令</h3><ul><li>格式：<code>:[range] global/&#123;pattern&#125;/[cmd]</code></li><li>含义：对 <code>range</code> 中包含 <code>pattern</code> 的所有行执行 Command 模式下的 E x 命令 <code>[cmd]</code>。</li><li><code>[cmd]</code>：E x 命令，不指定则默认是打印（<code>print</code>）。</li><li>例子：<code>:% global /TODO/delete</code>：删除所有带 <code>TODO</code> 的行。</li></ul><h3 id="替换命令"><a href="#替换命令" class="headerlink" title="替换命令"></a>替换命令</h3><p><code>:[range]s/&#123;pattern&#125;/&#123;string&#125;/[flags]</code></p><ul><li><code>flags</code>：<ul><li><code>g</code>：替换每一行的所有匹配。</li><li><code>i</code>：忽视大小写。</li><li><code>c</code>：替换前进行确认。</li><li><code>n</code>：计数而不是替换。</li></ul></li><li>例子：<code>:%s/Vim//gn</code>：统计文件中所有 <code>Vim</code> 出现的次数（此时替换为什么无所谓，加了 <code>n</code> 就不会执行替换操作）。</li><li><code>:%s/^#/##/g</code>：所有标题加一级。还可以用<code>&amp;</code>表示匹配的原始内容。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的私家花园🌷</title>
      <link href="/2024/09/20/garden/"/>
      <url>/2024/09/20/garden/</url>
      
        <content type="html"><![CDATA[<h2 id="9月20日"><a href="#9月20日" class="headerlink" title="9月20日"></a>9月20日</h2><p><img src="/images/garden/flower_1.png" alt="保温杯催芽风铃草"></p><p><img src="/images/garden/flower_2.png" alt="方便面桶催芽紫罗兰"></p><p><img src="/images/garden/flower_0.png" alt="我的私家花园"></p><h2 id="9月26日"><a href="#9月26日" class="headerlink" title="9月26日"></a>9月26日</h2><p>雨，没有早八，先去了学校的湖边看花观鸟。</p><p>惊喜有两盆蒜发芽了🌱🌱</p><p><img src="/images/garden/flower_3.png" alt="花盆1"></p><p><img src="/images/garden/flower_4.png" alt="花盆2"></p><p>更正上图，我应该养的是风铃花。</p><p>很担心紫罗兰和风铃花的养殖难度。</p><p>但，亲爱的，我相信你总能给我惊喜。</p><h2 id="10月3日"><a href="#10月3日" class="headerlink" title="10月3日"></a>10月3日</h2><p>连续几天上吐下泻，又有了感冒的前兆，真是不幸呢。</p><p>紫罗兰和风铃花迟迟不肯发芽，我怀疑他们已经没有可能了。但就在这绝望之际，亲爱的，你总是能给我惊喜。</p><p><img src="/images/garden/flower_5.png" alt="发芽"></p><h2 id="10月7日"><a href="#10月7日" class="headerlink" title="10月7日"></a>10月7日</h2><p>听雨，感冒但不严重。</p><p><img src="/images/garden/flower_6.png" alt="发芽"></p><h2 id="11月8日"><a href="#11月8日" class="headerlink" title="11月8日"></a>11月8日</h2><p>经过时间的洗礼，只有小多肉还活了下来。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>皈依arch神教</title>
      <link href="/2024/09/13/archlinux/"/>
      <url>/2024/09/13/archlinux/</url>
      
        <content type="html"><![CDATA[<h2 id="起因-————-wsl2-和虚拟机无法使用"><a href="#起因-————-wsl2-和虚拟机无法使用" class="headerlink" title="起因 ———— wsl2 和虚拟机无法使用"></a>起因 ———— wsl2 和虚拟机无法使用</h2><p>8月初，因为网络、操作系统和 gpu 的问题，我的计算机各方面的学习都举步维艰。<br>在 windows11 上，wsl2因为神秘原因，一直在报如下的错误，导致依赖于他的 docker 也无法正常运行。</p><p><img src="/images/archlinux/wsl2_bug.png" alt="wsl2_bug.png"></p><p>在安装成功 archlinux 之后，才找到解决方案：<br>在用户目录 %USERPROFILE% 下创建一个配置文件.wslconfig，写入内容：<code>[experimental] networkingMode=mirrored</code></p><h2 id="正式开始-————-安装-archlinux"><a href="#正式开始-————-安装-archlinux" class="headerlink" title="正式开始 ———— 安装 archlinux "></a>正式开始 ———— 安装 archlinux <i class="fa-brands fa-linux"></i></h2><p>我是参考这篇文章来安装 arch 的：<a href="https://arch.icekylin.online/guide/rookie/basic-install.html">arhclinux简明安装</a></p><p>补充：<a href="https://blog.linioi.com/posts/18/#%E5%AF%B9%E7%A1%AC%E7%9B%98%E8%BF%9B%E8%A1%8C%E5%88%86%E5%8C%BA">Arch Linux + Windows 双系统安装教程</a></p><h3 id="进入-bios-界面"><a href="#进入-bios-界面" class="headerlink" title="进入 bios 界面"></a>进入 bios 界面</h3><p>华为电脑进入 bios 界面的方法是：在电脑启动键盘高亮时，狂按 <code>f2</code> 键，进入 bios 界面。</p><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p>我在安装 debian12 和 arch 时，都是连的家庭网络，在无图形化界面连接网络时，除了家里网真的太差以外，没什么问题。而之后帮助朋友安装 arch 时，是在学校。连接校园网需要打开浏览器来进行认证，认证完毕后，才能连接到校园网。但是现在的 arch 还没有图形界面，所以是无法连接校园网的，还得是手机热点。不过还有网络名字中文的问题，arch 刚开始时还没有中文输入法，所以网络名字如果有中文还得先改成英文。</p><h3 id="分区，格式化与挂载"><a href="#分区，格式化与挂载" class="headerlink" title="分区，格式化与挂载"></a>分区，格式化与挂载</h3><p>按照简明安装教程安装 arch 的过程中，最容易出问题的就是这一部分。<br>由于教程并没有明确说明要挂载在哪一个分区，我和朋友在挂载时，都误将 &#x2F;boot 挂载到和 &#x2F; 与 &#x2F;home 同一个分区上，导致在输入<code>grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=Arch</code>命令时，提示 &#x2F;boot 目录不是 efi 分区。（此时 <code>exit</code> 退出环境重新分区）<br>由于我的华为电脑是单硬盘，装系统划分 efi 分区的话可以让两个系统共用一个 efi 分区（但千万不要格式化这一 efi 分区）。但是我的 windows11 使用的 efi 分区已经满了，所以只能再建一个 efi 分区。于是，正常来说，arch 应该分到一个 efi 分区，一个 swap 分区，还有一个根分区，其下应该挂载 &#x2F; 和 &#x2F;home 目录。</p><p><img src="/images/archlinux/lsblk_f.png" alt="lsblk_f.png"></p><h3 id="在-grub-界面加入-windows-启动项"><a href="#在-grub-界面加入-windows-启动项" class="headerlink" title="在 grub 界面加入 windows 启动项"></a>在 grub 界面加入 windows 启动项</h3><p><a href="https://wrye.dev/posts/repair-grub-windows-uefi-boot/">记修复 Arch Linux grub + Windows Boot Manager 双系统 UEFI 引导</a></p><p>1.进入 Linux 终端编辑 &#x2F;etc&#x2F;default&#x2F;grub，取消注释或新增 GRUB_DISABLE_OS_PROBER&#x3D;false 一行</p><p>2.生成 grub.cfg</p><p><code>sudo grub-mkconfig -o /boot/grub/grub.cfg</code></p><p>3.一般情况下，此时的 grub 会返回其已发现 Windows Boot Manager 的提示</p><p>4.重启进入 grub 引导，会发现 grub 新增了 Windows 之选项</p><h3 id="声音"><a href="#声音" class="headerlink" title="声音"></a>声音</h3><p>按照简明安装教程安装后，我的 arch 是发不出声音的，在该教程的常见问题排除与解决里有这一块说明。但按照教程操作之后还是发不出声音。经过排查，发现在 <code>alsamixer</code>中，我的<code>headphone</code>是静音状态，只要使用命令<code>alsamixer init</code>，就能正常发声。</p><p><img src="/images/archlinux/alsamixer.png" alt="alsamixer.png"></p><p>但是每次重启<code>headphone</code>项就会变成静音状态。最后只能加一个开机自动启动脚本来解决。</p><p><img src="/images/archlinux/alsa_init_sh.png" alt="alsamixer_init.sh.png"></p><p>虽然它显示执行失败，但实际上这个命令的确执行了，声音也能发出来。</p><p><img src="/images/archlinux/alsa_init.png" alt="alsa_init.png"></p><h3 id="蓝牙"><a href="#蓝牙" class="headerlink" title="蓝牙"></a>蓝牙</h3><p>华为蓝牙鼠标可以连接三个设备。</p><p><img src="/images/archlinux/mouse.png" alt="mouse.png"></p><p>第三个亮点已经配对了 win 的蓝牙，第二个亮点匹配了 arch 的蓝牙。</p><p>耳机因为在发声前配对了 arch 的蓝牙,在声音问题解决后，显示已配对但是连接不上 arch，解决方法是删除该配对再连接一次，</p><h3 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h3><p>我使用的是 timeshift 来进行快照。但是我在进行恢复快照操作重启后，发现系统无法启动，提示 &#x2F;home 目录无法正常挂载。</p><p><img src="/images/archlinux/home%E6%8C%82%E8%BD%BD.png" alt="home挂载.png"></p><p>在查看系统日志文件后得到解决方法：在 &#x2F;etc&#x2F;fstab 文件中，删去&#x2F;home 那行 <code>subvolid</code>项。</p><p><img src="/images/archlinux/fstab.png" alt="fstab.png"></p><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p>我选用的是 nekoray + mitce ，只开启 tun 模式。对于我来说，只开启系统代理或者系统代理+tun模式都不太行（有概率）。但目前的方案在晚上依然很卡。<br>之后登陆校园网时，无法打开浏览器还是得关掉代理。</p><p>9月15日，mitce寄了。</p><p>于是还是安装了魔法猫咪 clash verge。订阅机场：<a href="https://bajie.xyz/login">八戒机场</a><br>clash verge 可谓是我所有用过的代理中配置最简单的了。<br><a href="https://blog.linioi.com/posts/clash-on-arch/">Archlinux 中 clash 配置教程</a></p><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><p>在迁移博客时，首先是要安装 node ，然后安装 npm ，最后安装 hexo 。<br>但是因为 node 版本过高（22），hexo 使用时会报一个<code>punycode</code>废弃的错。查文档找到的解决方案都不管用，最后决定降低 node 版本到20。<br>但是<code>sudo pacman -S nodejs</code>命令下载的 node 版本无法通过 n 来降低版本。最终整个解决方案是这样的：<br><code>sudo pacman -S nodejs</code><br><code>sudo npm install -g n</code><br><code>n 20.12.2</code><br><code>sudo pacman -R npm</code><br>在删除由 pacman 安装的 npm 之后，n 所下载的 node 就可以发挥作用了。<br>之后<code>hexo clean</code>等一系列命令在 linux 下都要加个 npx 。于是我加了一系列别名来解决这个问题。</p><p><img src="/images/archlinux/alias.png" alt="alias.png"></p><p>由于各类插件体积实在太大，我的插件是从 package.json 文件中导出来，然后放在脚本文件里执行再安装的。</p><h3 id="github-登陆"><a href="#github-登陆" class="headerlink" title="github 登陆"></a>github 登陆</h3><p>因为 2fa 的存在，我的 github 登陆在linux下无法用指纹登陆。所以采用了浏览器的 2fa 插件。</p><p><img src="/images/archlinux/%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E5%99%A8.png" alt="身份验证器.png"></p><h3 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h3><p>从 windows 传文件到 linux 下，zip格式普通的解压缩会出现一堆乱码，需要使用<code>unzip -O GBK *.zip</code>或者<code>unzip -O CP936 *.zip</code>来指定编码格式。</p><ol><li><p>ZIP 压缩和解压：<br>压缩文件：zip compressed.zip file1.txt file2.txt folder&#x2F;<br>解压文件：unzip compressed.zip -d destination_folder&#x2F;</p></li><li><p><strong>7z 压缩和解压：</strong><br>压缩文件：7z a compressed.7z file1.txt file2.txt folder&#x2F;<br>解压文件：7z x compressed.7z -odestination_folder&#x2F;</p></li><li><p>GZIP<br>常用于对单个文件进行压缩，生成 .gz 后缀的压缩文件。</p></li></ol><p>压缩文件：gzip file.txt<br>解压文件：gzip -d file.txt.gz</p><ol start="4"><li>TAR<br>常用于将多个文件或目录打包成单个文件，生成 .tar 后缀的打包文件。通常结合其他压缩算法如 GZIP 或 BZIP2 来进行压缩，生成 .tar.gz 或 .tar.bz2 文件。</li></ol><p>压缩文件（使用 GZIP）：tar -cvzf archive.tar.gz file1.txt file2.txt folder&#x2F;<br>解压文件（使用 GZIP）：tar -xvzf archive.tar.gz -C destination_folder&#x2F;</p><ol start="5"><li>BZIP2<br>类似于 GZIP，但使用 BZIP2 压缩算法生成更高压缩比的压缩文件。生成 .bz2 后缀的压缩文件。</li></ol><p>压缩文件：bzip2 file.txt<br>解压文件：bzip2 -d file.txt.bz2</p><h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><p><img src="/./images/archlinux/code.png" alt="code"></p><p>从软件商店里下载的 code 有些插件并不提供，建议<code>yay -S visual-studio-code-bin</code>安装。</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="vimrc"><a href="#vimrc" class="headerlink" title="~&#x2F;.vimrc"></a>~&#x2F;.vimrc</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> nocompatible</span><br><span class="line"><span class="built_in">set</span> backspace=indent,eol,start</span><br><span class="line"><span class="built_in">set</span> autoindent</span><br><span class="line"><span class="built_in">set</span> cindent</span><br><span class="line"><span class="built_in">set</span> mouse=n <span class="string">&quot;可视模式下使用鼠标，set mouse=a这个命令导致在vim下复制粘贴不好用</span></span><br><span class="line"><span class="string">set cinoptions=g-1</span></span><br><span class="line"><span class="string">set nobackup</span></span><br><span class="line"><span class="string">set number</span></span><br><span class="line"><span class="string">set history=100 &quot;</span>默认为20</span><br><span class="line"><span class="built_in">set</span> ruler</span><br><span class="line"><span class="built_in">set</span> ignorecase <span class="string">&quot;设置默认大小写不敏感查找</span></span><br><span class="line"><span class="string">set showcmd &quot;</span>实时显示状态栏中命令</span><br><span class="line"><span class="built_in">set</span> ai <span class="string">&quot;vim中复制粘贴保存格式</span></span><br><span class="line"><span class="string">set incsearch &quot;</span>无需等按回车即可看到匹配结果</span><br><span class="line"><span class="built_in">set</span> cursorline</span><br><span class="line"><span class="built_in">set</span> encoding=utf-8</span><br><span class="line"><span class="built_in">set</span> langmenu=zh_CN.gb2312</span><br><span class="line"><span class="built_in">set</span> clipboard=unnamed</span><br><span class="line"><span class="built_in">set</span> fileencoding=gbk2312</span><br><span class="line"><span class="built_in">set</span> ts=4 <span class="string">&quot;设置Tab宽为4</span></span><br><span class="line"><span class="string">set sw=4</span></span><br><span class="line"><span class="string">set smartindent</span></span><br><span class="line"><span class="string">set showmatch &quot;</span>启用匹配括号高亮</span><br><span class="line"><span class="built_in">set</span> guioptions-=T <span class="string">&quot;GUI中移除工具条</span></span><br><span class="line"><span class="string">set expandtab &quot;</span>空格替代制表符</span><br><span class="line"><span class="built_in">set</span> noswapfile <span class="string">&quot; 不产生.swp文件</span></span><br><span class="line"><span class="string">set linebreak</span></span><br><span class="line"><span class="string">let g:ackhighlight = 1</span></span><br><span class="line"><span class="string">let g:ack_qhandler = &quot;</span>botright copen 15<span class="string">&quot;</span></span><br><span class="line"><span class="string">let curpwd = getcwd() &quot;</span>将当前工作目录存储在变量curpwd中</span><br><span class="line"><span class="built_in">let</span> mapleader = <span class="string">&quot;;&quot;</span></span><br><span class="line"></span><br><span class="line">nmap &lt;Leader&gt;gt g&lt;C-]&gt;</span><br><span class="line">nmap &lt;Leader&gt;gr &lt;C-T&gt;</span><br><span class="line">nmap &lt;Leader&gt;u &lt;C-U&gt;</span><br><span class="line">nmap &lt;Leader&gt;d &lt;C-D&gt;</span><br><span class="line">nmap &lt;Leader&gt;wq :wq&lt;CR&gt;</span><br><span class="line">nmap &lt;Leader&gt;1 ^</span><br><span class="line">nmap &lt;Leader&gt;2 $</span><br><span class="line"></span><br><span class="line">nmap &lt;Leader&gt;a :A&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">nmap &lt;Leader&gt;j :bn&lt;CR&gt;</span><br><span class="line">nmap &lt;Leader&gt;k :bp&lt;CR&gt;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; 设置快捷键gs遍历各分割窗口。快捷键速记法：goto the next spilt window</span></span><br><span class="line"><span class="string">nnoremap &lt;Leader&gt;gg &lt;C-W&gt;&lt;C-W&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> 向左</span><br><span class="line">nnoremap &lt;leader&gt;h &lt;C-W&gt;&lt;C-H&gt;</span><br><span class="line"><span class="string">&quot; 向右</span></span><br><span class="line"><span class="string">nnoremap &lt;leader&gt;l &lt;C-W&gt;&lt;C-L&gt;</span></span><br><span class="line"><span class="string">&quot;</span> 向上</span><br><span class="line">nnoremap &lt;Leader&gt;k &lt;C-W&gt;&lt;C-K&gt;</span><br><span class="line"><span class="string">&quot; 向下</span></span><br><span class="line"><span class="string">nnoremap &lt;Leader&gt;j &lt;C-W&gt;&lt;C-J&gt;</span></span><br><span class="line"><span class="string">&quot;</span> 去除高亮</span><br><span class="line"><span class="string">&quot;nmap &lt;Leader&gt;h :noh&lt;CR&gt;</span></span><br><span class="line"><span class="string">&quot;</span> 打开文件</span><br><span class="line">nmap &lt;Leader&gt;e :e&lt;Space&gt;</span><br><span class="line"><span class="string">&quot; 不关闭文件推出</span></span><br><span class="line"><span class="string">nmap &lt;Leader&gt;z &lt;C-Z&gt;</span></span><br><span class="line"><span class="string">&quot;</span> 水平分隔</span><br><span class="line">nmap &lt;Leader&gt;s :Sex&lt;CR&gt;</span><br><span class="line"><span class="string">&quot; 竖直分隔</span></span><br><span class="line"><span class="string">nmap &lt;Leader&gt;v :Vex&lt;CR&gt;</span></span><br><span class="line"><span class="string">&quot;</span> 全局替换</span><br><span class="line">nmap &lt;Leader&gt;r :%s/fileName-/fileName+/g</span><br><span class="line"><span class="string">&quot; align 表格对齐</span></span><br><span class="line"><span class="string">nmap &lt;Leader&gt;t :Tab /</span></span><br><span class="line"><span class="string">nmap&lt;leader&gt;tg :!ctags -R --fields=+aS --extra=+q&lt;CR&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">map &lt;Leader&gt;y &quot;</span>*y</span><br><span class="line"><span class="string">&quot;禁止自动改变当前Vim窗口的大小</span></span><br><span class="line"><span class="string">let Tlist_Inc_Winwidth=0</span></span><br><span class="line"><span class="string">&quot;</span>把方法列表放在屏幕的右侧</span><br><span class="line"><span class="built_in">let</span> Tlist_Use_Right_Window=1</span><br><span class="line"><span class="string">&quot;让当前不被编辑的文件的方法列表自动折叠起来</span></span><br><span class="line"><span class="string">let Tlist_File_Fold_Auto_Close=1 </span></span><br><span class="line"><span class="string">filetype on</span></span><br><span class="line"><span class="string">filetype plugin on</span></span><br><span class="line"><span class="string">filetype indent on</span></span><br><span class="line"><span class="string">let g:SuperTabRetainCompletionType=2</span></span><br><span class="line"><span class="string">let g:SuperTabDefaultCompletionType=&quot;</span>&lt;C-X&gt;&lt;C-O&gt;<span class="string">&quot;</span></span><br><span class="line"><span class="string">set cscopequickfix=s-,c-,d-,i-,t-,e-</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">set nofen</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">let cwd=&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">set tags=tags</span></span><br><span class="line"><span class="string">let g:miniBufExplMapWindowNavArrows = 1</span></span><br><span class="line"><span class="string">&quot;</span>允许光标在任何位置时用CTRL-TAB遍历buffer</span><br><span class="line"><span class="built_in">let</span> g:miniBufExplMapCTabSwitchBufs = 1</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;设置winmanager窗口宽度</span></span><br><span class="line"><span class="string">&quot;</span><span class="built_in">let</span> g:winManagerWidth = 30 </span><br><span class="line"></span><br><span class="line"><span class="string">&quot; 重新打开文档时光标回到文档关闭前的位置</span></span><br><span class="line"><span class="string">if has(&quot;</span>autocmd<span class="string">&quot;)</span></span><br><span class="line"><span class="string"> autocmd BufReadPost *</span></span><br><span class="line"><span class="string"> \ if line(&quot;</span><span class="string">&#x27;\&quot;&quot;) &gt; 0 &amp;&amp; line (&quot;&#x27;</span>\&quot;<span class="string">&quot;) &lt;= line(&quot;</span>$<span class="string">&quot;) |</span></span><br><span class="line"><span class="string"> \ exe &quot;</span>normal g<span class="string">&#x27;\&quot;&quot; |</span></span><br><span class="line"><span class="string">\ endif</span></span><br><span class="line"><span class="string">endif</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;花括号自动格式化，首行一个tab</span></span><br><span class="line"><span class="string">autocmd FileType cpp,java inoremap &#123; &#123;&lt;CR&gt;&#125;&lt;ESC&gt;kA&lt;CR&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">set fenc=&quot; &quot;</span></span><br><span class="line"><span class="string">&quot;显示匹配</span></span><br><span class="line"><span class="string">set showmatch</span></span><br><span class="line"><span class="string">&quot;括号匹配</span></span><br><span class="line"><span class="string">inoremap ( ()&lt;ESC&gt;i</span></span><br><span class="line"><span class="string">inoremap [ []&lt;ESC&gt;i</span></span><br><span class="line"><span class="string">inoremap &#x27;</span> <span class="string">&#x27;&#x27;</span>&lt;ESC&gt;i</span><br><span class="line">inoremap <span class="string">&quot; &quot;</span><span class="string">&quot;&lt;ESC&gt;i</span></span><br><span class="line"><span class="string">set selectmode=mouse,key</span></span><br><span class="line"><span class="string">set selection=exclusive</span></span><br><span class="line"><span class="string">set tags=tags;/ &quot;</span>告诉在每个目录下如果找不到tags就到上一层目录去找</span><br><span class="line"><span class="built_in">set</span> fileencoding=utf-8</span><br><span class="line"><span class="built_in">set</span> fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1</span><br><span class="line"></span><br><span class="line">autocmd InsertEnter * se cul    <span class="string">&quot; 用浅色高亮当前行&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot; vim-commentary style set 注释针对不同语言的注释方法</span></span><br><span class="line"><span class="string">autocmd FileType cpp set commentstring=//\ %s</span></span><br><span class="line"><span class="string">autocmd FileType php set commentstring=//\ %s</span></span><br><span class="line"><span class="string">&quot;</span> <span class="built_in">set</span> modeline</span><br><span class="line"><span class="built_in">set</span> modeline</span><br><span class="line"><span class="string">&quot; 搜索关键词高亮</span></span><br><span class="line"><span class="string">set hlsearch</span></span><br><span class="line"><span class="string">&quot;</span> 开启语义分析</span><br><span class="line">syntax <span class="built_in">enable</span></span><br><span class="line">syntax on</span><br><span class="line"><span class="string">&quot; 使用ctrlc, v就可以实现vim之间的复制粘贴</span></span><br><span class="line"><span class="string">vnoremap &lt;C-c&gt; :w! ~/tmp/clipboard.txt &lt;CR&gt;</span></span><br><span class="line"><span class="string">inoremap &lt;C-v&gt; &lt;Esc&gt;:r ~/tmp/clipboard.txt &lt;CR&gt;</span></span><br><span class="line"><span class="string">&quot;</span> 编译快捷键</span><br><span class="line">autocmd filetype python nnoremap &lt;F1&gt; :w &lt;bar&gt; <span class="built_in">exec</span> <span class="string">&#x27;!python &#x27;</span>.shellescape(<span class="string">&#x27;%&#x27;</span>)&lt;CR&gt; autocmd filetype c nnoremap &lt;F1&gt; :w &lt;bar&gt; <span class="built_in">exec</span> <span class="string">&#x27;!gcc &#x27;</span>.shellescape(<span class="string">&#x27;%&#x27;</span>).<span class="string">&#x27; -o &#x27;</span>.shellescape(<span class="string">&#x27;%:r&#x27;</span>).<span class="string">&#x27; &amp;&amp; ./&#x27;</span>.shellescape(<span class="string">&#x27;%:r&#x27;</span>)&lt;CR&gt;</span><br><span class="line">autocmd filetype cpp nnoremap &lt;F1&gt; :w &lt;bar&gt; <span class="built_in">exec</span> <span class="string">&#x27;!g++ --std=c++11 -pthread &#x27;</span>.shellescape(<span class="string">&#x27;%&#x27;</span>).<span class="string">&#x27; -o ./bin/&#x27;</span>.shellescape(<span class="string">&#x27;%:r&#x27;</span>).<span class="string">&#x27; &amp;&amp; ./bin/&#x27;</span>.shellescape(<span class="string">&#x27;%:r&#x27;</span>)&lt;CR&gt;</span><br><span class="line"><span class="string">&quot; autocmd filetype dot nnoremap &lt;F1&gt; :w &lt;bar&gt; exec &#x27;!dot -Tsvg &#x27;.shellescape(&#x27;%&#x27;).&#x27; &gt; ./svg/&#x27;.shellescape(&#x27;%:r&#x27;).&#x27; &amp;&amp; open ./bin/&#x27;.shellescape(&#x27;%:r&#x27;)&lt;CR&gt;</span></span><br><span class="line"><span class="string">autocmd filetype dot nnoremap &lt;F1&gt; :w &lt;bar&gt; exec &#x27;!dot -Tsvg sqlparse.dot &gt; sqlparse.svg&#x27;&lt;CR&gt;</span></span><br><span class="line"><span class="string">autocmd Filetype java nnoremap &lt;F1&gt; :w &lt;bar&gt; exec &#x27;!javac &#x27;.shellescape(&#x27;%&#x27;). &#x27; -d ./bin&#x27;&lt;CR&gt;</span></span><br><span class="line"><span class="string">autocmd filetype java nnoremap &lt;F2&gt; :w &lt;bar&gt; exec &#x27;!java -cp ./bin &#x27;.shellescape(&#x27;%:r&#x27;)&lt;CR&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">let g:tlist_markdown_settings = &#x27;markdown;h:Headlins&#x27;</span></span><br><span class="line"><span class="string">&quot;</span>新建.c,.h,.sh,.Java文件，自动插入文件头</span><br><span class="line">autocmd BufNewFile *.cpp,*.[ch],*.sh,*.Java,*.go <span class="built_in">exec</span> <span class="string">&quot;:call SetTitle()&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot; shortcut for markdown</span></span><br><span class="line"><span class="string">&quot;</span> 创建时间快捷键<span class="keyword">for</span> markdown</span><br><span class="line">nmap tm :call SetTime() &lt;CR&gt;</span><br><span class="line">func SetTime()</span><br><span class="line">        call append(line(<span class="string">&quot;.&quot;</span>), <span class="string">&quot;\# &quot;</span>.strftime(<span class="string">&#x27;%a %d %b %Y&#x27;</span>))</span><br><span class="line">endfunc</span><br><span class="line"></span><br><span class="line">nmap tb :call SetTable() &lt;CR&gt;</span><br><span class="line">func SetTable()</span><br><span class="line">        call append(line(<span class="string">&quot;.&quot;</span>), <span class="string">&quot;\| | | &quot;</span>)</span><br><span class="line">        call append(line(<span class="string">&quot;.&quot;</span>)+1, <span class="string">&quot;\|---|---|&quot;</span>)</span><br><span class="line">        call append(line(<span class="string">&quot;.&quot;</span>)+2, <span class="string">&quot;\| | |&quot;</span>)</span><br><span class="line">endfunc</span><br><span class="line"></span><br><span class="line">nmap pc :call SetPic() &lt;CR&gt;</span><br><span class="line">func SetPic()</span><br><span class="line">        call append(line(<span class="string">&quot;.&quot;</span>), <span class="string">&quot;\&lt;img src=&#x27;&#x27; width=600 alt=&#x27;&#x27;&gt; &lt;/img&gt;&lt;/div&gt;&quot;</span>)</span><br><span class="line">endfunc</span><br><span class="line"></span><br><span class="line">nmap pi :call SetPic1() &lt;CR&gt;</span><br><span class="line">func SetPic1()</span><br><span class="line">        call append(line(<span class="string">&quot;.&quot;</span>), <span class="string">&quot;\![]()&quot;</span>)</span><br><span class="line">endfunc</span><br><span class="line"></span><br><span class="line">nmap vi :call SetVideo() &lt;CR&gt;</span><br><span class="line">func SetVideo()</span><br><span class="line">        call append(line(<span class="string">&quot;.&quot;</span>), <span class="string">&quot;\&lt;video src=&#x27;1.mp4&#x27; controls=&#x27;controls&#x27; width=&#x27;640&#x27; height=&#x27;320&#x27; autoplay=&#x27;autoplay&#x27;&gt; Your browser does not support the video tag.&lt;/video&gt;&lt;/div&gt;&quot;</span>)</span><br><span class="line">endfunc</span><br><span class="line"></span><br><span class="line">nmap cl :call SetCollor() &lt;CR&gt;</span><br><span class="line">func SetCollor()</span><br><span class="line">        call append(line(<span class="string">&quot;.&quot;</span>), <span class="string">&quot;&lt;span  style=&#x27;color: #f16707;&#x27;&gt; &lt;/span&gt;&quot;</span>)</span><br><span class="line">endfunc</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; vim cc</span></span><br><span class="line"><span class="string">nmap cc :call SetCC() &lt;CR&gt;</span></span><br><span class="line"><span class="string">func SetCC() </span></span><br><span class="line"><span class="string">    call append(line(&quot;</span>.<span class="string">&quot;), &quot;</span>// vim: et tw=100 ts=4 sw=4 cc=120<span class="string">&quot;)  </span></span><br><span class="line"><span class="string">endfunc</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> 使用的背景主题</span><br><span class="line"><span class="string">&quot; colorscheme Monokai_Gavin</span></span><br><span class="line"><span class="string">colorscheme molokai</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> <span class="keyword">for</span> vim-syntastic </span><br><span class="line"><span class="string">&quot; disabled Syntastic by default </span></span><br><span class="line"><span class="string">let g:syntastic_mode_map = &#123; &#x27;mode&#x27;: &#x27;passive&#x27;, &#x27;active_filetypes&#x27;: [],&#x27;passive_filetypes&#x27;: [] &#125;</span></span><br><span class="line"><span class="string">&quot;</span> open/close Syntastic checker</span><br><span class="line">nnoremap &lt;Leader&gt;p :SyntasticToggleMode&lt;CR&gt; :w&lt;CR&gt;</span><br><span class="line"><span class="string">&quot; set vim-syntastic compiler </span></span><br><span class="line"><span class="string">let g:syntastic_cpp_compiler = &#x27;g++&#x27;</span></span><br><span class="line"><span class="string">let g:syntastic_cpp_compiler_options = &#x27; -std=c++11 -stdlib=libc++&#x27;</span></span><br><span class="line"><span class="string">set statusline+=%#warningmsg#</span></span><br><span class="line"><span class="string">set statusline+=%&#123;SyntasticStatuslineFlag()&#125;</span></span><br><span class="line"><span class="string">set statusline+=%*</span></span><br><span class="line"><span class="string">let g:syntastic_always_populate_loc_list = 1</span></span><br><span class="line"><span class="string">let g:syntastic_auto_loc_list = 1</span></span><br><span class="line"><span class="string">let g:syntastic_check_on_open = 1</span></span><br><span class="line"><span class="string">let g:syntastic_check_on_wq = 0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> <span class="built_in">test</span></span><br><span class="line"><span class="string">&quot; set autochdir</span></span><br><span class="line"><span class="string">autocmd BufEnter * silent! lcd %:p:h</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> complete with no first suggestion </span><br><span class="line"><span class="string">&quot; :set completeopt+=noinsert</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">set completeopt=menu,menuone  </span></span><br><span class="line"><span class="string">let OmniCpp_MayCompleteDot=1    &quot;</span>  打开  . 操作符</span><br><span class="line"><span class="built_in">let</span> OmniCpp_MayCompleteArrow=1  <span class="string">&quot; 打开 -&gt; 操作符</span></span><br><span class="line"><span class="string">let OmniCpp_MayCompleteScope=1  &quot;</span> 打开 :: 操作符</span><br><span class="line"><span class="built_in">let</span> OmniCpp_NamespaceSearch=1   <span class="string">&quot; 打开命名空间</span></span><br><span class="line"><span class="string">let OmniCpp_GlobalScopeSearch=1  </span></span><br><span class="line"><span class="string">let OmniCpp_DefaultNamespace=[&quot;</span>std<span class="string">&quot;]  </span></span><br><span class="line"><span class="string">let OmniCpp_ShowPrototypeInAbbr=1  &quot;</span> 打开显示函数原型</span><br><span class="line"><span class="built_in">let</span> OmniCpp_SelectFirstItem = 2 <span class="string">&quot; 自动弹出时自动跳至第一个</span></span><br><span class="line"><span class="string">autocmd BufRead scp://* :set bt=acwrite</span></span><br><span class="line"><span class="string">&quot;</span> au FileType * setlocal dict+=~/.vim/dictionary/words.txt</span><br><span class="line">autocmd FileType java setlocal omnifunc=javacomplete#Complete</span><br><span class="line"><span class="built_in">let</span> g:JavaComplete_JavaCompiler=<span class="string">&quot;/Library/Java/JavaVirtualMachines/jdk-10.0.2.jdk/Contents/Home/bin/javac&quot;</span></span><br><span class="line"><span class="string">&quot; for JavaComplete</span></span><br><span class="line"><span class="string">nmap &lt;F4&gt; &lt;Plug&gt;(JavaComplete-Imports-AddSmart)</span></span><br><span class="line"><span class="string">nmap &lt;leader&gt;js &lt;Plug&gt;(JavaComplete-Generate-AccessorSetter)</span></span><br><span class="line"><span class="string">nmap &lt;leader&gt;jg &lt;Plug&gt;(JavaComplete-Generate-AccessorGetter)</span></span><br><span class="line"><span class="string">nmap &lt;leader&gt;ja &lt;Plug&gt;(JavaComplete-Generate-AccessorSetterGetter)</span></span><br><span class="line"><span class="string">nmap &lt;Leader&gt;o o&lt;Esc&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">:set syntax=markdown</span></span><br><span class="line"><span class="string">au BufNewFile,BufFilePre,BufRead *.md set filetype=markdown</span></span><br><span class="line"><span class="string">&quot;</span> au BufNewFile,BufFilePre,BufRead *.md <span class="built_in">set</span> filetype=markdown </span><br><span class="line"><span class="string">&quot; for me</span></span><br><span class="line"><span class="string">func MarkdownSet() </span></span><br><span class="line"><span class="string">    let filePath=expand(&#x27;%:p&#x27;)</span></span><br><span class="line"><span class="string">    exe &#x27;:!open &#x27; . filePath &#x27;-a &quot;</span>MacDown<span class="string">&quot;&#x27;</span></span><br><span class="line"><span class="string">endfunc</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> usage :call GenMarkdownSectionNum    给markdown 文件生成目录编号</span><br><span class="line"><span class="keyword">function</span>! GenMarkdownSectionNum()</span><br><span class="line">  <span class="keyword">if</span> &amp;ft != <span class="string">&quot;markdown&quot;</span></span><br><span class="line">    echohl Error</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;filetype is not markdown&quot;</span></span><br><span class="line">    echohl None</span><br><span class="line">    <span class="built_in">return</span></span><br><span class="line">  endif</span><br><span class="line"></span><br><span class="line">  <span class="built_in">let</span> lvl = []</span><br><span class="line">  <span class="built_in">let</span> sect = []</span><br><span class="line">  <span class="built_in">let</span> out = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(1, line(<span class="string">&#x27;$&#x27;</span>), 1)</span><br><span class="line">    <span class="built_in">let</span> line = getline(i)</span><br><span class="line">    <span class="built_in">let</span> heading_lvl = strlen(substitute(line, <span class="string">&#x27;^\(#*\).*&#x27;</span>, <span class="string">&#x27;\1&#x27;</span>, <span class="string">&#x27;&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> heading_lvl &lt; 2</span><br><span class="line">      <span class="built_in">continue</span></span><br><span class="line">    endif</span><br><span class="line">    <span class="string">&quot; there should be only 1 H1, topmost, on a conventional web page</span></span><br><span class="line"><span class="string">    &quot;</span> we should generate section numbers begin with the first heading level 2</span><br><span class="line">    <span class="keyword">if</span> len(lvl) == 0</span><br><span class="line">      <span class="keyword">if</span> heading_lvl != 2 <span class="string">&quot; count from level 2</span></span><br><span class="line"><span class="string">        echohl Error</span></span><br><span class="line"><span class="string">        echo &quot;</span>subsection must have parent section, ignore illegal heading line at line <span class="string">&quot; . i</span></span><br><span class="line"><span class="string">        echohl None</span></span><br><span class="line"><span class="string">        continue</span></span><br><span class="line"><span class="string">      endif</span></span><br><span class="line"><span class="string">      call add(sect, 1)</span></span><br><span class="line"><span class="string">      call add(lvl, heading_lvl)</span></span><br><span class="line"><span class="string">    else</span></span><br><span class="line"><span class="string">      if lvl[-1] == heading_lvl</span></span><br><span class="line"><span class="string">        let sect[-1] = sect[-1] + 1</span></span><br><span class="line"><span class="string">      elseif lvl[-1] &gt; heading_lvl &quot;</span> pop all lvl less than heading_lvl from <span class="built_in">tail</span></span><br><span class="line">        <span class="keyword">while</span> len(lvl) != 0 &amp;&amp; lvl[-1] &gt; heading_lvl</span><br><span class="line">          call remove(lvl, -1)</span><br><span class="line">          call remove(sect, -1)</span><br><span class="line">        endwhile</span><br><span class="line">        <span class="built_in">let</span> sect[-1] = sect[-1] + 1</span><br><span class="line">      elseif lvl[-1] &lt; heading_lvl</span><br><span class="line">        <span class="keyword">if</span> heading_lvl - lvl[-1] != 1</span><br><span class="line">          echohl Error</span><br><span class="line">          <span class="built_in">echo</span> <span class="string">&quot;subsection must have parent section, ignore illegal heading line at line &quot;</span> . i</span><br><span class="line">          echohl None</span><br><span class="line">          <span class="built_in">continue</span></span><br><span class="line">        endif</span><br><span class="line">        call add(sect, 1)</span><br><span class="line">        call add(lvl, heading_lvl)</span><br><span class="line">      endif</span><br><span class="line">    endif</span><br><span class="line"></span><br><span class="line">    <span class="built_in">let</span> cur_sect = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> sect</span><br><span class="line">      <span class="built_in">let</span> cur_sect = cur_sect . <span class="string">&quot;.&quot;</span> . j</span><br><span class="line">    endfor</span><br><span class="line">    <span class="built_in">let</span> cur_sect = cur_sect[1:]</span><br><span class="line">    <span class="built_in">let</span> out = out . <span class="string">&quot; &quot;</span> . cur_sect</span><br><span class="line">    call setline(i, substitute(line, <span class="string">&#x27;^\(#\+\) \?\([0-9.]\+ \)\? *\(.*\)&#x27;</span>, <span class="string">&#x27;\1 &#x27;</span> . cur_sect . <span class="string">&#x27; \3&#x27;</span>, line))</span><br><span class="line">  endfor</span><br><span class="line">  <span class="string">&quot; echo lvl sect out</span></span><br><span class="line"><span class="string">  echo out</span></span><br><span class="line"><span class="string">endfunc</span></span><br></pre></td></tr></table></figure><h3 id="zshrc"><a href="#zshrc" class="headerlink" title="~&#x2F;.zshrc"></a>~&#x2F;.zshrc</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ZSH_WAKATIME_PROJECT_DETECTION=<span class="literal">true</span></span><br><span class="line"><span class="built_in">export</span> VCPKG_ROOT=~/Applications/vcpkg</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$VCPKG_ROOT</span>:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> PATH=/home/poem/.local/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ -r <span class="string">&quot;<span class="variable">$&#123;XDG_CACHE_HOME:-<span class="variable">$HOME</span>/.cache&#125;</span>/p10k-instant-prompt-<span class="variable">$&#123;(%):-%n&#125;</span>.zsh&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">source</span> <span class="string">&quot;<span class="variable">$&#123;XDG_CACHE_HOME:-<span class="variable">$HOME</span>/.cache&#125;</span>/p10k-instant-prompt-<span class="variable">$&#123;(%):-%n&#125;</span>.zsh&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># auto start tmux</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$TMUX</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    tmux attach -t master || tmux new -s master</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># If you come from bash you might have to change your $PATH.</span></span><br><span class="line"><span class="comment"># export PATH=$HOME/bin:/usr/local/bin:$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Path to your oh-my-zsh installation.</span></span><br><span class="line">ZSH=/usr/share/oh-my-zsh/</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set name of the theme to load --- if set to &quot;random&quot;, it will</span></span><br><span class="line"><span class="comment"># load a random theme each time oh-my-zsh is loaded, in which case,</span></span><br><span class="line"><span class="comment"># to know which specific one was loaded, run: echo $RANDOM_THEME</span></span><br><span class="line"><span class="comment"># See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes</span></span><br><span class="line"><span class="comment"># ZSH_THEME=&quot;intheloop&quot;</span></span><br><span class="line"><span class="comment"># ZSH_THEME=&quot;refined&quot;</span></span><br><span class="line">ZSH_THEME=<span class="string">&quot;fox&quot;</span></span><br><span class="line"><span class="comment"># ZSH_THEME=&quot;rkj-repos&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> zshc=<span class="string">&quot;vim ~/.zshrc &amp;&amp; source ~/.zshrc&quot;</span></span><br><span class="line"><span class="built_in">alias</span> omzc=<span class="string">&quot;vim ~/.oh-my-zsh &amp;&amp; source ~/.zshrc&quot;</span></span><br><span class="line"><span class="built_in">alias</span> vimc=<span class="string">&quot;vim ~/.vimrc &amp;&amp; source ~/.vimrc&quot;</span></span><br><span class="line"><span class="built_in">alias</span> tmuxc=<span class="string">&quot;vim ~/.tmux.conf &amp;&amp; source ~/.tmux.conf&quot;</span></span><br><span class="line"><span class="built_in">alias</span> vic=<span class="string">&quot;vi ~/.config/nvim/init.lua&quot;</span></span><br><span class="line"><span class="built_in">alias</span> conda_env=<span class="string">&quot;source /opt/anaconda/bin/activate&quot;</span></span><br><span class="line"><span class="built_in">alias</span> vi=<span class="string">&quot;/usr/bin/nvim&quot;</span></span><br><span class="line"><span class="built_in">alias</span> lv=<span class="string">&quot;/home/poem/.local/bin/lvim&quot;</span></span><br><span class="line"><span class="built_in">alias</span> vl=<span class="string">&quot;/home/poem/.local/bin/lvim&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> zat=<span class="string">&quot;zathura&quot;</span></span><br><span class="line"><span class="built_in">alias</span> ffp=<span class="string">&quot;ffplay&quot;</span></span><br><span class="line"><span class="built_in">alias</span> ffetch=<span class="string">&quot;fastfetch&quot;</span></span><br><span class="line"><span class="built_in">alias</span> remake=<span class="string">&quot;rm -rf build &amp;&amp; cmake -B build &amp;&amp; cmake --build build&quot;</span></span><br><span class="line"><span class="built_in">alias</span> rebuild=<span class="string">&quot;cmake --build build&quot;</span></span><br><span class="line"><span class="built_in">alias</span> yz=<span class="string">&quot;yazi&quot;</span></span><br><span class="line"><span class="built_in">alias</span> vd=<span class="string">&quot;(neovide&amp;)&amp;&quot;</span></span><br><span class="line"><span class="built_in">alias</span> lg=<span class="string">&quot;lazygit&quot;</span></span><br><span class="line"><span class="built_in">alias</span> cls=<span class="string">&quot;clear&quot;</span></span><br><span class="line"><span class="built_in">alias</span> cl=<span class="string">&quot;clear&quot;</span></span><br><span class="line"><span class="built_in">alias</span> sl=<span class="string">&quot;ls&quot;</span></span><br><span class="line"><span class="built_in">alias</span> lls=<span class="string">&quot;ls&quot;</span></span><br><span class="line"><span class="built_in">alias</span> tmxu=<span class="string">&quot;tmux&quot;</span></span><br><span class="line"><span class="built_in">alias</span> docker-start=<span class="string">&quot;sudo systemctl start docker.socket&quot;</span></span><br><span class="line"><span class="built_in">alias</span> docker-stop=<span class="string">&quot;sudo systemctl stop docker.socket&quot;</span></span><br><span class="line"><span class="built_in">alias</span> qs=<span class="string">&quot;pacman -Qs&quot;</span></span><br><span class="line"><span class="built_in">alias</span> get=<span class="string">&quot;sudo pacman -S&quot;</span></span><br><span class="line"><span class="built_in">alias</span> un=<span class="string">&quot;sudo pacman -R&quot;</span></span><br><span class="line"><span class="built_in">alias</span> syu=<span class="string">&quot;sudo pacman -Syu&quot;</span></span><br><span class="line"><span class="built_in">alias</span> ss=<span class="string">&quot;pacman -Ss&quot;</span></span><br><span class="line"><span class="built_in">alias</span> pacmanc=<span class="string">&quot;sudo /home/poem/.local/bin/lvim /etc/pacman.conf&quot;</span></span><br><span class="line"><span class="built_in">alias</span> docker=<span class="string">&quot;sudo docker&quot;</span></span><br><span class="line"><span class="built_in">alias</span> hexo_=<span class="string">&quot;npx hexo clean &amp;&amp; npx hexo generate &amp;&amp; npx hexo server&quot;</span></span><br><span class="line"><span class="built_in">alias</span> hexo_d=<span class="string">&quot;npx hexo deploy&quot;</span></span><br><span class="line"><span class="built_in">alias</span> blog=<span class="string">&quot;cd ~/Applications/blog&quot;</span></span><br><span class="line"><span class="built_in">alias</span> vsc=<span class="string">&quot;cd ~/Applications/vscode/ &amp;&amp; ls&quot;</span></span><br><span class="line"><span class="built_in">alias</span> dmesg=<span class="string">&quot;sudo dmesg&quot;</span></span><br><span class="line"><span class="built_in">alias</span> q=<span class="string">&quot;exit&quot;</span></span><br><span class="line"><span class="built_in">alias</span> kills=<span class="string">&quot;tmux kill-session -t&quot;</span></span><br><span class="line"><span class="built_in">alias</span> ql=<span class="string">&quot;pacman -Ql&quot;</span></span><br><span class="line"><span class="built_in">alias</span> del=<span class="string">&quot;rm -rf&quot;</span></span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">mv</span>=<span class="string">&quot;mv -i&quot;</span></span><br><span class="line"><span class="function"><span class="title">c</span></span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> [ -d <span class="string">&quot;<span class="variable">$1</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">cd</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> &amp;&amp; <span class="built_in">ls</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;目录不存在: <span class="variable">$1</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">alias</span> ap=<span class="string">&quot;cd ~/Applications &amp;&amp; ls&quot;</span></span><br><span class="line"><span class="built_in">alias</span> his=<span class="string">&quot;history&quot;</span></span><br><span class="line"><span class="built_in">alias</span> down=<span class="string">&quot;cd ~/Downloads &amp;&amp; ls&quot;</span></span><br><span class="line"><span class="built_in">alias</span> github=<span class="string">&quot;cd ~/Applications/vscode/github &amp;&amp; ls&quot;</span></span><br><span class="line"><span class="built_in">alias</span> cmk=<span class="string">&quot;touch CMakeLists.txt&quot;</span></span><br><span class="line"><span class="built_in">alias</span> make_llvm=<span class="string">&#x27;cmake -DLLVM_ENABLE_PROJECTS=&quot;clang;lld;llvm&quot; -DCMAKE_BUILD_TYPE=Debug -G &quot;Unix Makefiles&quot; ../llvm&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> act=<span class="string">&quot;conda activate&quot;</span></span><br><span class="line"><span class="built_in">alias</span> dea=<span class="string">&quot;conda deactivate&quot;</span></span><br><span class="line"><span class="built_in">alias</span> desk=<span class="string">&quot;cd ~/Desktop &amp;&amp; ls&quot;</span></span><br><span class="line"><span class="built_in">alias</span> qqmusic=<span class="string">&quot;cd ~/Applications/vscode/github/qqmusic&quot;</span></span><br><span class="line"><span class="built_in">alias</span> fox=<span class="string">&quot;musicfox&quot;</span></span><br><span class="line"></span><br><span class="line">ZSH_CACHE_DIR=<span class="variable">$HOME</span>/.cache/oh-my-zsh</span><br><span class="line"><span class="keyword">if</span> [[ ! -d <span class="variable">$ZSH_CACHE_DIR</span> ]]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">mkdir</span> <span class="variable">$ZSH_CACHE_DIR</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">plugins=(</span><br><span class="line">    git</span><br><span class="line">    autojump</span><br><span class="line">    zsh-syntax-highlighting</span><br><span class="line">    zsh-wakatime</span><br><span class="line">)</span><br><span class="line"><span class="built_in">source</span> <span class="variable">$ZSH</span>/oh-my-zsh.sh</span><br><span class="line"><span class="comment">#vi mode</span></span><br><span class="line"><span class="built_in">bindkey</span> -v</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> zle-keymap-select &#123;</span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$&#123;KEYMAP&#125;</span> == vicmd ]] || [[ <span class="variable">$1</span> = <span class="string">&#x27;block&#x27;</span> ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> -ne <span class="string">&#x27;\e[2 q&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> [[ <span class="variable">$&#123;KEYMAP&#125;</span> == main ]] || [[ <span class="variable">$&#123;KEYMAP&#125;</span> == viins ]] || [[ <span class="variable">$&#123;KEYMAP&#125;</span> == <span class="string">&#x27;&#x27;</span> ]] || [[ <span class="variable">$1</span> == <span class="string">&#x27;block&#x27;</span> ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> -ne <span class="string">&#x27;\e[6 q&#x27;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> zle-line-init zle-keymap-select &#123;</span><br><span class="line">    RPS1=<span class="string">&quot;<span class="variable">$&#123;<span class="variable">$&#123;KEYMAP/vicmd/-- NORMAL --&#125;</span>/(main|viins)/-- INSERT --&#125;</span>&quot;</span></span><br><span class="line">    RPS2=<span class="variable">$RPS1</span></span><br><span class="line">    <span class="built_in">zle</span> reset-prompt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">zle</span> -N zle-line-init</span><br><span class="line"><span class="built_in">zle</span> -N zle-keymap-select</span><br><span class="line"></span><br><span class="line"><span class="built_in">setopt</span> no_nomatch</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /home/poem/.config/broot/launcher/bash/br</span><br><span class="line"><span class="comment"># &gt;&gt;&gt; xmake &gt;&gt;&gt;</span></span><br><span class="line"><span class="built_in">test</span> -f <span class="string">&quot;/home/poem/.xmake/profile&quot;</span> &amp;&amp; <span class="built_in">source</span> <span class="string">&quot;/home/poem/.xmake/profile&quot;</span></span><br><span class="line"><span class="comment"># &lt;&lt;&lt; xmake &lt;&lt;&lt;</span></span><br></pre></td></tr></table></figure><h3 id="tmux-conf"><a href="#tmux-conf" class="headerlink" title="~&#x2F;.tmux.conf"></a>~&#x2F;.tmux.conf</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -- general -------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -g default-terminal <span class="string">&quot;screen-256color&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># setw -g xterm-keys on</span></span><br><span class="line"><span class="built_in">set</span> -s escape-time 10                     <span class="comment"># faster command sequences</span></span><br><span class="line"><span class="built_in">set</span> -sg repeat-time 600                   <span class="comment"># increase repeat timeout</span></span><br><span class="line"><span class="built_in">set</span> -s focus-events on</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -g prefix2 C-a                        <span class="comment"># GNU-Screen compatible prefix</span></span><br><span class="line"><span class="built_in">set</span> -g prefix C-a</span><br><span class="line">unbind C-b</span><br><span class="line"><span class="built_in">bind</span> C-a send-prefix</span><br><span class="line"><span class="comment"># bind C-a send-prefix -2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># unbind &#x27;&quot;&quot;&#x27;</span></span><br><span class="line"><span class="comment"># bind - splitw -v -c &#x27;#&#123;pane_current_path&#125;&#x27;# 垂直新增面板</span></span><br><span class="line"><span class="comment"># unbind %</span></span><br><span class="line"><span class="comment"># bind | splitw -h -c &#x27;#&#123;pane_current_path&#125;&#x27;# 水平新增面板</span></span><br><span class="line"><span class="comment"># setw -g mode-mouse on # 支持鼠标选取文本</span></span><br><span class="line"><span class="comment"># setw -g mouse-resize-pane on # 支持鼠标拖动调整面板的大小</span></span><br><span class="line"><span class="comment"># setw -g mouse-select-pane on # 支持鼠标选中并切换面板</span></span><br><span class="line"><span class="comment"># setw -g mouse-select-window on # 支持鼠标选中并切换窗口</span></span><br><span class="line"><span class="comment"># set-option -g mouse on # 等同于以上4个命令的效果</span></span><br><span class="line"><span class="comment"># set -g status-utf8 on                  # expect UTF-8 (tmux &lt; 2.2)</span></span><br><span class="line"><span class="comment"># setw -q -g utf8 on</span></span><br><span class="line"><span class="built_in">set</span> -g mouse on</span><br><span class="line">set-window-option -g mode-keys vi</span><br><span class="line">bind-key -T copy-mode-vi v  send-keys -X begin-selection</span><br><span class="line">bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle</span><br><span class="line">bind-key -T copy-mode-vi y  send-keys -X copy-selection-and-cancel</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -g history-limit 15000                 <span class="comment"># boost history</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># edit configuration</span></span><br><span class="line"><span class="comment"># set-environment -g EDITOR &quot;$EDITOR&quot;</span></span><br><span class="line"><span class="built_in">bind</span> e new-window -n <span class="string">&quot;#&#123;TMUX_CONF_LOCAL&#125;&quot;</span> sh -c <span class="string">&#x27;case &quot;$&#123;EDITOR:-vim&#125;&quot; in *vim*) $&#123;EDITOR:-vim&#125; -c &quot;:set syntax=tmux&quot; &quot;$TMUX_CONF_LOCAL&quot;;; *) $EDITOR &quot;$TMUX_CONF_LOCAL&quot;;; esac &amp;&amp; &quot;$TMUX_PROGRAM&quot; $&#123;TMUX_SOCKET:+-S &quot;$TMUX_SOCKET&quot;&#125; source &quot;$TMUX_CONF&quot; \; display &quot;$TMUX_CONF_LOCAL sourced&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># reload configuration</span></span><br><span class="line"><span class="built_in">bind</span> r run <span class="string">&#x27;&quot;$TMUX_PROGRAM&quot; $&#123;TMUX_SOCKET:+-S &quot;$TMUX_SOCKET&quot;&#125; source &quot;$TMUX_CONF&quot;&#x27;</span> \; display <span class="string">&quot;#&#123;TMUX_CONF&#125; sourced&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -- display -------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -g base-index 1           <span class="comment"># start windows numbering at 1</span></span><br><span class="line"><span class="built_in">set</span> -g renumber-windows on    <span class="comment"># renumber windows when a window is closed</span></span><br><span class="line"><span class="built_in">set</span> -g set-titles on          <span class="comment"># set terminal title</span></span><br><span class="line"><span class="built_in">set</span> -g display-panes-time 800 <span class="comment"># slightly longer pane indicators display time</span></span><br><span class="line"><span class="built_in">set</span> -g display-time 1000      <span class="comment"># slightly longer status messages display time</span></span><br><span class="line"><span class="built_in">set</span> -g status-interval 10     <span class="comment"># redraw status line every 10 seconds</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># clear both screen and history</span></span><br><span class="line"><span class="built_in">bind</span> -n C-l send-keys C-l \; run <span class="string">&#x27;sleep 0.2&#x27;</span> \; clear-history</span><br><span class="line"></span><br><span class="line"><span class="comment"># activity</span></span><br><span class="line"><span class="built_in">set</span> -g monitor-activity on</span><br><span class="line"><span class="built_in">set</span> -g visual-activity off</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -- navigation ----------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">bind</span> C-c new-session <span class="comment"># create session</span></span><br><span class="line"><span class="built_in">bind</span> C-f command-prompt -p find-session <span class="string">&#x27;switch-client -t %%&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># session navigation</span></span><br><span class="line"><span class="built_in">bind</span> BTab switch-client -l  <span class="comment"># move to last session</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">bind</span> - split-window -v</span><br><span class="line"><span class="built_in">bind</span> _ split-window -h</span><br><span class="line"></span><br><span class="line"><span class="comment"># pane navigation</span></span><br><span class="line"><span class="built_in">bind</span> -r h select-pane -L  <span class="comment"># move left</span></span><br><span class="line"><span class="built_in">bind</span> -r j select-pane -D  <span class="comment"># move down</span></span><br><span class="line"><span class="built_in">bind</span> -r k select-pane -U  <span class="comment"># move up</span></span><br><span class="line"><span class="built_in">bind</span> -r l select-pane -R  <span class="comment"># move right</span></span><br><span class="line"><span class="comment"># bind &gt; swap-pane -D       # swap current pane with the next one</span></span><br><span class="line"><span class="comment"># bind &lt; swap-pane -U       # swap current pane with the previous one</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># maximize current pane</span></span><br><span class="line"><span class="built_in">bind</span> + run <span class="string">&quot;cut -c3- &#x27;#&#123;TMUX_CONF&#125;&#x27; | sh -s _maximize_pane &#x27;#&#123;session_name&#125;&#x27; &#x27;#D&#x27;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pane resizing</span></span><br><span class="line"><span class="built_in">bind</span> -r H resize-pane -L 2</span><br><span class="line"><span class="built_in">bind</span> -r J resize-pane -D 2</span><br><span class="line"><span class="built_in">bind</span> -r K resize-pane -U 2</span><br><span class="line"><span class="built_in">bind</span> -r L resize-pane -R 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># window navigation</span></span><br><span class="line"><span class="comment"># unbind n</span></span><br><span class="line"><span class="comment"># unbind p</span></span><br><span class="line"><span class="comment"># bind -r C-h previous-window # select previous window</span></span><br><span class="line"><span class="comment"># bind -r C-l next-window     # select next window</span></span><br><span class="line"><span class="comment"># bind Tab last-window        # move to last active window</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># toggle mouse</span></span><br><span class="line"><span class="comment"># bind m run &quot;cut -c3- &#x27;#&#123;TMUX_CONF&#125;&#x27; | sh -s _toggle_mouse&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -- facebook pathpicker -------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bind F run &quot;cut -c3- &#x27;#&#123;TMUX_CONF&#125;&#x27; | sh -s _fpp &#x27;#&#123;pane_id&#125;&#x27; &#x27;#&#123;pane_current_path&#125;&#x27;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># -- copy mode -----------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bind Enter copy-mode # enter copy mode</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bind -T copy-mode-vi v send -X begin-selection</span></span><br><span class="line"><span class="comment"># bind -T copy-mode-vi C-v send -X rectangle-toggle</span></span><br><span class="line"><span class="comment"># bind -T copy-mode-vi y send -X copy-selection-and-cancel</span></span><br><span class="line"><span class="comment"># bind -T copy-mode-vi Escape send -X cancel</span></span><br><span class="line"><span class="comment"># bind -T copy-mode-vi H send -X start-of-line</span></span><br><span class="line"><span class="comment"># bind -T copy-mode-vi L send -X end-of-line</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -- buffers -------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bind b list-buffers     # list paste buffers</span></span><br><span class="line"><span class="comment"># bind p paste-buffer -p  # paste from the top paste buffer</span></span><br><span class="line"><span class="comment"># bind P choose-buffer    # choose which buffer to paste from</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># run &#x27;&quot;$TMUX_PROGRAM&quot; source &quot;$TMUX_CONF_LOCAL&quot;&#x27;</span></span><br><span class="line"><span class="comment"># run &#x27;cut -c3- &quot;$TMUX_CONF&quot; | sh -s _apply_configuration&#x27;</span></span><br><span class="line"><span class="comment">#set -g status-bg black # 设置状态栏背景黑色</span></span><br><span class="line"><span class="comment">#set -g status-fg yellow # 设置状态栏前景黄色</span></span><br><span class="line"><span class="comment">#set -g status-style &quot;bg=black, fg=yellow&quot; # 状态栏前景背景色</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -g status-left <span class="string">&quot;#[bg=#88cc44] Sess: #S &quot;</span> <span class="comment"># 状态栏-左侧内容 (#S: 会话(session)名称)</span></span><br><span class="line"><span class="comment">#set -g status-right &#x27;Continuum status: #&#123;continuum_status&#125;&#x27; # 状态栏右侧内容</span></span><br><span class="line"><span class="built_in">set</span> -g status-left-length 300 <span class="comment"># 状态栏-左边长度300</span></span><br><span class="line"><span class="built_in">set</span> -g status-right-length 500 <span class="comment"># 状态栏-左边长度500</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -wg window-status-format <span class="string">&quot; #I:#W &quot;</span> <span class="comment"># 状态栏-(当前窗口除外的其他)窗口名称格式</span></span><br><span class="line"><span class="built_in">set</span> -wg window-status-separator <span class="string">&quot;&quot;</span> <span class="comment"># 状态栏-窗口名称之间的间隔</span></span><br><span class="line"><span class="built_in">set</span> -wg window-status-current-format <span class="string">&quot; #I:#W #F &quot;</span> <span class="comment"># 状态栏-当前窗口名称格式(#I：序号，#w：窗口名称，#F：间隔符)</span></span><br><span class="line"><span class="built_in">set</span> -wg window-status-current-style <span class="string">&quot;bg=black, fg=yellow&quot;</span> <span class="comment"># 状态栏-当前窗口名称的背景色</span></span><br><span class="line"><span class="comment">#set -wg window-status-last-style &quot;fg=black&quot; # 状态栏最后一个窗口名称的样式&quot;&quot;&quot;&quot;)&quot;&quot;&quot;&quot;)&quot;&quot;&#x27;&#x27;))&quot;]&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">set</span> -g message-style <span class="string">&quot;bg=#202529, fg=#91A8BA&quot;</span> <span class="comment"># 指定消息通知的前景、后景色</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">########## 插件 ##########</span></span><br><span class="line"><span class="built_in">set</span> -g @plugin <span class="string">&#x27;tmux-plugins/tpm&#x27;</span></span><br><span class="line"><span class="built_in">set</span> -g @plugin <span class="string">&#x27;tmux-plugins/tmux-sensible&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># tmux-resurrect 插件，用于手动保存和恢复 tmux 环境信息。</span></span><br><span class="line"><span class="comment"># 使用方式：按 PREFIX,Ctrl+s 保存 session，按 PREFIX,Ctrl+r 恢复 session</span></span><br><span class="line"><span class="built_in">set</span> -g @plugin <span class="string">&#x27;tmux-plugins/tmux-resurrect&#x27;</span></span><br><span class="line"><span class="comment"># 使 tmux-resurrect 支持保存和恢复 tmux 中的 vim 会话:</span></span><br><span class="line"><span class="built_in">set</span> -g @resurrect-strategy-vim <span class="string">&#x27;session&#x27;</span>  <span class="comment"># 需要 VIM 先安装 https://github.com/tpope/vim-obsession 插件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># tmux-continuum 插件。依赖: tmux&gt;=1.9, bash, tmux-resurrect</span></span><br><span class="line"><span class="comment"># 每隔15分钟自动保存 tmux 环境信息(不需要任何配置，默认就有)</span></span><br><span class="line"><span class="built_in">set</span> -g @plugin <span class="string">&#x27;tmux-plugins/tmux-continuum&#x27;</span></span><br><span class="line"><span class="comment"># 使得机器启动时，自动启动 tmux server:</span></span><br><span class="line"><span class="built_in">set</span> -g @continuum-boot <span class="string">&#x27;on&#x27;</span>  <span class="comment"># This is only for Linux. For MacOSX, see: https://github.com/tmux-plugins/tmux-continuum/blob/master/docs/automatic_start.md</span></span><br><span class="line"><span class="comment"># tmux server 启动时，自动加载上次保存的环境信息</span></span><br><span class="line"><span class="built_in">set</span> -g @continuum-restore <span class="string">&#x27;on&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -g @plugin <span class="string">&#x27;tmux-plugin/tpm&#x27;</span></span><br><span class="line"><span class="built_in">set</span> -g @plugin <span class="string">&#x27;catppuccin/tmux#latest&#x27;</span></span><br><span class="line">run <span class="string">&#x27;~/.tmux/plugin/tpm/tpm&#x27;</span></span><br><span class="line">set-option -g status-position top</span><br><span class="line"><span class="built_in">set</span> -g @catppuccin_flavor <span class="string">&#x27;mocha&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="lunarvim"><a href="#lunarvim" class="headerlink" title="lunarvim"></a>lunarvim</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line">reload <span class="string">&quot;user.plugins&quot;</span></span><br><span class="line">reload <span class="string">&quot;user.options&quot;</span></span><br><span class="line">reload <span class="string">&quot;user.keymaps&quot;</span></span><br><span class="line">reload <span class="string">&quot;user.lsp&quot;</span></span><br><span class="line">reload <span class="string">&quot;user.smoothie&quot;</span></span><br><span class="line">reload <span class="string">&quot;user.harpoon&quot;</span></span><br><span class="line">reload <span class="string">&quot;user.autocommands&quot;</span></span><br><span class="line">reload <span class="string">&quot;user.webdev-icons&quot;</span></span><br><span class="line">reload <span class="string">&quot;user.cybu&quot;</span></span><br><span class="line">reload <span class="string">&quot;user.neotest&quot;</span></span><br><span class="line">reload <span class="string">&quot;user.surround&quot;</span></span><br><span class="line">reload <span class="string">&quot;user.bookmark&quot;</span></span><br><span class="line">reload <span class="string">&quot;user.todo-comments&quot;</span></span><br><span class="line">reload <span class="string">&quot;user.jaq&quot;</span></span><br><span class="line">reload <span class="string">&quot;user.fidget&quot;</span></span><br><span class="line">reload <span class="string">&quot;user.lab&quot;</span></span><br><span class="line">reload <span class="string">&quot;user.git&quot;</span></span><br><span class="line">reload <span class="string">&quot;user.zen-mode&quot;</span></span><br><span class="line">reload <span class="string">&quot;user.inlay-hints&quot;</span></span><br><span class="line">reload <span class="string">&quot;user.telescope&quot;</span></span><br><span class="line">reload <span class="string">&quot;user.bqf&quot;</span></span><br><span class="line">reload <span class="string">&quot;user.dial&quot;</span></span><br><span class="line">reload <span class="string">&quot;user.numb&quot;</span></span><br><span class="line">reload <span class="string">&quot;user.treesitter&quot;</span></span><br><span class="line">reload <span class="string">&quot;user.neogit&quot;</span></span><br><span class="line">reload <span class="string">&quot;user.colorizer&quot;</span></span><br><span class="line">reload <span class="string">&quot;user.lualine&quot;</span></span><br><span class="line">reload <span class="string">&quot;user.tabnine&quot;</span></span><br><span class="line">reload <span class="string">&quot;user.copilot&quot;</span></span><br><span class="line">-- reload <span class="string">&quot;user.chatgpt&quot;</span></span><br><span class="line">reload <span class="string">&quot;user.whichkey&quot;</span></span><br><span class="line">reload <span class="string">&quot;user.neoai&quot;</span></span><br><span class="line">reload <span class="string">&quot;user.cmp&quot;</span></span><br><span class="line">reload <span class="string">&quot;user.nvimtree&quot;</span></span><br><span class="line">reload <span class="string">&quot;nostr&quot;</span></span><br><span class="line">reload <span class="string">&quot;user.astro-tools&quot;</span></span><br><span class="line">reload <span class="string">&quot;user.matchup&quot;</span></span><br><span class="line">reload <span class="string">&quot;user.modicator&quot;</span></span><br><span class="line">vim.opt.cmdheight = 2 -- more space <span class="keyword">in</span> the neovim <span class="built_in">command</span> line <span class="keyword">for</span> displaying messages</span><br><span class="line">vim.opt.guifont = <span class="string">&quot;monospace:h17&quot;</span> -- the font used <span class="keyword">in</span> graphical neovim applications</span><br><span class="line">vim.opt.shiftwidth = 2 -- the number of spaces inserted <span class="keyword">for</span> each indentation</span><br><span class="line">vim.opt.tabstop = 2 -- insert 2 spaces <span class="keyword">for</span> a tab</span><br><span class="line">vim.opt.relativenumber = <span class="literal">true</span> -- relative line numbers</span><br><span class="line">-- vim.opt.wrap = <span class="literal">false</span> -- wrap lines</span><br><span class="line"></span><br><span class="line">-- -- use treesitter folding</span><br><span class="line">-- vim.opt.foldexpr = <span class="string">&quot;nvim_treesitter#foldexpr()&quot;</span></span><br><span class="line"></span><br><span class="line">lvim.leader = <span class="string">&quot;space&quot;</span></span><br><span class="line"></span><br><span class="line">lvim.colorscheme = <span class="string">&quot;lunaperche&quot;</span></span><br><span class="line">lvim.autocommands = &#123;</span><br><span class="line">  &#123;</span><br><span class="line">    &#123; <span class="string">&quot;ColorScheme&quot;</span> &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      pattern = <span class="string">&quot;*&quot;</span>,</span><br><span class="line">      callback = <span class="keyword">function</span>()</span><br><span class="line">        -- change `Normal` to the group you want to change</span><br><span class="line">        -- and `#ffffff` to the color you want</span><br><span class="line">        -- see `:h nvim_set_hl` <span class="keyword">for</span> more options</span><br><span class="line">        vim.api.nvim_set_hl(0, <span class="string">&quot;Normal&quot;</span>, &#123; <span class="built_in">bg</span> = <span class="string">&quot;#ffffff&quot;</span>, underline = <span class="literal">false</span>, bold = <span class="literal">true</span> &#125;)</span><br><span class="line">      end,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lvim.transparent_window = <span class="literal">true</span></span><br><span class="line">lvim.builtin.lualine.style = <span class="string">&quot;default&quot;</span> -- or <span class="string">&quot;none&quot;</span></span><br><span class="line">lvim.builtin.lualine.style = <span class="string">&quot;default&quot;</span></span><br><span class="line">lvim.builtin.lualine.sections.lualine_c = &#123; <span class="string">&quot;diff&quot;</span> &#125;</span><br><span class="line">-- no need to <span class="built_in">set</span> style = <span class="string">&quot;lvim&quot;</span></span><br><span class="line"><span class="built_in">local</span> components = require(<span class="string">&quot;lvim.core.lualine.components&quot;</span>)</span><br><span class="line"></span><br><span class="line">lvim.builtin.lualine.sections.lualine_a = &#123; <span class="string">&quot;mode&quot;</span> &#125;</span><br><span class="line">lvim.builtin.lualine.sections.lualine_y = &#123;</span><br><span class="line">  components.spaces,</span><br><span class="line">  components.location</span><br><span class="line">&#125;</span><br><span class="line">lvim.builtin.lualine.options.theme = <span class="string">&quot;gruvbox&quot;</span></span><br><span class="line">lvim.builtin.alpha.active = <span class="literal">true</span></span><br><span class="line">lvim.builtin.dap.active = <span class="literal">true</span></span><br><span class="line">lvim.builtin.cmp.completion.keyword_length = 2</span><br><span class="line">lvim.builtin.telescope.defaults.layout_config.width = 0.95</span><br><span class="line">lvim.builtin.telescope.defaults.layout_config.preview_cutoff = 75</span><br><span class="line">lvim.plugins = &#123;</span><br><span class="line">  &#123; <span class="string">&quot;lunarvim/colorschemes&quot;</span> &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">&quot;nvim-neorg/neorg&quot;</span>,</span><br><span class="line">      ft = <span class="string">&quot;norg&quot;</span>, -- lazy-load on filetype</span><br><span class="line">      config = <span class="literal">true</span>, -- run require(<span class="string">&quot;neorg&quot;</span>).setup()</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;wakatime/vim-wakatime&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;iamcco/markdown-preview.nvim&quot;</span>,</span><br><span class="line">    build = <span class="keyword">function</span>() vim.fn[<span class="string">&quot;mkdp#util#install&quot;</span>]() end,</span><br><span class="line">    ft = &#123; <span class="string">&quot;markdown&quot;</span> &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">local</span> colors = &#123;</span><br><span class="line">  color2 = <span class="string">&quot;#0f1419&quot;</span>,</span><br><span class="line">  color3 = <span class="string">&quot;#ffee99&quot;</span>,</span><br><span class="line">  color4 = <span class="string">&quot;#e6e1cf&quot;</span>,</span><br><span class="line">  color5 = <span class="string">&quot;#14191f&quot;</span>,</span><br><span class="line">  color13 = <span class="string">&quot;#b8cc52&quot;</span>,</span><br><span class="line">  color10 = <span class="string">&quot;#36a3d9&quot;</span>,</span><br><span class="line">  color8 = <span class="string">&quot;#f07178&quot;</span>,</span><br><span class="line">  color9 = <span class="string">&quot;#3e4b59&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lvim.builtin.lualine.options.theme = &#123;</span><br><span class="line">  normal = &#123;</span><br><span class="line">    c = &#123; <span class="built_in">fg</span> = colors.color9, <span class="built_in">bg</span> = colors.color2 &#125;,</span><br><span class="line">    a = &#123; <span class="built_in">fg</span> = colors.color2, <span class="built_in">bg</span> = colors.color10, gui = <span class="string">&quot;bold&quot;</span> &#125;,</span><br><span class="line">    b = &#123; <span class="built_in">fg</span> = colors.color4, <span class="built_in">bg</span> = colors.color5 &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  insert = &#123;</span><br><span class="line">    a = &#123; <span class="built_in">fg</span> = colors.color2, <span class="built_in">bg</span> = colors.color13, gui = <span class="string">&quot;bold&quot;</span> &#125;,</span><br><span class="line">    b = &#123; <span class="built_in">fg</span> = colors.color4, <span class="built_in">bg</span> = colors.color5 &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  visual = &#123;</span><br><span class="line">    a = &#123; <span class="built_in">fg</span> = colors.color2, <span class="built_in">bg</span> = colors.color3, gui = <span class="string">&quot;bold&quot;</span> &#125;,</span><br><span class="line">    b = &#123; <span class="built_in">fg</span> = colors.color4, <span class="built_in">bg</span> = colors.color5 &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  replace = &#123;</span><br><span class="line">    a = &#123; <span class="built_in">fg</span> = colors.color2, <span class="built_in">bg</span> = colors.color8, gui = <span class="string">&quot;bold&quot;</span> &#125;,</span><br><span class="line">    b = &#123; <span class="built_in">fg</span> = colors.color4, <span class="built_in">bg</span> = colors.color5 &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  inactive = &#123;</span><br><span class="line">    c = &#123; <span class="built_in">fg</span> = colors.color4, <span class="built_in">bg</span> = colors.color2 &#125;,</span><br><span class="line">    a = &#123; <span class="built_in">fg</span> = colors.color4, <span class="built_in">bg</span> = colors.color5, gui = <span class="string">&quot;bold&quot;</span> &#125;,</span><br><span class="line">    b = &#123; <span class="built_in">fg</span> = colors.color4, <span class="built_in">bg</span> = colors.color5 &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">-- Read the docs: https://www.lunarvim.org/docs/configuration</span><br><span class="line">-- Example configs: https://github.com/LunarVim/starter.lvim</span><br><span class="line">-- Video Tutorials: https://www.youtube.com/watch?v=sFA9kX-Ud_c&amp;list=PLhoH5vyxr6QqGu0i7tt_XoVK9v-KvZ3m6</span><br><span class="line">-- Forum: https://www.reddit.com/r/lunarvim/</span><br><span class="line">-- Discord: https://discord.com/invite/Xb9B4Ny</span><br></pre></td></tr></table></figure><h2 id="命令行的艺术"><a href="#命令行的艺术" class="headerlink" title="命令行的艺术"></a>命令行的艺术</h2><p><a href="https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md">命令行的艺术</a></p><ul><li><code>free -hs 1</code> 查看系统内存使用情况。</li><li><code>ulimit -a</code> 查看系统资源限制。</li><li><code>vmstat -a</code> 查看系统内存使用情况。</li><li><code>ipcs -m</code> 查看共享内存。</li><li><code>route -n</code> 查看路由表。</li><li><code>pint -c 3 -i 3 www.baidu.com</code> 测试网络连接。数量，间隔。</li><li><code>ifconfig</code> 查看网络接口。</li><li><code>netstat</code> 查看网络连接。</li></ul><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><ol><li>**&amp;**：在命令末尾加上这个符号可以将命令放到后台执行。例如，<code>command &amp;</code> 会在后台运行 <code>command</code>，而不会阻塞终端。</li><li><strong>Ctrl-Z</strong>：这个快捷键用于暂停当前正在执行的前台任务，并将其放入后台。任务会被挂起，并可以使用 <code>fg</code> 命令恢复。</li><li><strong>Ctrl-C</strong>：这个快捷键用于终止当前前台任务。它会发送一个中断信号 (SIGINT) 给正在运行的程序，通常用于停止运行中的命令。</li><li><strong>jobs</strong>：这个命令用于列出当前用户在 Bash 中的所有任务，包括在前台和后台的任务。输出会显示任务的状态（如“运行中”、“已停止”等）。</li><li><strong>fg</strong>：这个命令用于将后台任务调回前台。可以指定具体的任务，例如 <code>fg %1</code> 将第一个任务调到前台。</li><li><strong>bg</strong>：这个命令用于将暂停的任务在后台继续执行。执行 <code>bg %1</code> 将第一个任务恢复在后台运行。</li><li><strong>kill</strong>：这个命令用于终止指定的任务。可以使用任务的PID（进程ID）或作业号。例如，<code>kill %1</code> 会终止作业号为1的任务，<code>kill 1234</code> 则会结束进程ID为1234的任务。</li><li><strong>du</strong>：这个命令用于显示指定目录或文件所占用的磁盘空间。<code>du -hs *</code> 可以显示当前目录下所有文件的大小。</li><li><strong>df</strong>：这个命令用于显示磁盘分区的使用情况。<code>df -h</code> 可以以可读方式显示。</li><li><strong>lsblk</strong>：这个命令用于列出所有块设备的信息。<code>lsblk -f</code>查看文件系统类型。</li><li><strong>ip</strong>：这个命令用于显示网络接口的信息。<code>ip addr show</code>显示网卡信息。取代<code>ifconfig</code>命令。启用网络接口：<code>ip link set eth0 up</code>。禁用网络接口：<code>ip link set eth0 down</code>。查看路由信息：<code>ip route show</code>。</li><li><strong>dig</strong>：这个命令用于查询DNS记录。<code>dig www.baidu.com</code>查询<a href="http://www.baidu.com的IP地址。使用特定DNS服务器：`dig">www.baidu.com的IP地址。使用特定DNS服务器：`dig</a> @8.8.8.8 <a href="http://www.baidu.com`./">www.baidu.com`。</a></li><li><code>grep</code> 和 <code>egrep</code></li></ol><ul><li><strong>grep</strong>：用于在文本中搜索匹配的行，并输出包含匹配字符串的行。</li><li><strong>egrep</strong>：这是 <code>grep -E</code> 的简写，支持扩展的正则表达式，允许更多的模式匹配特性（例如，使用 <code>+</code>、<code>?</code> 和 <code>|</code> 等）。<ol><li><code>-i</code>：忽略大小写</li></ol><ul><li>示例：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -i <span class="string">&quot;pattern&quot;</span> filename</span><br></pre></td></tr></table></figure></li><li>这个命令将在 <code>filename</code> 文件中查找 “pattern”，并忽略大小写。</li></ul><ol start="2"><li><code>-o</code>：只输出匹配的部分</li></ol><ul><li>示例：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -o <span class="string">&quot;pattern&quot;</span> filename</span><br></pre></td></tr></table></figure></li><li>这个命令仅显示文件中匹配的文本，而不显示整行。</li></ul><ol start="3"><li><code>-v</code>：反向匹配</li></ol><ul><li>示例：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -v <span class="string">&quot;pattern&quot;</span> filename</span><br></pre></td></tr></table></figure></li><li>这个命令输出不包含 “pattern” 的行。</li></ul><ol start="4"><li><code>-A NUM</code>：输出匹配行后面的 NUM 行</li></ol><ul><li>示例：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -A 3 <span class="string">&quot;pattern&quot;</span> filename</span><br></pre></td></tr></table></figure></li><li>这个命令将输出包含 “pattern” 的行及其后面的 3 行。</li></ul><ol start="5"><li><code>-B NUM</code>：输出匹配行前面的 NUM 行</li></ol><ul><li>示例：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    grep -B 2 <span class="string">&quot;pattern&quot;</span> filename</span><br><span class="line">  - 这个命令将输出包含 <span class="string">&quot;pattern&quot;</span> 的行及其前面的 2 行。</span><br><span class="line">6. `-C NUM`：输出匹配行前后各 NUM 行</span><br><span class="line">  - 示例：</span><br><span class="line">    ```bash</span><br><span class="line">    grep -C 1 <span class="string">&quot;pattern&quot;</span> filename</span><br></pre></td></tr></table></figure></li><li>这个命令将输出包含 “pattern” 的行及其前后各 1 行。<br>假设有一个名为 <code>example.txt</code> 的文件，内容如下：<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Hello World</span><br><span class="line">This <span class="built_in">is</span> a test file.</span><br><span class="line"><span class="keyword">Let</span><span class="comment">&#x27;s learn regular expressions.</span></span><br><span class="line">Goodbye World</span><br></pre></td></tr></table></figure></li><li>查找包含 “world”（忽略大小写）：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -i <span class="string">&quot;world&quot;</span> example.txt</span><br></pre></td></tr></table></figure></li><li>只输出匹配到的 “World”：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -o <span class="string">&quot;World&quot;</span> example.txt</span><br></pre></td></tr></table></figure></li><li>输出不包含 “test” 的行：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -v <span class="string">&quot;test&quot;</span> example.txt</span><br></pre></td></tr></table></figure></li><li>查找 “is” 并输出后面的 2 行：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -A 2 <span class="string">&quot;is&quot;</span> example.txt</span><br></pre></td></tr></table></figure></li><li>查找 “Hello” 并输出前面的 1 行：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -B 1 <span class="string">&quot;Hello&quot;</span> example.txt</span><br></pre></td></tr></table></figure></li><li>查找 “World” 并输出前后各 1 行：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -C 1 <span class="string">&quot;World&quot;</span> example.txt</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="日常使用"><a href="#日常使用" class="headerlink" title="日常使用"></a>日常使用</h3><ol><li><strong>Ctrl-W</strong>：删除最后一个单词<ul><li>当在终端中输入命令时，按 <code>Ctrl-W</code> 将删除光标前的一个完整单词。</li></ul></li><li><strong>Ctrl-U</strong>：删除光标所在位置之前的内容<ul><li>当输入命令时，按 <code>Ctrl-U</code> 会删除光标前的所有内容，这对于快速清除输入非常有用。</li></ul></li><li><strong>Alt-B</strong>：向后移动光标一个单词<ul><li>按 <code>Alt-B</code> 可以将光标向后移动一个单词，便于在进行编辑时精确定位。</li></ul></li><li><strong>Alt-F</strong>：向前移动光标一个单词<ul><li>按 <code>Alt-F</code> 可以将光标向前移动一个单词。</li></ul></li><li><strong>Ctrl-A</strong>：将光标移至行首<ul><li>按 <code>Ctrl-A</code> 会将光标移到当前输入行的最开头。</li></ul></li><li><strong>Ctrl-E</strong>：将光标移至行尾<ul><li>按 <code>Ctrl-E</code> 会将光标移到当前输入行的最末尾。</li></ul></li><li><strong>Ctrl-K</strong>：删除光标至行尾的所有内容<ul><li>当光标在行中时，按 <code>Ctrl-K</code> 会删除光标右侧至行尾的所有内容。</li></ul></li><li><strong>Ctrl-L</strong>：清屏<ul><li>按 <code>Ctrl-L</code> 可以清除当前终端屏幕并重新显示提示符，类似于执行 <code>clear</code> 命令。</li></ul></li><li>**Alt-.**：循环地移向前一个参数<ul><li>在命令行输入中，按 <code>Alt-.</code> 可以逐个循环访问之前命令的最后一项参数。</li></ul></li><li>**Alt-***：展开通配符<ul><li>按 <code>Alt-*</code> 将展开当前目录下的所有匹配文件名，这对使用通配符命令非常方便。</li></ul></li><li><strong>pgrep</strong>：根据名字查找进程。</li><li><strong>honup</strong>：使后台进程在用户退出终端会话后继续运行。</li><li><strong>yazi</strong></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python 环境管理</title>
      <link href="/2024/08/12/conda/"/>
      <url>/2024/08/12/conda/</url>
      
        <content type="html"><![CDATA[<h2 id="Conda-环境管理命令"><a href="#Conda-环境管理命令" class="headerlink" title="Conda 环境管理命令"></a>Conda 环境管理命令</h2><ul><li><strong>创建环境</strong>：<code>conda create -n 环境名称 python=版本号</code></li><li><strong>激活环境</strong>：<code>conda activate 环境名称</code></li><li><strong>停用环境</strong>：<code>conda deactivate</code></li><li><strong>删除环境</strong>：<code>conda remove -n 环境名称 --all</code></li><li><strong>安装包</strong>：<code>conda install 包名称</code>（用于在当前环境中安装指定的包）</li><li><strong>升级包</strong>：<code>conda update 包名称</code>（用于更新已安装包的版本）</li><li><strong>卸载包</strong>：<code>conda remove 包名称</code>（用于从当前环境中卸载指定的包）</li><li><strong>查看已安装的包</strong>：<code>conda list</code>（用于列出当前环境中已安装的包）</li><li><strong>搜索包</strong>：<code>conda search 包名称</code>（用于在 Conda 仓库中搜索指定的包）</li><li><strong>创建环境配置文件</strong>：<code>conda env export &gt; environment.yml</code>（用于将当前环境的配置导出到一个 YAML 文件中）</li><li><strong>查看配置信息</strong>：<code>conda config --show</code>（显示当前的 Conda 配置信息）</li><li><strong>查看某个配置项的值</strong>：<code>conda config --show 配置项</code>（显示特定配置项的当前值）</li><li><strong>设置配置项的值</strong>：<code>conda config --set 配置项=值</code>（设置特定配置项的值）</li><li><strong>添加通道</strong>：<code>conda config --add channels 通道名称</code>（向配置中添加一个新的通道）</li><li><strong>移除通道</strong>：<code>conda config --remove channels 通道名称</code>（从配置中移除指定的通道）</li><li><strong>列出所有通道</strong>：<code>conda config --get channels</code>（列出当前配置中所有的通道）</li><li><strong>重置配置项</strong>：<code>conda config --remove-key 配置项</code>（重置指定配置项的值为默认值）</li><li><strong>编辑配置文件</strong>：<code>conda config --edit</code>（打开配置文件以进行手动编辑）</li><li><strong>创建具有指定版本的环境</strong>：<code>conda create --name myenv python=3.10.6</code>（创建一个指定 Python 版本的环境）</li><li><strong>导出环境配置</strong>：<code>conda env export --name myenv --file environment.yml</code>（导出环境配置）</li><li><strong>导入环境配置</strong>：<code>conda env create --file environment.yml</code>（导入环境配置）</li><li><strong>创建一个虚拟环境的克隆</strong>：<code>conda create --name myclone --clone myenv</code>（创建一个现有环境的克隆）</li></ul><p><img src="/images/conda/%E8%8B%B1%E7%89%B9%E5%B0%94%E6%98%BE%E5%8D%A1.png" alt="英特尔显卡"></p><p><img src="/images/conda/Python%E7%89%88%E6%9C%AC%E9%80%89%E6%8B%A9.png" alt="Python版本选择"></p><p><img src="/images/conda/PyTorch%E5%AE%89%E8%A3%85.png" alt="PyTorch安装"></p><p>在激活的环境中使用：<br><code>conda install pytorch torchvision torchaudio cpuonly -c pytorch</code></p><h2 id="pip命令"><a href="#pip命令" class="headerlink" title="pip命令"></a>pip命令</h2><p><a href="https://realpython.com/what-is-pip/">Python 的 pip 管理项目的依赖项</a></p><ul><li><strong>查看pip版本</strong>：<code>pip --version</code></li><li><strong>更新pip版本</strong>：<code>pip install --upgrade pip</code> 或者 <code>python -m pip install --upgrade pip</code></li><li><strong>安装特定版本的包</strong>：<code>pip install Django==2.2.13</code></li><li><strong>卸载包</strong>：<code>pip uninstall 包名</code></li><li><strong>查看包信息</strong>：<code>pip show 包名</code></li><li><strong>查看已安装的包</strong>：<code>pip list</code></li><li><strong>查看过期的包</strong>：<code>pip list --outdated</code>（也即可以升级的包）</li><li><strong>搜索包</strong>：<code>pip search 包名</code></li><li><strong>输出当前环境中安装的包</strong>：<code>pip freeze</code></li><li><strong>生成requirements.txt文件</strong>：<code>pip freeze &gt; requirements.txt</code></li><li><strong>过滤掉特定包</strong>：<code>pip freeze | grep -v example-package</code></li><li><strong>安装requirements.txt文件中的包</strong>：<code>pip install -r requirements.txt</code></li><li><strong>更新包</strong>：<code>pip install --upgrade 包名</code></li><li><strong>同时更新pip和包</strong>：<code>pip install --upgrade pip 包名</code></li><li><strong>安装包到用户目录</strong>：<code>pip install --user 包名</code></li><li><strong>使用清华镜像安装包</strong>：<code>pip install --index-url https://pypi.tuna.tsinghua.edu.cn/simple/ 包名</code></li><li><strong>使用清华镜像并信任</strong>：<code>pip install --trusted-host pypi.tuna.tsinghua.edu.cn 包名</code></li><li><strong>设置镜像源</strong>：<code>pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/</code></li><li><strong>设置镜像源的信任主机</strong>：<code>pip config set install.trusted-host mirrors.aliyun.com</code></li></ul><p>当一个项目需要多人协作的时候，流程往往是这样的：</p><p>一个人：创建新的虚拟环境并激活 -&gt; 安装必要的包 -&gt; 导出到 requirements.txt 中，一并上传至项目仓库<br>其他人：把仓库拉下来 -&gt; 创建新的虚拟环境并激活 -&gt; 根据 requirements.txt 安装需要的包<br>事实上 conda 自身也可以进行包管理，更为正确的做法也是使用 environment.yml</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/2024/08/10/git/"/>
      <url>/2024/08/10/git/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：本文是作者学习git的笔记。推荐学习路径（按顺序）：</p><ol><li>了解基础概念：<br><a href="https://www.runoob.com/git/git-tutorial.html">Git 教程 - 菜鸟教程</a></li><li>深入浅出的理解：<br><a href="https://github.com/geeeeeeeeek/git-recipes/">Git recipe</a></li><li>练习分支操作：<br><a href="https://learngitbranching.js.org/?locale=zh_CN">Git 分支可视化</a></li><li>工作流管理：<br><a href="https://blog.csdn.net/sunyctf/article/details/130587970">Gitflow工作流</a></li><li>约定式提交：<br><a href="https://www.conventionalcommits.org/zh-hans/v1.0.0/">约定式提交</a><br>GUI界面：Lazygit:<br><a href="https://github.com/jesseduffield/lazygit">Lazygit</a></li></ol></blockquote><h2 id="1-学习资料"><a href="#1-学习资料" class="headerlink" title="1. 学习资料"></a>1. 学习资料</h2><ul><li><strong>官方文档</strong>：<a href="https://git-scm.com/docs">Git 官方文档</a></li><li><strong>Git 相关</strong>：<ul><li><a href="https://www.liaoxuefeng.com/wiki/896043488029600">Git 教程 - 廖雪峰的官方网站</a></li><li><a href="https://git-scm.com/book/zh/v2">Git 书籍 - Pro Git</a></li><li><a href="https://github.com/b1f6c1c4/learn-git-the-super-hard-way">学习Git底层原理 - learn-git-the-super-hard-way</a></li><li><a href="https://education.github.com/git-cheat-sheet-education.pdf">Git Cheat Sheet</a></li><li><a href="https://www.gitwiki.org/">Git Wiki</a></li><li><a href="https://zjdoc-gitguide.readthedocs.io/zh-cn/latest/index.html">GitGuide</a> 这里面还有关于 Github 的美化教程。</li></ul></li></ul><h2 id="2-Git基础"><a href="#2-Git基础" class="headerlink" title="2. Git基础"></a>2. Git基础</h2><h3 id="2-1-查看文档"><a href="#2-1-查看文档" class="headerlink" title="2.1 查看文档"></a>2.1 查看文档</h3><ul><li><strong>查看命令帮助</strong>：<ul><li><code>git &lt;command&gt; --help</code></li><li><code>git help &lt;command&gt;</code></li><li><code>man git-&lt;command&gt;</code></li></ul></li></ul><h3 id="2-2-安装配置"><a href="#2-2-安装配置" class="headerlink" title="2.2 安装配置"></a>2.2 安装配置</h3><ul><li><strong>配置文件位置</strong>：<ul><li>局部：<code>.git/config</code></li><li>全局：<code>~/.gitconfig</code></li><li>系统：<code>/etc/gitconfig</code></li></ul></li><li><strong>git config</strong>:<ul><li><code>git config --global user.name &quot;your name&quot;</code>：设置用户名</li><li><code>git config --global user.email &quot;your email&quot;</code>：设置邮箱</li><li><code>git config --global --edit</code>：编辑全局配置文件  </li><li><code>git config --global --unset alias.co</code>：删除全局别名</li><li><code>git config --global alias.co checkout</code>：设置全局别名</li><li><code>git config --list</code>：查看所有配置信息</li></ul></li></ul><h3 id="2-3-工作区、暂存区和版本库"><a href="#2-3-工作区、暂存区和版本库" class="headerlink" title="2.3 工作区、暂存区和版本库"></a>2.3 工作区、暂存区和版本库</h3><ul><li><strong>git status</strong>：查看当前状态<ul><li><code>git status -s</code>：简化输出</li></ul></li><li><strong>git add</strong>：工作区 → 暂存区<ul><li><code>git add . </code>：添加所有文件到暂存区</li><li><code>git add -u</code>：添加所有已修改文件到暂存区</li></ul></li><li><strong>git commit</strong>：暂存区 → 版本库<ul><li><code>git commit -m &quot;commit message&quot;</code>：提交暂存区到版本库</li><li><code>git commit -a -m &quot;commit message&quot;</code>：提交所有已修改文件到版本库</li><li><code>git commit --amend -m &quot;commit message&quot;</code>：修改上次提交(会破坏之前的提交记录)。它允许你将缓存的修改和之前的提交合并到一起，而不是提交一个全新的快照。它还可以用来简单地编辑上一次提交的信息而不改变快照。</li><li><code>git commit --amend --no-edit</code></li></ul></li><li><strong>git stash</strong>：暂存区操作<ul><li><code>git stash list</code>：查看暂存区列表</li><li><code>git stash pop</code>：恢复暂存区文件</li><li><code>git stash apply &lt;stash-id&gt;</code>：恢复指定暂存区文件</li><li><code>git stash drop &lt;stash-id&gt;</code>：删除指定暂存区文件</li><li><code>git stash clear</code>：清空暂存区</li></ul></li><li><strong>git restore</strong>：恢复文件<ul><li><code>git restore &lt;file&gt;</code>：恢复暂存区文件，<u>工作区受影响</u><blockquote><p><code>git restore ./source/_posts/git使用.md</code>:我在进行代码编辑时，将一部分工作提交到缓存区，然后做了一些修改，这时我想撤销这部分工作，这时就可以使用<code>git restore</code>命令。</p></blockquote></li><li><code>git restore --staged &lt;file&gt;</code>：恢复暂存区文件，<u>工作区不受影响</u></li><li><code>git restore --staged &lt;file&gt;</code>：恢复暂存区文件，<u>工作区不受影响</u></li><li><code>git restore --source &lt;commit-id&gt; &lt;file&gt;</code>：恢复指定提交版本文件，工作区受影响<blockquote><p><code>git restore --source=HEAD~1 ./source/_posts/git使用.md</code>:将上一次提交的<code>git使用.md</code>文件恢复到工作区。</p></blockquote></li></ul></li></ul><blockquote><p><a href="https://github.com/geeeeeeeeek/git-recipes/wiki/2.6-%E5%9B%9E%E6%BB%9A%E9%94%99%E8%AF%AF%E7%9A%84%E4%BF%AE%E6%94%B9">回滚错误的更改 git reset 和 git revert 和 git clean</a></p></blockquote><ul><li><strong>git reset</strong>：版本库 → 暂存区<ul><li><code>git reset HEAD</code>：取消所有暂存区文件</li><li><code>git reset HEAD &lt;file&gt;</code>：取消暂存区文件</li><li><code>git reset --soft HEAD^</code>：取消上一次提交，不影响工作区。适合想要修改提交信息的情况。</li><li><code>git reset --hard HEAD^</code>：撤销上一次提交，影响工作区</li></ul></li><li><strong>git revert</strong>：撤销提交<ul><li><code>git revert &lt;commit-id&gt;</code>：撤销指定提交，会生成一个新的提交记录</li><li><code>git revert HEAD</code>：撤销上一次提交，会生成一个新的提交记录</li></ul></li><li><strong>git clean</strong>：清理工作区<ul><li><code>git clean -f</code>：强制删除未跟踪文件</li><li><code>git clean -df</code>：强制删除未跟踪目录，会删除空目录</li><li><code>git clean -d -f</code>：强制删除未跟踪目录及子目录</li></ul></li><li><strong>git diff</strong>：显示工作区与暂存区的差异<blockquote><p><code>git d ./*/*/git使用.md</code>：加了别名以后使用</p></blockquote><ul><li><code>git diff HEAD</code>：显示工作区和版本库差异</li><li><code>git diff &lt;commit-id&gt; &lt;commit-id&gt;</code>：显示两个提交间差异</li><li><code>git diff &lt;file-path&gt;</code>:显示文件差异</li><li><code>git diff --name-only</code>：只显示暂存区和工作区差异文件名</li><li><code>git diff --stat</code>：显示文件级别简要统计信息</li></ul></li><li><strong>git difftool</strong>：使用外部工具查看差异<ul><li><code>git difftool --tool=gvimdiff &lt;file-path&gt;</code>：使用gvimdiff工具查看文件差异</li></ul></li></ul><h3 id="2-4-分支操作"><a href="#2-4-分支操作" class="headerlink" title="2.4 分支操作"></a>2.4 分支操作</h3><ul><li><strong>git branch</strong>：分支管理<ul><li><code>git branch -v</code>：查看所有分支，并显示最后一次提交信息</li><li><code>git branch -r</code>：查看远程分支</li><li><code>git branch -a</code>：查看所有分支（包括本地和远程）</li><li><code>git branch -m &lt;old-name&gt; &lt;new-name&gt;</code>：重命名分支</li><li><code>git branch --merged</code>：查看已合并分支</li><li><code>git branch --contains &lt;commit-id&gt;</code>：查看包含指定提交的分支</li><li><code>git branch -d &lt;branch-name&gt;</code>：删除分支</li><li><code>git branch -f &lt;branch-name&gt; &lt;commit-id&gt;</code>：强制移动分支指针<blockquote><p><code>git branch -f master HEAD</code>:找回master分支</p></blockquote></li><li><code>git branch --set-upstream-to=&lt;remote&gt;/&lt;branch&gt;</code>：设置跟踪分支</li><li><code>git branch --unset-upstream</code>：取消跟踪分支</li><li><code>git branch --track &lt;branch-name&gt; &lt;remote&gt;/&lt;branch&gt;</code>：创建远程分支并跟踪</li></ul></li><li><strong>git switch</strong>：切换分支<ul><li><code>git switch -c</code>:创建并切换分支</li><li><code>git switch --detach|-d &lt;commit-id&gt;</code>：分离头指针，<u>工作区不受影响</u></li></ul></li><li><strong>git merge</strong>：合并分支<ul><li><code>git merge &lt;branch-name&gt;</code>：合并指定分支到当前分支</li><li><code>git merge --no-ff &lt;branch-name&gt;</code>：禁用Fast-Forward合并，保留分支历史</li><li><code>git merge --abort</code>：取消合并</li><li><code>git cherry-pick &lt;commit-id&gt;</code>：选择性合并提交</li></ul></li><li><strong>git rebase</strong>：变基操作。从内容的角度来看，rebase 只不过是将分支从一个提交移到了另一个。但从内部机制来看，Git 是通过在选定的基上创建新提交来完成这件事的——它事实上重写了你的项目历史。尽管分支看上去是一样的，但它包含了全新的提交。<ul><li><code>git rebase -i &lt;commit-id&gt;</code>：交互式变基<blockquote><p>pick：保留该提交（默认）<br>squash：将当前提交与前一个提交合并，但保留两个提交的日志信息（需要手动合并日志）<br>fixup：类似于 squash，但会自动丢弃当前提交的日志信息，只保留前一个提交的日志<br>drop：删除该提交</p></blockquote></li><li><code>git rebase --onto &lt;new-base&gt; &lt;branch-name&gt;</code>：变基指定分支到新基</li><li><code>git rebase --continue</code>：继续变基</li><li><code>git rebase --abort</code>：取消变基</li></ul></li></ul><h3 id="2-5-远端操作"><a href="#2-5-远端操作" class="headerlink" title="2.5 远端操作"></a>2.5 远端操作</h3><ul><li><strong>git clone</strong>：克隆远端仓库<ul><li><code>git clone -b &lt;branch-name&gt; &lt;url&gt;</code>：克隆指定分支</li><li><code>git clone --recurse &lt;url&gt;</code>：克隆含子模块仓库</li><li><code>git clone --depth &lt;depth&gt; &lt;url&gt;</code>：克隆指定深度</li></ul></li><li><strong>git remote</strong>：远端管理<ul><li><code>git remote -v</code>：查看所有远程仓库</li><li><code>git remote add &lt;name&gt; &lt;url&gt;</code>：添加远程仓库</li><li><code>git remote remove &lt;name&gt;</code>：删除远程仓库</li><li><code>git remote rename &lt;old-name&gt; &lt;new-name&gt;</code>：重命名远程仓库</li><li><code>git remote show &lt;name&gt;</code>：显示远程仓库信息</li><li><code>git remote update</code>：更新远程仓库信息</li></ul></li><li><strong>git fetch</strong>：收取远端变化<ul><li><code>git fetch &lt;name&gt;</code>：拉取远程仓库变化</li><li><code>git fetch &lt;name&gt; &lt;branch-name&gt;</code>：拉取指定分支变化</li><li><code>git fetch --all</code>：拉取所有远程仓库变化</li></ul></li><li><strong>git pull</strong>：<code>git fetch + git merge</code>（或<code>git rebase</code>）<ul><li><code>git pull &lt;name&gt; &lt;branch-name&gt;</code>：拉取指定分支并合并到当前分支</li><li><code>git pull --rebase &lt;name&gt; &lt;branch-name&gt;</code>：拉取指定分支并变基到当前分支</li><li><code>git pull --all</code>：拉取所有分支并合并到当前分支</li><li><code>git pull --rebase --all</code>：拉取所有分支并变基到当前分支</li></ul></li><li><strong>git push</strong>：推送本地变化到远端<ul><li><code>git push &lt;name&gt; &lt;branch-name&gt;</code>：推送指定分支到远程仓库</li><li><code>git push &lt;name&gt; --all</code>：推送所有分支到远程仓库</li><li><code>git push &lt;name&gt; --tags</code>：推送所有标签到远程仓库</li><li><code>git push -u &lt;name&gt; &lt;branch-name&gt;</code>：推送指定分支到远程仓库并设置默认分支</li></ul></li><li><strong>git submodule</strong>：子模块管理<ul><li><code>git submodule add &lt;url&gt; &lt;path&gt;</code>：添加子模块</li><li><code>git submodule init</code>：初始化子模块</li><li><code>git submodule update</code>：更新子模块<blockquote><p><code>git submodule update --init --recursive</code>：初始化所有子模块并更新所有子模块(当你克隆了仓库却发现它还有子模块时，可以使用这个命令来初始化子模块)</p></blockquote></li><li><code>git submodule foreach git &lt;command&gt;</code>：在子模块中执行命令</li><li><code>git submodule status</code>：查看子模块状态</li><li><code>git submodule add &lt;url&gt; &lt;path&gt;</code>：添加子模块</li><li><code>git submodule init</code>：初始化子模块</li><li><code>git submodule update</code>：更新子模块</li><li><code>git submodule foreach git &lt;command&gt;</code>：在子模块中执行命令</li><li><code>git submodule status</code>：查看子模块状态</li></ul></li></ul><h3 id="2-6-提交日志"><a href="#2-6-提交日志" class="headerlink" title="2.6 提交日志"></a>2.6 提交日志</h3><ul><li><strong>git log</strong>：展示历史，当然这么长的参数要设置别名啦<ul><li><code>git log -p -2</code> 显示每次提交所引入的差异，最近两次提交</li><li><code>git log --oneline</code></li><li><code>git log -S function_name</code></li><li><code>git log --since=2024-8-4</code></li><li><code>git log --since=&quot;2.weeks&quot;</code>：查看最近两周提交记录</li><li><code>git log --until=&quot;2021-01-01&quot;</code>：查看2021年1月1日之前提交记录</li><li><code>git log --graph</code>：查看所有提交记录，图形化显示</li><li><code>git log --decorate</code>：查看所有提交记录，显示分支信息</li><li><code>git log --pretty=format:&quot;%h - %an, %ar : %s&quot;</code>：自定义日志格式</li><li><code>git log --stat</code>：查看提交统计信息</li><li><code>git log --patch</code>：查看每个提交的具体修改内容</li></ul></li><li><strong>git blame</strong>：查看贡献者<ul><li><code>git blame &lt;file&gt;</code>：查看指定文件每行最后一次修改的提交记录</li><li><code>git blame -L &lt;start&gt;,&lt;end&gt; &lt;file&gt;</code>：查看指定文件指定行范围的最后一次修改的提交记录</li><li><code>git blame -C &lt;file&gt;</code>：查看指定文件每行最后一次修改的提交记录，并显示代码上下文</li></ul></li><li><strong>git shortlog</strong>：统计贡献<ul><li><code>git shortlog -sne</code>：统计提交者、邮箱、贡献数量</li></ul></li><li><strong>git describe</strong>：查看标签信息</li><li><strong>git reflog</strong>:显示引用日志</li></ul><h3 id="2-7-其他命令"><a href="#2-7-其他命令" class="headerlink" title="2.7 其他命令"></a>2.7 其他命令</h3><ul><li><strong>git tag</strong>：标签管理<ul><li><code>git tag -a &lt;tag-name&gt; -m &quot;tag message&quot;</code>：创建标签</li><li><code>git tag -d &lt;tag-name&gt;</code>：删除标签</li><li><code>git tag -l &quot;v1.0.*&quot;</code>：列出所有v1.0版本标签</li></ul></li><li><strong>git show</strong>：显示提交内容<ul><li><code>git show &lt;commit-id&gt;</code>：显示指定提交内容</li><li><code>git show HEAD</code>：显示最新提交内容</li><li><code>git show --name-only &lt;commit-id&gt;</code>：显示指定提交修改的文件名</li><li><code>git show --name-status &lt;commit-id&gt;</code>：显示指定提交修改的文件名和状态</li><li><code>git show --stat &lt;commit-id&gt;</code>：显示指定提交统计信息</li><li><code>git show --patch &lt;commit-id&gt;</code>：显示指定提交具体修改内容</li></ul></li><li><strong>git notes</strong>: 管理备注<ul><li><code>git notes add -m &quot;note message&quot; &lt;commit-id&gt;</code>：添加备注</li><li><code>git notes show &lt;commit-id&gt;</code>：查看备注</li><li><code>git notes edit &lt;commit-id&gt;</code>：编辑备注</li><li><code>git notes merge &lt;commit-id&gt;</code>：合并备注</li><li><code>git notes remove &lt;commit-id&gt;</code>：删除备注</li><li><code>git notes prune</code>：删除过期备注</li></ul></li><li><strong>git grep</strong>：搜索提交内容<ul><li><code>git grep -n &quot;keyword&quot;</code>：搜索所有提交内容，并显示行号</li><li><code>git grep -i &quot;keyword&quot;</code>：搜索不区分大小写</li><li><code>git grep -w &quot;keyword&quot;</code>：只搜索全词匹配</li><li><code>git grep -l &quot;keyword&quot;</code>：只搜索文件名</li><li><code>git grep -c &quot;keyword&quot;</code>：只搜索提交次数</li></ul></li><li><strong>git archive</strong>：创建归档文件<ul><li><code>git archive --format=tar.gz --output=project.tar.gz &lt;commit-id&gt;</code>：创建指定提交的<code>.tar.gz</code>文件</li><li><code>git archive --format=zip --output=project.zip &lt;commit-id&gt;</code>：创建指定提交的<code>.zip</code>文件</li></ul></li><li><strong>git bisect</strong>：在版本树上二分查找定位bug</li><li><strong>git gc&#x2F;prune&#x2F;fsck</strong>：系统检查和垃圾清理</li></ul><h3 id="2-8-Git-别名"><a href="#2-8-Git-别名" class="headerlink" title="2.8 Git 别名"></a>2.8 Git 别名</h3><ul><li><p><strong>配置别名</strong>：使用<code>git config --global alias.&lt;alias-name&gt; &quot;&lt;command&gt;&quot;</code></p></li><li><p><strong>示例</strong>：</p><blockquote><p>lg st ll last cm rv ddv gl se</p></blockquote><ol><li><code>git config --global alias.lg &#39;log --color --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit&#39;</code>:查看分支历史，并以颜色、图形化、自定义格式显示</li><li><code>git config --global alias.st &#39;status -s&#39;</code>:查看状态简化输出</li><li><code>git config --global alias.ll &#39;log --oneline&#39;</code>:显示简短的提交记录</li><li><code>git config --global alias.last &#39;log -1 HEAD --stat&#39;</code>:显示最新提交信息和统计信息</li><li><code>git config --global alias.cm &#39;commit -m&#39;</code>:快速提交</li><li><code>git config --global alias.rv &#39;remote -v&#39;</code>:查看远程仓库信息</li><li><code>git config --global alias.d &#39;diff&#39;</code>:快速查看差异</li><li><code>git config --global alias.dv &#39;difftool -t vimdiff -y&#39;</code>:使用vimdiff工具查看差异,linux 下我用 gvimdiff<blockquote><p> 示例：<code>git dv 33559c5 ca1494d file1</code></p></blockquote></li><li><code>git config --global alias.gl &#39;config --global -l&#39;</code>:查看全局配置信息</li><li><code>git config --global alias.se &#39;!git rev-list --all | xargs git grep -F&#39;</code>:搜索所有提交内容</li></ol></li><li><p><strong>编辑别名</strong>: 使用<code>git config --global --edit</code></p></li><li><p><strong>删除别名</strong>：使用<code>git config --global --unset alias.&lt;alias-name&gt;</code></p></li></ul><h3 id="2-9-gitignore"><a href="#2-9-gitignore" class="headerlink" title="2.9 gitignore"></a>2.9 gitignore</h3><ul><li><strong>创建.gitignore文件</strong>：在仓库中创建<code>.gitignore</code>文件，定义不需要Git跟踪的文件和目录</li><li><strong>规则示例</strong>：<ul><li>忽略所有<code>.cpp</code>文件：<code>*.cpp</code></li><li>忽略特定目录：<code>folder/*</code></li><li>不忽略特定文件：<code>!special.cpp</code></li></ul></li></ul><h3 id="2-10-服务器连接"><a href="#2-10-服务器连接" class="headerlink" title="2.10 服务器连接"></a>2.10 服务器连接</h3><ul><li><strong>SSH方式连接</strong>：在ssh连接github后，就可以使用<code>git clone git@hostname:/path/to/repository/.git</code></li><li><strong>配置远端仓库</strong>：在本地仓库中配置<code>git remote add &lt;name&gt; user@hostname:/path/to/repository/.git</code></li></ul><h2 id="3-git-flow"><a href="#3-git-flow" class="headerlink" title="3. git flow"></a>3. git flow</h2><h3 id="3-1-安装"><a href="#3-1-安装" class="headerlink" title="3.1 安装"></a>3.1 安装</h3><p>windows:<br><code>scoop install git-flow</code></p><p>archlinux:<br><code>yay -S gitflow-zshcompletion-avh</code></p><h3 id="3-2-Git-Flow-分支模型"><a href="#3-2-Git-Flow-分支模型" class="headerlink" title="3.2 Git Flow 分支模型"></a>3.2 Git Flow 分支模型</h3><ol><li><strong>master 分支</strong></li></ol><ul><li>永远保持稳定和可发布的状态。</li><li>每次发布新版本时，都会从 develop 分支合并到 master 分支。</li></ul><ol start="2"><li><strong>develop 分支</strong></li></ol><ul><li>用于集成所有的开发分支。</li><li>代表最新的开发进度。</li><li>功能分支、发布分支和修复分支都从这里分支出去，最终合并回这里。</li></ul><ol start="3"><li><strong>feature 分支</strong></li></ol><ul><li>用于开发新功能。</li><li>从 develop 分支创建，开发完成后合并回 develop 分支。</li><li><strong>命名规范</strong>：<code>feature/feature-name</code></li></ul><ol start="4"><li><strong>release 分支</strong></li></ol><ul><li>用于准备新版本的发布。</li><li>从 develop 分支创建，进行最后的测试和修复，然后合并回 develop 和 master 分支，并打上版本标签。</li><li><strong>命名规范</strong>：<code>release/release-name</code></li></ul><ol start="5"><li><strong>hotfix 分支</strong></li></ol><ul><li>用于修复紧急问题。</li><li>从 master 分支创建，修复完成后合并回 master 和 develop 分支，并打上版本标签。</li><li><strong>命名规范</strong>：<code>hotfix/hotfix-name</code></li></ul><ol start="6"><li><strong>support 分支</strong></li></ol><ul><li>用于维护长期支持版本。</li><li>仅从 master 分支创建，仅限维护人员使用。</li><li><strong>命名规范</strong>：<code>support/support-name</code></li></ul><ol start="7"><li><strong>refactor 分支</strong></li></ol><ul><li>用于重构代码。</li><li>仅从 develop 分支创建，完成后合并回 develop 分支。</li><li><strong>命名规范</strong>：<code>refactor/refactor-name</code></li></ul><h3 id="3-2-工作流"><a href="#3-2-工作流" class="headerlink" title="3.2 工作流"></a>3.2 工作流</h3><ol><li>开始一个新功能分支：<code>git flow feature start &lt;name&gt;</code></li><li>完成一个功能分支：<code>git flow feature finish &lt;name&gt;</code></li><li>开始一个新发布分支：<code>git flow release start &lt;name&gt;</code></li><li>完成一个发布分支：<code>git flow release finish &lt;name&gt;</code></li><li>开始一个新hotfix分支：<code>git flow hotfix start &lt;name&gt;</code></li><li>完成一个hotfix分支：<code>git flow hotfix finish &lt;name&gt;</code></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05后的童年回忆——玩具篇</title>
      <link href="/2024/08/05/toy/"/>
      <url>/2024/08/05/toy/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/toy/%E7%94%BB%E6%9D%BF.png" alt="画板"></p><p><img src="/images/toy/%E7%99%BE%E5%8F%98%E9%AD%94%E5%B0%BA.png" alt="百变魔尺"></p><p><img src="/images/toy/%E7%AB%B9%E8%9C%BB%E8%9C%93.jpg" alt="竹蜻蜓"></p><p><img src="/images/toy/%E6%8B%89%E5%B0%BA%E9%99%80%E8%9E%BA.png" alt="拉尺陀螺"></p><p><img src="/images/toy/%E4%B8%83%E5%B7%A7%E6%9D%BF.png" alt="七巧板"></p><p><img src="/images/toy/%E7%A3%81%E6%82%AC%E6%B5%AE%E9%99%80%E8%9E%BA.jpg" alt="磁悬浮陀螺"></p><p><img src="/images/toy/%E6%B0%B4%E4%B8%AD%E5%A5%97%E5%9C%88%E5%9C%88%E6%B8%B8%E6%88%8F%E6%9C%BA.png" alt="水中套圈圈游戏机"></p><p><img src="/images/toy/%E6%89%98%E9%A9%AC%E6%96%AF%E7%81%AB%E8%BD%A6.png" alt="托马斯火车"></p><p><img src="/images/toy/%E9%9A%90%E8%97%8F%E7%9A%84%E5%9B%BE%E7%94%BB.png" alt="隐藏的图画"></p><p><img src="/images/toy/%E5%9C%B0%E9%BC%A0%E6%9C%BA.png" alt="地鼠机"></p><p><img src="/images/toy/%E6%8C%87%E5%B0%96%E6%BB%91%E6%9D%BF.jpg" alt="指尖滑板"></p><p><img src="/images/toy/%E8%B5%9B%E5%B0%94%E5%8F%B7%E5%8D%A1%E7%89%8C.jpg" alt="赛尔号卡牌"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cmake</title>
      <link href="/2024/08/02/cmake/"/>
      <url>/2024/08/02/cmake/</url>
      
        <content type="html"><![CDATA[<blockquote><p>先修：<a href="https://seisman.github.io/how-to-write-makefile/overview.html">Makefile</a></p><p><a href="https://modern-cmake-cn.github.io/Modern-CMake-zh_CN/chapters/basics.html">Cmake基础知识简介</a></p></blockquote><h3 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h3><table><thead><tr><th>厂商</th><th>C</th><th>C++</th><th>Fortran</th></tr></thead><tbody><tr><td>GNU</td><td>gcc</td><td>g++</td><td>gfortran</td></tr><tr><td>LLVM</td><td>clang</td><td>clang++</td><td>flang</td></tr></tbody></table><p><code>objdump</code> 将机器码转换为汇编语言<br><code>ldd</code> 显示动态库依赖<br>引号优先搜索当前目录<br>尖括号默认在 &#x2F;usr&#x2F;include 目录下搜索<br>&lt;&gt;处可以用””<br>“”处不可以用&lt;&gt;<br><code>#pragma once</code> 防止重复包含头文件</p><h2 id="现代cmake"><a href="#现代cmake" class="headerlink" title="现代cmake"></a>现代cmake</h2><p>重要概念：</p><ol><li><p><strong>Project</strong>:<br><code>project()</code>命令用于定义一个项目的名称和版本，它设定了项目的上下文，并允许CMake进行版本检查等。项目是所有构建目标（如库、程序等）的容器。</p></li><li><p><strong>Target</strong>:<br><code>target</code>代表了构建过程中的一个输出实体，如可执行文件、库文件、模块等。<code>library</code>和<code>program</code>是<code>target</code>的两种常见类型。一个项目可以包含多个目标。<code>add_executable()</code>, <code>add_library()</code>, <code>add_custom_target()</code>等命令可添加目标。</p></li><li><p><strong>Program (可执行文件)</strong>:<br>程序通常是指通过<code>add_executable()</code>命令创建的可执行文件目标。它是由源代码文件编译并链接而成的，可以直接在操作系统上运行。</p></li><li><p><strong>Library (库)</strong>:<br>库是通过<code>add_library()</code>命令创建的，它可以是静态库（.a, .lib）或动态库（.so, .dll）。库包含可以被其他程序或库使用的代码和数据。</p></li></ol><ul><li><p>静态库相当于多个.o 文件的集合，编译时会把所有源文件编译成一个 .a 文件，链接时只需链接这个 .a 文件即可。</p></li><li><p>动态库则是指可以被多个程序共享的 .so 文件，它包含了程序运行时所需的共享库代码和数据。</p></li></ul><p>Windows 系统上，动态库通常是 .dll 文件，而在 Linux 系统上，动态库通常是 .so 文件。</p><p>Windows：先找 可执行文件同目录，再找 %PATH%</p><p>Linux: ELF 格式可执行文件的 RPATH ,其次是 &#x2F;usr&#x2F;lib</p><ol start="5"><li><p><strong>Source (源代码)</strong>:<br>源代码是指用编程语言编写的文本文件，这些文件包含程序或库的指令。在CMake中，源代码文件通常被指定为<code>add_executable()</code>或<code>add_library()</code>等命令的参数。CMake负责编译这些源代码文件来生成目标（如程序或库）。</p></li><li><p><strong>Package</strong>:<br>它指的是一个可安装和可重用的软件组件，该组件可能包含库、可执行文件、头文件、配置文件等。CMake通过<code>install()</code>命令支持将构建的目标（如库和程序）以及其他文件安装到指定的目录结构中，从而创建可分发的软件包。</p></li></ol><p><a href="https://learn.microsoft.com/zh-cn/vcpkg/get_started/get-started?pivots=shell-bash">CMake和vcpkg的安装与使用</a></p><p>一些反复出现的命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">include()                       #  直接插入另一个文件内容</span><br><span class="line"></span><br><span class="line">find_package()                  #   查找并加载外部项目（如库、框架等）的配置文件</span><br><span class="line">find_library()                  #   查找并设置指定名称的库文件的路径</span><br><span class="line"></span><br><span class="line">add_library()                   #   用于添加一个库目标到项目中</span><br><span class="line"></span><br><span class="line">target_sources()                #   向目标（如库或可执行文件）添加源文件</span><br><span class="line">target_link_libraries()         #  添加要链接的库 </span><br><span class="line">target_include_directories()    #  添加头文件搜索路径 </span><br></pre></td></tr></table></figure><h3 id="根目录中的CMakeLists-txt文件"><a href="#根目录中的CMakeLists-txt文件" class="headerlink" title="根目录中的CMakeLists.txt文件"></a>根目录中的<code>CMakeLists.txt</code>文件</h3><ul><li><code>cmake_minimum_required(VERSION x.y.z)</code>：指定CMake的最低版本要求。</li><li><code>project(MyProject VERSION x.y.z)</code>：定义项目的名称和版本。</li><li><code>find_package()</code>：查找并加载外部项目（如依赖库）的配置文件。</li><li><code>add_subdirectory()</code>：添加子目录，CMake将递归地处理这些子目录中的<code>CMakeLists.txt</code>文件。</li><li>（可选）<code>set()</code> 或 <code>option()</code>：设置全局变量或选项。</li></ul><h3 id="子目录（如src）中的CMakeLists-txt文件"><a href="#子目录（如src）中的CMakeLists-txt文件" class="headerlink" title="子目录（如src）中的CMakeLists.txt文件"></a>子目录（如<code>src</code>）中的<code>CMakeLists.txt</code>文件</h3><p>子目录中的<code>CMakeLists.txt</code>文件通常负责定义该子目录下的目标（如源文件、库、可执行文件）以及它们之间的依赖关系。</p><ul><li><code>add_executable()</code> 或 <code>add_library()</code>：定义可执行文件或库目标，并列出该目标的源文件。</li><li><code>target_sources()</code>：向已定义的目标添加额外的源文件。</li><li><code>target_include_directories()</code>：为目标指定包含目录，以便编译器能够找到这些目录下的头文件。</li><li><code>target_compile_definitions()</code>：为目标指定编译定义。</li><li><code>target_compile_options()</code>：为目标指定编译选项。</li><li><code>target_link_libraries()</code>：指定目标应该链接哪些库。</li><li>（可选）<code>include()</code>：包含其他CMake文件，以重用配置或函数。</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>项目根目录的<code>CMakeLists.txt</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required(VERSION <span class="number">3.10</span>)</span><br><span class="line">project(MyLargeProject VERSION <span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line"># 查找并加载依赖库</span><br><span class="line">find_package(Boost REQUIRED COMPONENTS filesystem)</span><br><span class="line"></span><br><span class="line"># 添加子目录</span><br><span class="line">add_subdirectory(src)</span><br></pre></td></tr></table></figure><p><code>src</code>目录下的<code>CMakeLists.txt</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 定义库</span><br><span class="line">add_library(MyLib STATIC</span><br><span class="line">    MyLib.cpp</span><br><span class="line">    MyLibHelper.cpp</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 为库指定包含目录</span><br><span class="line">target_include_directories(MyLib PRIVATE include)</span><br><span class="line"></span><br><span class="line"># 定义可执行文件</span><br><span class="line">add_executable(MyApp</span><br><span class="line">    main.cpp</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"># 链接库到可执行文件</span><br><span class="line">target_link_libraries(MyApp PRIVATE MyLib)</span><br><span class="line"></span><br><span class="line"># 如果MyLib还依赖于Boost</span><br><span class="line"><span class="title function_">target_link_libraries</span><span class="params">(MyLib PRIVATE Boost::filesystem)</span></span><br></pre></td></tr></table></figure><p>在这个例子中，根目录的<code>CMakeLists.txt</code>负责设置CMake版本、项目名称和版本，查找依赖库，并添加<code>src</code>子目录。而<code>src</code>目录下的<code>CMakeLists.txt</code>则定义了库<code>MyLib</code>和可执行文件<code>MyApp</code>，并指定了它们之间的依赖关系以及包含目录。</p><h3 id="命令行调用"><a href="#命令行调用" class="headerlink" title="命令行调用"></a>命令行调用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cmake -B build -DCMAKE_BUILD_TYPE=Release</span><br><span class="line">cmake --build build --parallel 4</span><br><span class="line">cmake --build build --target install</span><br></pre></td></tr></table></figure><h2 id="命令行技巧"><a href="#命令行技巧" class="headerlink" title="命令行技巧"></a>命令行技巧</h2><p><code>cmake -Bbuild -DCMAKE_CXX_COMPILER=clang++</code><br><code>make --dry-run -C build</code> 预览构建过程，进入build目录去查找Makefile文件<br><code>cmake -Bbuild -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_CXX_STANDARD=20</code></p><h3 id="D-选项：指定配置变量（又称缓存变量）"><a href="#D-选项：指定配置变量（又称缓存变量）" class="headerlink" title="-D 选项：指定配置变量（又称缓存变量）"></a>-D 选项：指定配置变量（又称缓存变量）</h3><p>CMake 项目的构建分为两步：</p><ul><li><code>cmake -B build</code> 配置阶段（configure），检测环境并生成构建规则，在 build 目录下生成本地构建系统能识别的项目文件（Makefile 或 .sln）</li><li><code>cmake --build build</code>，构建阶段（build），调用编译器来编译代码</li></ul><p>在配置阶段可以通过 -D 设置缓存变量。<br>第二次配置时，之前的 -D 添加仍然会被保留。</p><ul><li><code>cmake -B build -DCMAKE_INSTALL_PREFIX=/opt/openvdb-8.0</code><br>设置安装路径为 &#x2F;opt&#x2F;openvdb-8.0（会安装到 &#x2F;opt&#x2F;openvdb-8.0&#x2F;lib&#x2F;libopenvdb.so）</li><li><code>cmake -B build -DCMAKE_BUILD_TYPE=Release</code><br>设置构建模式为发布模式（开启全部优化）</li><li><code>cmake -B build</code>   第二次配置时没有 -D 参数，但是之前的 -D 设置的变量都会被保留<br>（此时缓存里仍有你之前定义的 CMAKE_BUILD_TYPE 和 CMAKE_INSTALL_PREFIX）</li></ul><h3 id="G-选项：指定要用的生成器"><a href="#G-选项：指定要用的生成器" class="headerlink" title="-G 选项：指定要用的生成器"></a>-G 选项：指定要用的生成器</h3><ul><li>Linux 系统上的 CMake 默认用是 Unix Makefiles 生成器；Windows 系统默认是 Visual Studio 2019 生成器；MacOS 系统默认是 Xcode 生成器。</li><li>可以用 -G 参数改用别的生成器，例如 <code>cmake -GNinja</code> 会生成 Ninja 这个构建系统的构建规则。Ninja 是一个高性能，跨平台的构建系统，Linux、Windows、MacOS 上都可以用。</li><li>而 Ninja 则是专为性能优化的构建系统，和 CMake 结合是行业标准。</li><li>性能上：Ninja &gt; Makefile &gt; MSBuild</li></ul><h2 id="添加源文件"><a href="#添加源文件" class="headerlink" title="添加源文件"></a>添加源文件</h2><p>当源码在同一目录下的多文件中：</p><p>使用 GLOB 自动查找当前目录下指定扩展名的文件，实现批量添加源文件<br>启用 CONFIGURE_DEPENDS 选项，当添加新文件时，自动更新变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add_executable(main)</span><br><span class="line">file(GLOB sources CONFIGURE_DEPENDS *.cpp *.h)</span><br><span class="line">target_sources(main PUBLIC $&#123;sources&#125;)</span><br></pre></td></tr></table></figure><p>当源码在子文件中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add_executable(main)</span><br><span class="line">aux_source_directory(. sources)         #  aux_source_directory 自动搜集需要的文件后缀名</span><br><span class="line">aux_source_directory(mylib sources)</span><br><span class="line">target_sources(main PUBLIC $&#123;sources&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add_executable(main)</span><br><span class="line">file(GLOB_RECURSE sources CONFIGURE_DEPENDS *.cpp *.h)  #  GLOB_RECURSE 自动包含所有子文件夹下的文件</span><br><span class="line">target_sources(main PUBLIC $&#123;sources&#125;)</span><br></pre></td></tr></table></figure><p>GLOB_RECURSE 的问题：会把 build 目录里生成的临时 .cpp 文件也加进来</p><p>解决方案：把源码统一放到 src 目录下</p><h2 id="项目配置变量"><a href="#项目配置变量" class="headerlink" title="项目配置变量"></a>项目配置变量</h2><p>CMAKE_BUILD_TYPE 是 CMake 中一个特殊的变量，用于控制构建类型，他的值可以是：</p><ul><li>Debug 调试模式，完全不优化，生成调试信息，方便调试程序</li><li>Release 发布模式，优化程度最高，性能最佳，但是编译比 Debug 慢</li><li>MinSizeRel 最小体积发布，生成的文件比 Release 更小，不完全优化，减少二进制体积</li><li>RelWithDebInfo 带调试信息发布，生成的文件比 Release 更大，因为带有调试的符号信息</li><li>默认情况下 CMAKE_BUILD_TYPE 为空字符串，这时相当于 Debug。</li></ul><p>标准模板：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (NOT CMAKE_BUILD_TYPE)</span><br><span class="line">    <span class="built_in">set</span>(CMAKE_BUILD_TYPE Release)</span><br><span class="line">endif()</span><br></pre></td></tr></table></figure><h2 id="链接库文件"><a href="#链接库文件" class="headerlink" title="链接库文件"></a>链接库文件</h2><p>main.cpp 调用 mylib.cpp 里的 say_hello 函数</p><h3 id="mylib-作为一个静态库"><a href="#mylib-作为一个静态库" class="headerlink" title="mylib 作为一个静态库"></a>mylib 作为一个静态库</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add_library(mylib STATIC mylib.cpp)</span><br><span class="line">add_executable(main main.cpp)</span><br><span class="line">target_include_libraries(main PUBLIC mylib)</span><br></pre></td></tr></table></figure><h3 id="mylib-作为一个动态库"><a href="#mylib-作为一个动态库" class="headerlink" title="mylib 作为一个动态库"></a>mylib 作为一个动态库</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add_library(mylib SHARED mylib.cpp)</span><br><span class="line">add_executable(main main.cpp)</span><br><span class="line">target_include_libraries(main PUBLIC mylib)</span><br></pre></td></tr></table></figure><h3 id="mylib-作为一个对象库"><a href="#mylib-作为一个对象库" class="headerlink" title="mylib 作为一个对象库"></a>mylib 作为一个对象库</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add_library(mylib OBJECT mylib.cpp)</span><br><span class="line">add_executable(main main.cpp)</span><br><span class="line">target_include_libraries(main PUBLIC mylib)</span><br></pre></td></tr></table></figure><ul><li>对象库类似于静态库，但不生成 .a 文件，只由 CMake 记住该库生成了哪些对象文件</li><li>对象库是 CMake 自创的，绕开了编译器和操作系统的各种繁琐规则，保证了跨平台统一性。</li><li>在自己的项目中，推荐全部用对象库(OBJECT)替代静态库(STATIC)避免跨平台的麻烦。</li><li>对象库仅仅作为组织代码的方式，而实际生成的可执行文件只有一个，减轻了部署的困难。</li><li>对象库可以绕开编译器的不统一：保证不会自动剔除没引用到的对象文件</li><li>虽然动态库也可以避免剔除没引用的对象文件，但引入了运行时链接的麻烦</li></ul><h2 id="设置对象属性的三种方式"><a href="#设置对象属性的三种方式" class="headerlink" title="设置对象属性的三种方式"></a>设置对象属性的三种方式</h2><h3 id="set-property设置单个属性"><a href="#set-property设置单个属性" class="headerlink" title="set_property设置单个属性"></a><code>set_property</code>设置单个属性</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">add_executable(main main.cpp)  </span><br><span class="line">set_property(TARGET main PROPERTY CXX_STANDARD <span class="number">17</span>) # 采用C++<span class="number">17</span>标准进行编译（默认<span class="number">11</span>）  </span><br><span class="line">set_property(TARGET main PROPERTY CXX_STANDARD_REQUIRED ON) # 如果编译器不支持C++<span class="number">17</span>，则直接报错（默认OFF）  </span><br><span class="line">set_property(TARGET main PROPERTY WIN32_EXECUTABLE ON) # 在Windows系统中，运行时不启动控制台窗口，只有GUI界面（默认OFF）  </span><br><span class="line">set_property(TARGET main PROPERTY LINK_WHAT_YOU_USE ON) # 告诉编译器不要自动剔除没有引用符号的链接库（默认OFF）  </span><br><span class="line">set_property(TARGET main PROPERTY LIBRARY_OUTPUT_DIRECTORY $&#123;CMAKE_SOURCE_DIR&#125;/lib) # 设置动态链接库的输出路径（默认$&#123;CMAKE_BINARY_DIR&#125;）  </span><br><span class="line">set_property(TARGET main PROPERTY ARCHIVE_OUTPUT_DIRECTORY $&#123;CMAKE_SOURCE_DIR&#125;/lib) # 设置静态链接库的输出路径（默认$&#123;CMAKE_BINARY_DIR&#125;）  </span><br><span class="line">set_property(TARGET main PROPERTY RUNTIME_OUTPUT_DIRECTORY $&#123;CMAKE_SOURCE_DIR&#125;/bin) # 设置可执行文件的输出路径（默认$&#123;CMAKE_BINARY_DIR&#125;）</span><br></pre></td></tr></table></figure><h3 id="set-target-properties-设置多个属性"><a href="#set-target-properties-设置多个属性" class="headerlink" title="set_target_properties 设置多个属性"></a><code>set_target_properties</code> 设置多个属性</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># CMakeLists.txt  </span><br><span class="line">  </span><br><span class="line"># 添加可执行文件目标，名为main，依赖于main.cpp文件  </span><br><span class="line">add_executable(main main.cpp)  </span><br><span class="line">  </span><br><span class="line"># 设置main目标的属性  </span><br><span class="line">set_target_properties(main PROPERTIES  </span><br><span class="line">    CXX_STANDARD <span class="number">17</span>                         # 采用C++<span class="number">17</span>标准进行编译（默认<span class="number">11</span>）  </span><br><span class="line">    CXX_STANDARD_REQUIRED ON                # 如果编译器不支持C++<span class="number">17</span>，则直接报错（默认OFF）  </span><br><span class="line">    WIN32_EXECUTABLE ON                     # 在Windows系统中，运行时不启动控制台窗口，只有GUI界面（默认OFF）  </span><br><span class="line">    LINK_WHAT_YOU_USE ON                    # 告诉编译器不要自动剔除没有引用符号的链接库（默认OFF）  </span><br><span class="line">)  </span><br><span class="line">  </span><br><span class="line"># 设置动态链接库的输出路径  </span><br><span class="line"><span class="built_in">set</span>(LIBRARY_OUTPUT_DIRECTORY $&#123;CMAKE_SOURCE_DIR&#125;/lib)  </span><br><span class="line">  </span><br><span class="line"># 设置静态链接库的输出路径  </span><br><span class="line"><span class="built_in">set</span>(ARCHIVE_OUTPUT_DIRECTORY $&#123;CMAKE_SOURCE_DIR&#125;/lib)  </span><br><span class="line">  </span><br><span class="line"># 设置可执行文件的输出路径  </span><br><span class="line"><span class="built_in">set</span>(RUNTIME_OUTPUT_DIRECTORY $&#123;CMAKE_SOURCE_DIR&#125;/bin)</span><br></pre></td></tr></table></figure><h3 id="set-通过全局变量，让之后创建的所有对象都享有同样的属性"><a href="#set-通过全局变量，让之后创建的所有对象都享有同样的属性" class="headerlink" title="set 通过全局变量，让之后创建的所有对象都享有同样的属性"></a><code>set</code> 通过全局变量，让之后创建的所有对象都享有同样的属性</h3><p>要注意此时 set(CMAKE_xxx) 必须在 add_executable 之前才有效。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required(VERSION <span class="number">3.</span>x)</span><br><span class="line"><span class="built_in">set</span>(CMAKE_CXX_STANDARD <span class="number">17</span>)  </span><br><span class="line"><span class="built_in">set</span>(CMAKE_CXX_STANDARD_REQUIRED ON)                             <span class="comment"># 如果编译器不支持C++17，则直接报错  </span></span><br><span class="line"><span class="built_in">set</span>(CMAKE_WIN32_EXECUTABLE ON)                                  <span class="comment"># 在Windows系统中，运行时不启动控制台窗口，只有GUI界面  </span></span><br><span class="line"><span class="built_in">set</span>(CMAKE_LINK_WHAT_YOU_USE ON)                                 <span class="comment"># 告诉编译器不要自动剔除没有引用符号的链接库  </span></span><br><span class="line"><span class="built_in">set</span>(CMAKE_LIBRARY_OUTPUT_DIRECTORY <span class="string">&quot;$&#123;CMAKE_SOURCE_DIR&#125;/lib&quot;</span>)   <span class="comment"># 设置动态链接库的输出路径</span></span><br><span class="line"><span class="built_in">set</span>(CMAKE_ARCHIVE_OUTPUT_DIRECTORY <span class="string">&quot;$&#123;CMAKE_SOURCE_DIR&#125;/lib&quot;</span>)   <span class="comment"># 设置静态链接库的输出路径</span></span><br><span class="line"><span class="built_in">set</span>(CMAKE_RUNTIME_OUTPUT_DIRECTORY <span class="string">&quot;$&#123;CMAKE_SOURCE_DIR&#125;/bin&quot;</span>)   <span class="comment"># 设置可执行文件的输出路径  </span></span><br><span class="line">add_executable(main main.cpp)</span><br></pre></td></tr></table></figure><h3 id="Windows-链接-dll-找不到"><a href="#Windows-链接-dll-找不到" class="headerlink" title="Windows 链接 dll 找不到"></a>Windows 链接 dll 找不到</h3><ul><li>这是因为 dll 和 exe 不在同一目录。Windows 只会找当前 exe 所在目录，然后查找 PATH，找不到就报错。而你的 dll 在其他目录，因此 Windows 会找不到 dll。</li><li>解决1：把 dll 所在位置加到你的 PATH 环境变量里去，一劳永逸。</li><li>解决2：把这个 dll，以及这个 dll 所依赖的其他 dll，全部拷贝到和 exe 文件同一目录下。</li></ul><p>解决1：设置 mylib 对象的 xx_OUTPUT_DIRECTORY 系列属性</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">add_library(mylib SHARED mylib.cpp mylib.h)  </span><br><span class="line">set_property(TARGET mylib PROPERTY RUNTIME_OUTPUT_DIRECTORY <span class="string">&quot;$&#123;PROJECT_BINARY_DIR&#125;&quot;</span>)  </span><br><span class="line">set_property(TARGET mylib PROPERTY ARCHIVE_OUTPUT_DIRECTORY <span class="string">&quot;$&#123;PROJECT_BINARY_DIR&#125;&quot;</span>)  </span><br><span class="line">set_property(TARGET mylib PROPERTY LIBRARY_OUTPUT_DIRECTORY <span class="string">&quot;$&#123;PROJECT_BINARY_DIR&#125;&quot;</span>)  </span><br><span class="line">set_property(TARGET mylib PROPERTY RUNTIME_OUTPUT_DIRECTORY_DEBUG <span class="string">&quot;$&#123;PROJECT_BINARY_DIR&#125;&quot;</span>)  </span><br><span class="line">set_property(TARGET mylib PROPERTY ARCHIVE_OUTPUT_DIRECTORY_DEBUG <span class="string">&quot;$&#123;PROJECT_BINARY_DIR&#125;&quot;</span>)  </span><br><span class="line">set_property(TARGET mylib PROPERTY LIBRARY_OUTPUT_DIRECTORY_DEBUG <span class="string">&quot;$&#123;PROJECT_BINARY_DIR&#125;&quot;</span>)  </span><br><span class="line">set_property(TARGET mylib PROPERTY RUNTIME_OUTPUT_DIRECTORY_RELEASE <span class="string">&quot;$&#123;PROJECT_BINARY_DIR&#125;&quot;</span>)  </span><br><span class="line">set_property(TARGET mylib PROPERTY ARCHIVE_OUTPUT_DIRECTORY_RELEASE <span class="string">&quot;$&#123;PROJECT_BINARY_DIR&#125;&quot;</span>)  </span><br><span class="line">set_property(TARGET mylib PROPERTY LIBRARY_OUTPUT_DIRECTORY_RELEASE <span class="string">&quot;$&#123;PROJECT_BINARY_DIR&#125;&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="链接第三方库"><a href="#链接第三方库" class="headerlink" title="链接第三方库"></a>链接第三方库</h2><h3 id="find-package"><a href="#find-package" class="headerlink" title="find_package"></a><code>find_package</code></h3><h4 id="find-package-TBB-REQUIRED-和find-package-TBB-CONFIG-REQUIRED-区别"><a href="#find-package-TBB-REQUIRED-和find-package-TBB-CONFIG-REQUIRED-区别" class="headerlink" title="find_package(TBB REQUIRED)和find_package(TBB CONFIG REQUIRED) 区别"></a><code>find_package(TBB REQUIRED)</code>和<code>find_package(TBB CONFIG REQUIRED)</code> 区别</h4><ul><li>find_package(TBB REQUIRED) 会查找 &#x2F;usr&#x2F;lib&#x2F;cmake&#x2F;TBB&#x2F;TBBConfig.cmake 这个配置文件，并根据里面的配置信息创建 TBB::tbb 这个伪对象（他实际指向真正的 tbb 库文件路径 &#x2F;usr&#x2F;lib&#x2F;libtbb.so），之后通过 target_link_libraries 链接 TBB::tbb 就可以正常工作了。</li><li>其实更好的是通过 find_package(TBB CONFIG REQUIRED)，添加了一个 CONFIG 选项。这样他会优先查找 TBBConfig.cmake（系统自带的）而不是 FindTBB.cmake（项目作者常把他塞在 cmake&#x2F; 目录里并添加到 CMAKE_MODULE_PATH）。这样能保证寻找包的这个 .cmake 脚本是和系统自带的 tbb 版本是适配的，而不是项目作者当年下载的那个版本的 .cmake 脚本。</li><li>当然，如果你坚持要用 <code>find_package(TBB REQUIRED)</code> 也是可以的。</li><li>没有 CONFIG 选项：先找 FindTBB.cmake，再找 TBBConfig.cmake，找不到则报错</li><li>有 CONFIG 选项：只会找 TBBConfig.cmake，找不到则报错<br>此外，一些老年项目（例如 OpenVDB）只提供 Find 而没有 Config 文件，这时候就必须用 <code>find_package(OpenVDB REQUIRED)</code> 而不能带 CONFIG 选项。</li></ul><h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><p><code>find_package</code> 生成的伪对象(imported target)都按照“包名::组件名”的格式命名。<br>你可以在 <code>find_package</code> 中通过 <code>COMPONENTS</code> 选项，后面跟随一个列表表示需要用的组件。</p><p>示例:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find_package(Qt5 COMPONENTS Widgets Gui REQUIRED)</span><br><span class="line">target_link_libraries(main PUBLIC Qt5::Widgets Qt5::Gui)</span><br></pre></td></tr></table></figure><h2 id="输出与变量"><a href="#输出与变量" class="headerlink" title="输出与变量"></a>输出与变量</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">message(STATUS “...”) 表示信息类型是状态信息，有 -- 前缀</span><br><span class="line">message(WARNING “...”) 表示是警告信息</span><br><span class="line">message(AUTHOR_WARNING “...”) 表示是仅仅给项目作者看的警告信息</span><br><span class="line">AUTHOR_WARNING 的不同之处：可以通过 -Wno-dev 关闭</span><br><span class="line">message(FATAL_ERROR “...”) 表示是错误信息，会终止 CMake 的运行</span><br><span class="line">message(SEND_ERROR “...”) 表示是错误信息，但之后的语句仍继续执行</span><br></pre></td></tr></table></figure><h2 id="变量与缓存"><a href="#变量与缓存" class="headerlink" title="变量与缓存"></a>变量与缓存</h2><p>清除缓存，其实只需删除 build&#x2F;CMakeCache.txt 就可以了<br>设置缓存变量<br>语法是：<code>set(变量名 “变量值” CACHE 变量类型 “注释”)</code><br>更新缓存变量的正确方法，是通过命令行参数：<code>cmake -B build -Dmyvar=world</code><br>缓存变量更新：删 build<br>set 可以在后面加一个 FORCE 选项，表示不论缓存是否存在，都强制更新缓存。<br>不过这样会导致没办法用 -Dmyvar&#x3D;othervalue 来更新缓存变量。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>05后的童年回忆——零食篇</title>
      <link href="/2024/07/23/snack/"/>
      <url>/2024/07/23/snack/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在这里找寻记忆中模糊而又清晰的童年<br>按拼音首字母不严谨排序</p><h3 id="百奇"><a href="#百奇" class="headerlink" title="百奇"></a>百奇</h3><p><img src="/images/snack/%E7%99%BE%E5%A5%87.png" alt="百奇"></p><h3 id="棒冰"><a href="#棒冰" class="headerlink" title="棒冰"></a>棒冰</h3><p><img src="/images/snack/%E6%A3%92%E5%86%B01.png" alt="棒冰1"></p><p><img src="/images/snack/%E4%B8%89%E8%89%B2%E5%BF%83%E9%A6%99%E9%9B%AA%E7%B3%95.png" alt="雪糕"></p><p><img src="/images/snack/%E6%A3%92%E5%86%B03.png" alt="棒冰3"></p><p><img src="/images/snack/%E5%A4%A7%E5%B8%83%E4%B8%81.png" alt="大布丁"></p><p><img src="/images/snack/%E7%BB%BF%E8%B1%86%E6%B2%99%E9%9B%AA%E7%B3%95.png" alt="绿豆沙雪糕"></p><p><img src="/images/snack/%E7%BB%BF%E8%88%8C%E5%A4%B4%E9%9B%AA%E7%B3%95.png" alt="绿舌头雪糕"></p><h3 id="饼干"><a href="#饼干" class="headerlink" title="饼干"></a>饼干</h3><p><img src="/images/snack/%E9%A5%BC%E5%B9%B21.png" alt="饼干1"></p><p><img src="/images/snack/%E5%A5%A5%E5%88%A9%E5%A5%A5.png" alt="奥利奥"></p><p><img src="/images/snack/%E8%84%86%E8%84%86%E9%B2%A8.png" alt="脆脆鲨"></p><p><img src="/images/snack/%E8%B6%A3%E5%A4%9A%E5%A4%9A%E5%B7%A7%E5%85%8B%E5%8A%9B%E6%9B%B2%E5%A5%87.png" alt="趣多多巧克力曲奇"></p><p><img src="/images/snack/%E7%89%9B%E5%A5%B6%E9%A5%BC%E5%B9%B2.png" alt="牛奶饼干"></p><h3 id="冰杨梅"><a href="#冰杨梅" class="headerlink" title="冰杨梅"></a>冰杨梅</h3><p><img src="/images/snack/%E5%86%B0%E6%9D%A8%E6%A2%85.png" alt="冰杨梅"></p><h3 id="怪味花生"><a href="#怪味花生" class="headerlink" title="怪味花生"></a>怪味花生</h3><p><img src="/images/snack/%E6%80%AA%E5%91%B3%E8%8A%B1%E7%94%9F.png" alt="怪味花生"></p><h3 id="果然多"><a href="#果然多" class="headerlink" title="果然多"></a>果然多</h3><p><img src="/images/snack/%E6%9E%9C%E7%84%B6%E5%A4%9A.png" alt="果然多"></p><h3 id="猴王丹"><a href="#猴王丹" class="headerlink" title="猴王丹"></a>猴王丹</h3><p><img src="/images/snack/%E7%8C%B4%E7%8E%8B%E4%B8%B9.png" alt="猴王丹"></p><h3 id="海苔"><a href="#海苔" class="headerlink" title="海苔"></a>海苔</h3><p><img src="/images/snack/%E6%B5%B7%E8%8B%94.png" alt="海苔"></p><p><img src="/images/snack/%E6%B5%B7%E8%8B%942.png" alt="海苔2"></p><h3 id="好多鱼"><a href="#好多鱼" class="headerlink" title="好多鱼"></a>好多鱼</h3><p><img src="/images/snack/%E5%A5%BD%E5%A4%9A%E9%B1%BC.png" alt="好多鱼"></p><h3 id="椒盐土豆"><a href="#椒盐土豆" class="headerlink" title="椒盐土豆"></a>椒盐土豆</h3><p><img src="/images/snack/%E6%A4%92%E7%9B%90%E5%9C%9F%E8%B1%86.png" alt="椒盐土豆"></p><h3 id="健达奇趣蛋"><a href="#健达奇趣蛋" class="headerlink" title="健达奇趣蛋"></a>健达奇趣蛋</h3><p><img src="/images/snack/%E5%81%A5%E8%BE%BE%E5%A5%87%E8%B6%A3%E8%9B%8B.png" alt="健达奇趣蛋"></p><h3 id="烤土豆"><a href="#烤土豆" class="headerlink" title="烤土豆"></a>烤土豆</h3><p><img src="/images/snack/%E7%83%A4%E5%9C%9F%E8%B1%86.png" alt="烤土豆"></p><h3 id="可爱多"><a href="#可爱多" class="headerlink" title="可爱多"></a>可爱多</h3><p><img src="/images/snack/%E5%8F%AF%E7%88%B1%E5%A4%9A.png" alt="可爱多"></p><h3 id="可口可乐"><a href="#可口可乐" class="headerlink" title="可口可乐"></a>可口可乐</h3><p><img src="/images/snack/%E5%8F%AF%E5%8F%A3%E5%8F%AF%E4%B9%90.png" alt="可口可乐"></p><h3 id="辣条"><a href="#辣条" class="headerlink" title="辣条"></a>辣条</h3><p>小时候老师不让吃，说味大。现在，小时候的味道它最大。<br>绿爽，小滑头，卫龙，唐僧肉……</p><p><img src="/images/snack/%E8%BE%A3%E6%9D%A1.jpg" alt="辣条"></p><p><img src="/images/snack/%E7%BB%BF%E7%88%BD.jpg" alt="绿爽"></p><p><img src="/images/snack/%E5%B0%8F%E6%BB%91%E5%A4%B4.png" alt="小滑头"></p><h3 id="咪咪"><a href="#咪咪" class="headerlink" title="咪咪"></a>咪咪</h3><p><img src="/images/snack/%E5%92%AA%E5%92%AA.jpg" alt="咪咪"></p><h3 id="妙脆角"><a href="#妙脆角" class="headerlink" title="妙脆角"></a>妙脆角</h3><p><img src="/images/snack/%E5%A6%99%E8%84%86%E8%A7%92.png" alt="妙脆角"></p><h3 id="木糖醇"><a href="#木糖醇" class="headerlink" title="木糖醇"></a>木糖醇</h3><p><img src="/images/snack/%E6%9C%A8%E7%B3%96%E9%86%87.png" alt="木糖醇"></p><h3 id="魔法士干脆面"><a href="#魔法士干脆面" class="headerlink" title="魔法士干脆面"></a>魔法士干脆面</h3><p>集卡嘞</p><p><img src="/images/snack/%E9%AD%94%E6%B3%95%E5%A3%AB%E5%B9%B2%E8%84%86%E9%9D%A2.jpg" alt="魔法士干脆面"></p><h3 id="魔古力"><a href="#魔古力" class="headerlink" title="魔古力"></a>魔古力</h3><p><img src="/images/snack/%E9%AD%94%E5%8F%A4%E5%8A%9B.png" alt="魔古力"></p><h3 id="奶片"><a href="#奶片" class="headerlink" title="奶片"></a>奶片</h3><p><img src="/images/snack/%E5%A5%B6%E7%89%87.jpg" alt="奶片"></p><h3 id="泡泡糖"><a href="#泡泡糖" class="headerlink" title="泡泡糖"></a>泡泡糖</h3><p><img src="/images/snack/%E6%B3%A1%E6%B3%A1%E7%B3%96.jpg" alt="泡泡糖"></p><h3 id="啤酒豆"><a href="#啤酒豆" class="headerlink" title="啤酒豆"></a>啤酒豆</h3><p><img src="/images/snack/%E5%95%A4%E9%85%92%E8%B1%86.jpg" alt="啤酒豆"></p><h3 id="馓子"><a href="#馓子" class="headerlink" title="馓子"></a>馓子</h3><p><img src="/images/snack/%E9%A6%93%E5%AD%90.png" alt="馓子"></p><h3 id="上好佳虾片"><a href="#上好佳虾片" class="headerlink" title="上好佳虾片"></a>上好佳虾片</h3><p><img src="/images/snack/%E4%B8%8A%E5%A5%BD%E4%BD%B3%E8%99%BE%E7%89%87.png" alt="上好佳虾片"></p><h3 id="薯片"><a href="#薯片" class="headerlink" title="薯片"></a>薯片</h3><p><img src="/images/snack/%E5%8F%AF%E6%AF%94%E5%85%8B.png" alt="可比克"></p><p><img src="/images/snack/%E4%B9%90%E4%BA%8B.png" alt="乐事"></p><h3 id="闪电爽"><a href="#闪电爽" class="headerlink" title="闪电爽"></a>闪电爽</h3><p><img src="/images/snack/%E9%97%AA%E7%94%B5%E7%88%BD.png" alt="闪电爽"></p><h3 id="糖果"><a href="#糖果" class="headerlink" title="糖果"></a>糖果</h3><p><img src="/images/snack/%E7%B3%96%E6%9E%9C1.png" alt="单色脆皮软糖"></p><p><img src="/images/snack/%E7%B3%96%E6%9E%9C2.png" alt="吸管糖"></p><p><img src="/images/snack/%E7%B3%96%E6%9E%9C3.png" alt="糖果3"></p><p><img src="/images/snack/%E5%8A%B2%E8%B7%B3.png" alt="劲跳"></p><p><img src="/images/snack/%E7%B3%96%E6%9E%9C5.png" alt="糖果5"></p><p><img src="/images/snack/%E6%B4%BB%E8%AF%A5.png" alt="活该"></p><p><img src="/images/snack/%E7%8E%89%E7%B1%B3%E7%B3%96.png" alt="玉米糖"></p><p><img src="/images/snack/%E6%A3%89%E8%8A%B1%E7%B3%961.png" alt="棉花糖1"></p><p><img src="/images/snack/%E6%A3%89%E8%8A%B1%E7%B3%962.png" alt="棉花糖2"></p><p><img src="/images/snack/%E5%AE%8F%E6%BA%90%E7%88%86%E7%82%B8%E6%9E%9C%E6%B1%BD%E7%A1%AC%E7%B3%96.png" alt="宏源爆炸果汽硬糖"></p><p><img src="/images/snack/%E4%BB%94%E4%BB%94%E6%A3%92.png" alt="仔仔棒"></p><p><img src="/images/snack/%E6%97%BA%E4%BB%94qq%E7%B3%96.jpg" alt="旺仔qq糖"></p><h3 id="桃豆"><a href="#桃豆" class="headerlink" title="桃豆"></a>桃豆</h3><p><img src="/images/snack/%E6%A1%83%E8%B1%86.png" alt="桃豆"></p><h3 id="武汉热干面"><a href="#武汉热干面" class="headerlink" title="武汉热干面"></a>武汉热干面</h3><p><img src="/images/snack/%E6%AD%A6%E6%B1%89%E7%83%AD%E5%B9%B2%E9%9D%A2.jpg" alt="武汉热干面"></p><h3 id="五彩绳"><a href="#五彩绳" class="headerlink" title="五彩绳"></a>五彩绳</h3><p><img src="/images/snack/%E4%BA%94%E5%BD%A9%E7%BB%B3.png" alt="五彩绳"></p><h3 id="无花果切丝"><a href="#无花果切丝" class="headerlink" title="无花果切丝"></a>无花果切丝</h3><p><img src="/images/snack/%E6%97%A0%E8%8A%B1%E6%9E%9C%E5%88%87%E4%B8%9D.png" alt="无花果切丝"></p><h3 id="旺仔小馒头"><a href="#旺仔小馒头" class="headerlink" title="旺仔小馒头"></a>旺仔小馒头</h3><p><img src="/images/snack/%E6%97%BA%E4%BB%94%E5%B0%8F%E9%A6%92%E5%A4%B4.png" alt="旺仔小馒头"></p><h3 id="喜之郎果冻"><a href="#喜之郎果冻" class="headerlink" title="喜之郎果冻"></a>喜之郎果冻</h3><p><img src="/images/snack/%E5%96%9C%E4%B9%8B%E9%83%8E%E6%9E%9C%E5%86%BB.jpg" alt="喜之郎果冻"></p><h3 id="香肠"><a href="#香肠" class="headerlink" title="香肠"></a>香肠</h3><p><img src="/images/snack/%E9%A6%99%E8%82%A0.png" alt="香肠"></p><h3 id="小石豆"><a href="#小石豆" class="headerlink" title="小石豆"></a>小石豆</h3><p><img src="/images/snack/%E5%B0%8F%E7%9F%B3%E8%B1%86.png" alt="小石豆"></p><h3 id="雪莲"><a href="#雪莲" class="headerlink" title="雪莲"></a>雪莲</h3><p><img src="/images/snack/%E9%9B%AA%E8%8E%B2.png" alt="雪莲"></p><h3 id="星球杯"><a href="#星球杯" class="headerlink" title="星球杯"></a>星球杯</h3><p><img src="/images/snack/%E6%98%9F%E7%90%83%E6%9D%AF.png" alt="星球杯"></p><h3 id="饮料"><a href="#饮料" class="headerlink" title="饮料"></a>饮料</h3><p><img src="/images/snack/%E9%A5%AE%E6%96%991.png" alt="营养快线"></p><p><img src="/images/snack/AD%E9%92%99%E5%A5%B6.png" alt="AD钙奶"></p><p><img src="/images/snack/%E7%88%BD%E6%AD%AA%E6%AD%AA.png" alt="爽歪歪"></p><h3 id="一根葱"><a href="#一根葱" class="headerlink" title="一根葱"></a>一根葱</h3><p>最喜欢吮手指的一集。</p><p><img src="/images/snack/%E4%B8%80%E6%A0%B9%E8%91%B1.jpg" alt="一根葱"></p><h3 id="渔趣"><a href="#渔趣" class="headerlink" title="渔趣"></a>渔趣</h3><p><img src="/images/snack/%E6%B8%94%E8%B6%A3.png" alt="渔趣"></p><h3 id="禛香肥牛"><a href="#禛香肥牛" class="headerlink" title="禛香肥牛"></a>禛香肥牛</h3><p><img src="/images/snack/%E7%A6%9B%E9%A6%99%E8%82%A5%E7%89%9B.jpg" alt="禛香肥牛"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>魔法原理</title>
      <link href="/2024/07/18/network/"/>
      <url>/2024/07/18/network/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="dca87c9225cbaaf53ac373e92b1e8185d122f7d82dea0f992f1fc208c2fce4ab">165d50f05814027fb7fe5e4ae8a088d8240dac90f2f2cc3be4b182594285803aa90d5e3a60155c3b6fba9885d0b0480e4b14e99fb58cc3fc86d1abc8fdfaf28a16bf4adb369703322d2d060caf92840c9016e7b38b376b495f06c7b14ebfc3505f09dadffc460d02b4850efa52690fd86848fedaa90cf0fa1f2a95070429c8af3bf7938ee0f636cf1173fc095484cda1f6dcab7d7483468a7d45f5ca8314b47b4b114b1f1aa484d51435241187fd696e883ce2922429554f06a4ba803d3f4f8c04bd139cf1af20887405c60f62695f0012368753a9e2b691bfeb43c2c41d2c01fb037d5678fdfacb382e22a59c11d219058c1d103b8463e0c29cbd79f70158a68221ee5804705b2c1140b46d30614750736f8a69d6163bc490d96f4823cb01b42195bdbba921c3bfcedab1ea36b11d66f45792c7e341fae1a1eb1354838344212404975aaa5f7660204d2789c226b0578bf4a0579d48ad85c5e82c101a7471214d4314ff85eabb09a6db8ccdbb4eb43454c372d192f53d44f9871b2090d70b57bf976e33675eb2b7647a8d2d580ef9cc60bc905421b5e5b1b5306637d69cdfe20e2ac26b536e0f6e70bfcf58272228230fe72c4b45806f10a7d8141f70d09f5a4fb54240f184ac2a550e166edfca45d700150add6a2b393fd3f4aee31a1b3dd2c45912effbaed4192ebca48e1216f1d7e124f30844a91f0d729fe2670a3fa4ed97a4369654c38f16dda6019e4ecbcefdd3d1bf2cb0a9d15b6ae73f29341d7632a25474c14468c18fcf82a2ea165bde3423377af31251bd7a785224ef6c003b36e40c369d9d96103d639e8d52ab613906244d9c956e6ab6ab505255b8b846225f9f43ee53dd093a1fd18c125a759b9f50e6a849db837c8182f306e49f2cc690026234a7dccfbc61ff4cdf97b5bd1b012a3e3cae53e32bdee716cd9902585f49ddf75965ea819e17b6bcaa43e6b8d93e7cca050613dc0fadbc853256307d894ffe06f8812c21098d37d5fff8f5e12e99fe1afad04d98b2d2bc664b46e0c83fe7cbea2cccba8f329ceff5d80d27441afe0ef488784537b6bb5bdcd81fe587d95fd0511efbfc1d107bf9a3bf076bf2297a05a7b3476d76dfce48b1df12c43540cb6908e9743ac4b41cccde949d979c87131b3e966a0f6bb8f7996a6e25dc872f69d951627bd0906bbef1af0db82d1123491a62e73f961a78d6353cc8327381c6f7addf844bd3c8c0d678fe63f35dbb92eacf7ec879f9d66126ad1b82ea6eb269ed40fa9cb727bcfe4fd8dc7e9bb16f7a42abb1102e74a98069c3da19e68ef9b7cc81c61c3475879952b925487583c89826e985e63277de1cbb07c9384089954743c8f8b63e80c7246f826f68fa070495558b42f43f277cff453a0a1ab51ff8a9524a21979838ed2bcd02cb47da03541e6dda58f0417d80a097dc0f2dfb33c140f10f3d6eaf97ddef04df96db9dc16e58f02709e3b84adb76d348f4df90c8b224d9bed10f31e6268651c7f15f719c2909a6bf6bc70f27298d64b9cf81a5fac9cbd78b86031a796b74c2eaaea56ec529b0eebe09dae9b19a027ea26f8515a97c04847fbb6de74f5c9603214cb00f41d7ab97c5b6265e7717528b300fcda4aef0e965e9002018fc425daefc510f8dd1ead8ee764797f06c2559eaf3839bae4db325dcb7c611f8d1368e7e562fdef0334f9b30760443004a8ef7f10e4b62e0a93a3cfe5309e9f70e8f5dc648dafc59f94718956cc978ffd6102d4d70c8d941a97c566f4dd6b71e80f615a13ee7c91b4e109929b9d974735e5649373b00684cf77393ec538e6ac8ca25542f059c1def99af9d1bf6e2312270a74c783e6d2b9d03d50ddb5fb13303a5e619f2cc1e3796b11f50eda60c83facec4859aacd4a358deacf6082dad7978bbd447d93074c2162d476e92bcd1b0489ff77d6563525196d222d010608f4a4439fa9055bce2539b01ed8b483551403fa76794ae8f44a0b30cbb327e265f3a78605b9bdecd982de6d37897ee095c08993d754fafc6f0b9b4b4ed83ffea96702ca3b76428d402dc655c0578414b83cdfd14bea484d06bf3ce9c934a847f6eaac1985ec0b0751c8d8289134931dd577a4ef5768e5e5eb24cc1133c0ed2c234b30e148af3c135c9ac4561430720e29eeb2f916d35e95b8c05b2abfb4dff9b04dd2b619826d9fc7c6ecaf7aa3baa05d998115a7147e15a9793659342b5d86ff2b61b708e2cd210473e5bae119da66fd8615ffefe4398cac4bd4d33ba25756c42fe423620ecd867ccb1e15b05d02eac9bb1c7634e1d8e68c539f4ca44fffa8be12483cb1c537e5385d038b65f778527553323766206f165a2abd79600fc187aba8d71884928ca32b93cc19e80e6618b98785a14efd4ff65a95064fdf545e0024e4b9d2dfcedf8f687ac0f592a7abc2db3560c48f364ee8d73aff19c3fc8dc242c01450de05ace77399f159f05a41d58494604424fe87abf4e706ac9bdc01a634f8599ac593dc981c13b082228a6443a82f9824997dd96393145390284585f2d28d5267a6d96c23c5b3f74a8a62989820cbf0ad6f8265329699140f6cbb6cb4edcbf2b95d73fb2798bc8844aa055bbf82a36247cf600299caed3e4fe59d1e4935cc18496410b7837b7c2c259f67df2cf5a822874228def162ab6f7226cba1c0554eb54ee7edb820fa7224d1f541fd587adc395685e53274c4dbc3b3277aadb223baf54e54cb38e91f58c9fa56406e8ba8274e9f5a3b83d88bf689f1e22ca9e62efe3f63f7fc434d5d9087b2686abced3ff27b5ddbae7a4c1296c8022cf2d28a871e49e9c83fc43dd127d530cce02297b79d61ac0de9962765f40229eec89219e423c1cc79cca73a1afea12e284de100719bccc1644f1b3668daf6438b7b924a4ff9fb1eef091df761a9fc66c5e4af7491727f763aed015353aa1e1e89f0bdf380d56acaf122ee5ff8c60876475e6a43602104d3b181c2593a5d37dbdcba3d1d1eb1f7eafe237dc5d6f2846e793aecee0982450bb9283317fe7551583835db18ac3727d47fcb14fadfbfcd3da6c2053b1bd425d903a730155c635bfb3dbb9212973772dead6d0394c0b15d70b519428208348c8c582f2e3eb41d633892a48e2629d3ce01ac096dc3dc9c80a367d4bf0f6a66bcb32748f6b9ce6355a71084f1f6f5c53e4ddd4dbdca7875574b7707d6daafd99251f35bdf396152b46c73b346cb20344a23e7b8ab90b17414beb7d6b0318f4f41c395cd23d8fd1e14e5c170eb8c5681845be01e25f3a1ad9b2e2ef35b9dbe3fe161d43994bd36c70d14012286f9336e9b412b963cb049dda8620f38423b5a28fcb71e61d3bca41806a1a95a8570a150cf9b716e0825d5c1d31f898bee5a5bca21461fe2c144a455ce351346d2036d1beeb942ecff56db240a18dc978e01efcc67e21e87e2337bb66e396984a80a6e7d5e11e1b50ff5fe1be21006d471c894b282793489b11d17bb362835bc748f28d59d40624dd91a2f059a2563c878f43ad3f60e80aac33980be429c5f2d4be295b8c36e9f1a0874deef85c6339ca746854ff59344a73fe85712dd2c0b29de19eedf6e6718b583c103f109185b4556f7e34a4ec9bbb81d17291e4b6ee505599512e7ee95c5eb8b067f14f37b20810e73238012630973f8d1229768ed010c4cfafedd59f399ab5ec09c8c0083c1dfd181b26535ec3fa3673cc9eb25170caeb3d6b28c41581f8272cb3280a89cfc8183f525bdd3e9aa472485c1f4ba4d82aaf1f86d5a4626a0b3f3f36330406b1aedde21e644b5e84542c1d85cdc8299cabe5288b2ac138f98d83ab71814363f70142d07c5d8955a5a6c2a27e0597be5015f2a29e9170e17cb46fec4b1bfc1aa149752bc3926de2cc13f4eb9e0da167dbc7b2d3a8ee44ea32fbf99d259d2f709d11fadade805b16813834c860dbf54656cc9eb4a4d8619031b3e2d8df149c2719474a1f454b6b4588095144f2db9caa7870e2cb024d78b3e781f1bd9f78d2f5f5e019a532b73c2bbb5e1d12d80865b6e8983371d5757602fcf62388c79e5f1f51ff568707bc63c7313b34ab567ffd4403e42b924ba1d34063910f31272336e0d43b546ee4cf3854e2beeb59ce60715e28f08b46269f6212a796c29b23adda3781bab3b317cf01359f313a1d43f285d93399cda1d9853918d0a84b6edb8e1a983177cb63d86298f028af632c13536d7525186337c22769abf50be4e0ed6165ea5fc64e8f2ad22c69d09993bf00c9947e8808c602255b49587b6e92dae24955b4bd248a243997f222c491f4954faa3e91ca3721bdaf32841ac65dbd461ccd002f2a4ea2e6b5a017b7b9f1c6da6d8e250664289675e08aca5304ac4253210c97b762ac83d322ea85784da433210f9dfe0bee44fa1459cd0011d523bc1ab907b43e9a3f38620ec75e29b7fe40ff744dfdff7b30a46a5af9c9ced8190ccdb546e087be8eb39fd0cd87e49824654f16ae9af4d6d1f11dd3bf5b1a6cab7cc631432b47fc0ddec8c1233eee0cde5271be1c46f334e7b05ebc25d31ac50c38bcaa57aff1a2af86bd99f9ab8c24ac700b9917c7a1487bc84015019c353373b1b9fcfdff381ef733ba37cce0f76001babc614920687435c09c63ae10f4e6f3a656c1df4364cf22f893a1f7bb765c8daa6c3734d1e90a5079b8a34b879385b7ec1b8da8b1772e3471c95cd5bbec9d4890afdaa4b6b1654a6defa9fee23216355bcd65296be1ae24609e8e27315c2eb8278431d775e5d552094ece2d9ce512c3a21b5d89f1dc13c5f18b67735c97a3b83c322c777896153b41b1f1b86c6c31bbb776ef6aacf3bb2b11d9ee0d15abf506543cc32e49ced73ff9b71546494fc0b2a46e5ca9f4915a3224d50212a19988751f804a73f7ae787b7eca924a2448a51616e389ca9beb6bbf98770e0f85abd736b46ecdd1135603a6f7f3b22f11fb6508cbf8526456246e3cd1d0ad8d1b85b07e6c1339674ffb54a99e6ee5576e49c0b4ed69777f3a104ac5eae1453cc1119d3207beb813cd01a74dbcdf5d261ce073b775f04e30150e4f145f62cc170c53a9879a4ff146c0916be3d43b6c132a51fe1546e86a25bb6a00c7a9c7cc18b48ba1d15252a7c58330061d0fd0292b5b27ee99787ae3b28f1da734744ea9101fc6fd41d62b58d81a451575b9611bd7f3684a4251d8bbd4491f9e39e19fd94e469b8efff211f118194b6463916f191ef7ff30265bc8844622c3c6504b09df7f557caca44f1ad52087b471866ebc1bf16cf4c256d6ed927aed45c7ff818404435cddcec7220eaeb0910fc31236ebf2807255a9cf15a0604e8cf5455007db49a26ec9c896f9d38db2f6ab950c8349b08afb11db167ee881d3d5ba7a55f7b2fd16a80032e33263b96374f53126f9ed8379fcaad9c4c7613c292eb0b2e4a565f358d232cf8120bcbe72a40d3e851f82d1af7107e3a7b834c85bd468be99ffb8651dd7e43a499f1ee3ff28ffca5704789e1b6f0f59e04b5c879ef058e00f69d0963d2cc6786976b08914061cd301b9123243e51fd975a0e6232b051231d066977a5b2e4765367abfee55f10f505bdf2b51e34642cb1d2ebe644742a6dd60d8c78159b3defeb08b9a4ef8b2a9b01e1318f323710beb94e6fe071da2f2cfca67d84d2f9740210f930f84e9bdffb7f9c92f314f44011001bd466a4c289299e8734376551e49dc141829f564aefb5b907e74a1ebcef4fc3c320a51e75cc18efda99533071e6ef5ee483468a938bea938f8f073391d67688bb5a7118d11bfab8d56a83233ff9b7c7180d4647f540d118f8863f81117176caa62731087c93177ab08f9ea1daf8ccf95cf4c41c4298d80aaacdf4fd03f67aeb89a0f3f830621ccd480b89a6c14001345324477d888683e2f6e9aabad31ff0a0ddfaf2245264cff3a90059fe4ad555dfabd2901f8ca9cb273bde0569a428a9ed6e71efd2b5521171ac42e71b9673369d428fd27b32645bcec01436034df9c6129ef12daa6e652278b7be6da9be12f734db449931709a89f069eb286b75748ed7ed597ee15d0e97ae6a233f1530036a0ebdc9580a131ad6073b78f293eb6bcd91295ccf8698b3814d884a0147ecc024cb911e46197dfdd1908610d3675677e60b4edc566e3aac10168858f3e8f30c15fbb24b234f9b152a4c07d45bf32556ed8989191989ae76ce3dda4abb82d6836efff5c58a5fb43866f65eacc052687f1e14c84e6320b55b0c421e07fe457e3226c25c9d57bdde766cc3ef538529b8ddb2efd01bcb5fc173cd54f7461ba347c5e2c791ca6f9d832d9373c884c4b72e85976a359b0b6a45e0bc475ccefc3f1309e17b2f1351ea9cae18d53ca870dd53b5cbd1900c871df5bba400b3bb2512344f5527e06e9684a49daab3f4a16e4575bc94cd2e0bec76bbeb8970625c0e7e682cd4266204c4961432dd69ebc303a7b527a500d2ccbeaa1f522e2d9782fff516b6f395c7eb02f8f3f45ed75330b8525a154f29d8ec7676b154af1242de7e696e8b62937e6930192188e0eb693284d35e4b2fec4da2cb9b62362148a3a08266c16e4232c78e0280e8016e8febf4931af9e7db2599e16b90063ad8f3caddd48bf42fc434bbd02e34bc378a79e1b7690b2f614a0cc947c39e0cc4635cedc3c45a7b67344158860cd53ac8259513fc903920eb5b1ab6a5ff3cda3fba14a4a14499bdc4ef7d6933ca28009160bb59bea413ab20f2ae3cf61aedc50684d738c5af6f69efcb6d590b64b51690fceef9127f39ddba61168a08472c4227d83c39fcb634831e92e956030ff03fc1659b66e9035035314f8ac4adda47e6cb4b7b8e9f420396766d4642c9dd48f03d55f3aa93ea954ff0e13556d681aef07ae93516acae2d1c8741ba6955fe593be49b5aa5a090ad661844b5932f0490a79712cd764865663806536b969072db8c3d00772665eaf4a62975bb13563730d57cbf04b574e813b8fb8d7bb4d04cc9c79fb6029a8693055f2d305af2f682e2dee90b4d07de0a0ee7a41c49cfccf447d3d7322736bcef48943e2d74f55513f22eff76a0d9da71ae8f22f5a2733de43c73bfa1392b996c1a0c9a0c603640acb8d722137de657bbeb9a2c9564c1934a2d13658a0d9087fdada97a449dedc7dd5f050e00b622394889b2b20588bb08a4bedbe89cbc7e31b175520f2d02add715114864bd876d211a7a21bebe01282c01b633003457ff242ce2d649423b6b91687ad1b67a1c133c400669595ad4ce9881ad278ab4b5a98264a9b359960d6e12401ae3d988e44a8f48ca83c8904e0cab6164f59d4bb5b7908900de21bfc470b782e2a89b22398bcb82a77a394611bb84bb8e0594954495ee2c5523f0056c1c7d78f693387b2ea03e5a5ecce5fd03cdf9a31eb880195b09c0d1a8d75588d011e3334f2177825ce2a364cd56770569d0e9750fbc73cde2c1c79b2eb5e115cde6a0a8a6531d891eb52d29ee7cbf4df001f1303163891fd23c4be2f85f963f5ddd8fc09bf38b4fcf61684aeb13bd60c505b9cc1951898783477738087b6c0ad081f903eb9ff650e16ba54a005a2461201cecbbcbb59a7a873f8f161484bc3bb8027f95822a3bdfad1b60678ea9396e2ec096a6cf4841a8f01f70414a02e4c626435ac47bab51467a64e3e4362d5197dbf7752abb0fa4391658eb5c5dff9be6d4fbfccfb079c3876dbfdca9cb89a866580bd68fd9d4c565f9847b57baf71ea02a14a1c12e1215bc943714e4de921de5471d9601ad80e7f854a0a913a60ee02b139d5930b16731b6592b17b475cf9ffe28f4d1958a98fd998f3a755bada0e6bff371b9c574cc6fda3cb459dd6648d2af0faefbadd1518d94823f39882e99190f6fb33390dbc780c390888eb335b8bd814b04154248a7b9574f377803e028b1615285a8eb981a788488398a522ce979b2791bc0b0f64b9b42d3ab37882a4dcbeaf8b402028ac2d5ab0a917ae977a914649a24f363155b9f26e74fb52ae6a72b7a036c545dd663f50ff51e42378e4a3f08facd0dda3693608364bf8087e1fb40aded9b9d1d1b98a3d2bb3f6c103428b6430c986901a8471d3fe97db079ae3cf9d1ad35f4c0b8951ff6fe142bb67c78f147dcb374f0e22c20bc4331cbb65de3197e2576773ad5a5304f9a918e5de0e9faa26a4382bcedbd661c89f0460f151680dec2a1e78861ee73f48047d39a4eb2aa69218df2a96ba32ee08a794e32f411dc43a86a4dc76dccd739e54771b82520a19f37197c8a092953d22070ec04777147abf49a189e57be5a67b0585f5b7e0d1e748baf8fdcdd3e731f08fcda18d8fb13857ecb45d9fb40ff967e4fa30d03f2d9e385ad46c94350127ceff1c70bc46d01c6d1974619b91baa175aab2e427a623ac79bb0f43f181edbae5bc9ea849a298a354bd7cb58d586067e947e9f59afa9b5e2d76e0ec0efacb4dc19aa76a4a981e54f9ca41df3e010229c53c4b1b75ce108fb61fcf39a7e6bfc4080a86e85ed27ed997def2d050d402cd238817d3f2b7c52c4606bc497a609a050c7efe420b080318549d136a3d7bbb0920c6580aaf44e0dddb215e1990e51b0f0fba60d478fdc8065230eda375dbeccc2c65813c152f38cec3238448a36b2a912ae32b8cc57a903e8185edb7be0226a5e0aed61b3501f0ffbaa81a7da4ea5e4f8f03dd756a5b1e2bd4b92bbbf4312a09b9736e25a0b7983d4a6819644cdb94b24cab134170d2ecee3af6c9da16c2e82492a8e6bb3e58f7791818d6923f9562fa9d3418016ac19a45abc4d94e391d4dea48314472979e8b7c63d6897b6ca58a340c99a35c985250cdd2ce009bd8cd70a51f65e757b3001cb862c982ca733c670ed81ab8356d23a3c47ef7315388c49e8b78ce9373c0a20432de459e926ecaf3fa1d72d2ad8548ec14b3924b65b4da1a2978ca47418520b93d5f56f22e8d7cf305dafe5d82f557deb4001f9bc5f305ae3493a451b63fa62f1be6cc1cc76b7b1c16a2edeb1444a8990a2bc2d2a40ee4f813bcba49ae4e2928f9a5bd0a4c4d308b9172aa3736974c0ba4a1cd95ceb0b97151c341637ab4b932efbb7416b132610585f3bd6e95049e405c3a7c65497b3bde6ea6ff41507e4e148e592835b98b1131cac91b8aa29494a2b9c42782e51646ba1237aca598de4269492e9f1eafc4194ba4978de55ddf525b82f48681e1b7279334f7d6aef120d8ec898d28b255ca88fa2801c3707aedf7de4eb680998fec3c16970ba3f5474de7d4b48b944cba01f47fe3c8825982820c5e564c3186f6b62f927669cb39963f9a646bec632c2b8982173ab77645a2292c8e8b35ae7a070ed32a12cc4631d1139556f09492b5b2db84baa8bdcc8610f47f82e92571af77e708d0a73b3fdf85554ce23ec9f11dad18258b9056bcd6ae14baba88cd1d3bb44a9df8ac0f31493436263cfb74d2407fa279777e1ef96ee52fa870637d2773881c9c722f6a479c00813eaabeb67f1abefd709764c7bc3aa28b1f94ae6ec1aac7d76b5a7baedd83f22014a56fb7ce3f4e38d672a1e1e882c87c07fdf5cef06ccc4a74227ee2d15234f964faa16e8c913d7ccf5b9f1e5a1230ef56f14dd196a86da13c5ab11995d734cfc813c019d53d59fae885c9e2c36aacaee030d4ac7923f73d9c6fc6a430fd539f255a23ac411b17c7e2ed5d1de94ddf9bd369cecbfbd85d6b2d463d22d48ffb96b7ced896133a27da06fa62b8f5ba34ecb74f441929e85843e6c83e19960c13c752296d828df20f5c8aa78417f0a0645339699a90453ac771473322e1e997645a6b4be46b80d9193d6cc617999117214acf74ab96821eca0523b933aa469ba042cc2735f2437166c3cadc9a563c7e75a1d839ebafca630cc42fb0240e8afb8801aed4975ab373c73181658bf869fe2c24ae6c7a29ef08d0bcf4b006e5573a9a4884f730869365774dc83e8aed54780aaa8ca3a42ffe553976946f886d1e02e5f1fa80bc83063d539da325c0a962210a33f7f20c17f55057607c93a7ef0733239bc025f9511a01435d6ef20bded06cb3f9499019b4e5dc256440ba325c2c18599e48303a83b8a5ff3250fc903cd33a0bb8ec81a1c9ec7d9309cdcf29a9ae0af8cb58276f0b9a0b3398368c88b3f8245fa1350096d5e0be9a510efbfa0c3806d2e88b8abf3177d3ecf6bf202d4ea785a9e8088bba485eec1327a082db5b48c5c1d69f05df4aca44d0d29be21834241ef32c62377b7799b04904c32af17206246f0d86ff2fc18f350120e2352ce80ff554124569ad465800fb5bef68a4c2405be429eb62db1e63036359f85de827c54a1fc790bb29ca207f0bcc674a9f04fbdfd24c167aa83ce6b6d20ec18bd72377c8054be016ef9c67500a7f9f589c2c89a189afaf29e4c906f271933ccb351c68dad4198c01c793d5a08cefa7f638d799c5e255e5d48deebac05d78408057bf2afcddca684f2565c35e3ca00dfbb784d23c541d76e882bf4173ed6885e21f34d3e4b07c1d4c79106306ddc8e03a5f761e43c28b55e9ed92be684a7fe63775d87145b1e5bace0115bd3e82ddf9b10c600f28b8093b86320ecf41b1b797e737206d252a50db2b05f49b470ae06240c40af2c4ab86ebf06f86600da9e7669ef99f29a40fb9ca10be1e9f7fc081654984e2f2c481e09b6c356859aa90ead8e6f4e7c338b85b6d7b91d3159452d79b71cfd1416b7952f0598c1ac64c59a6bbc4b8cca3d4c2937d049bff433e04da9237f5304811c2b578083999978d8dfa2ed0239dde0c787cd889eedc73df10c36128d541ec7c1b435c982d125c1258cdb2ff490d3dcfeb52c8828b60e7149d03747b1865a969bbd16a3df82f58ee6856ff6c68f22dbc09d29ac7d58f6a256330b9198122318006ffe495d185d31a4d34607bdfa834596fb96e5d62e3a91c5b8a5e1dbf2e8446e99b9c9a5c286274e1132b810b06b051a78cbd5d8aaa73d6515629f2d9e6faa29de0fd60a773ff14ba3df57445ba9ab2e1203aa658198becccd69f6ec1145a24d83fa7ab59201f4df3bf03cd2eb2ec96e128442df9062ab4f47c065a298d47cd8bbcc7060eca2c53bb098f58a284fb9fea5c2d06ea4e866062c0557d5051cbbf70eee81ca1d92d99e09238ba2696ddc10c7a88ff2afb502bdbbb2739bab377d675d13a0420041d25aec484fc2d2281ef84d49689974a84f4795154ac3199443283fac2794f863078d58750f11f014d337c0e6731f15e06c7af6c24037c0da35aa12902da844c70ba639160d29fe9eef906c5a39478d95182219ed099081c98df712484fc5e590d39ca1c1245cbd161a51ce6dbe317e54b52a86c2f4198fbab5e4761d6967e6a89103fd918d6d7a31c76afdb7169b1e8536b5ae413dfa0e12b8a54c69d8ba07cf9a773217eb3578e09e5ffcc7ee04ba93473ba913fd61c44a54b304b1d7436bd091fb0dc3b2970e3a7c3d0fc5214d8a04f7d43c7b8a979959add5e7a00b4f8157bc9903922cb924633fcc2e98861353752e06864196494591a2487cc79362f4943345a9461a81cd9519f92aefe4b0042ca823fdc7b7872f5a7733d848309ee936a858220ac1c970a96bf91e324fed7c796fe52351f43c020501ad28457384da59528f6f3440f25efdb97ae5a7e99ed650628efe8d7f4511d53436eaa0d8016d43c7c1990e6394d25ec9827de83b87a2340e623c5723f7d11cd879fcdc7a2bfb1f1d9d0a33a6288667335c138c590603496153ecbd25aaedde7b016fc2a84d9cef1e3936dbd9ea4873bb91af085ec66e67f84108ecefaa446dc71197afa1edd35bd1c3f607805381f8e0ce594c2c03ec1367e52acda8172186e27f3f99788ab62ccf80da1f1fb20812d9d7991392c976495e1004d7afbe278987de63bd0ba9ab5719e8be7859fdcea6f71997626257c89a3111776bdf9f38f68a56b8874aadabe61b4859b972638b60ccb5f4a367e3e91924419f0708f04ac7126088289e81b3bbffec34141abdb9a062740cf06b776fed8c196a72b9263c231d7fec5aa298d76478b0efb499618d4764a01d4caab5623ba2bbc3ec72b59e24e0812383dad9a59d64209ab8a242442efd9119a37f79edf14115332f4b1b2271cf96dd9838fd622dbe4a268f24aa9ca042f393ddc974f3ec169643e897ca3d933b5dcf70b31e4d9ecdb5f722a090d3e9cb38c23950c94e6221fee2b0341b2b233d7f71668b19eb36477d45115952599480e0f13f7dbe8012091f098d5c2a37cdafb12600fcc2a4ed0529b60a3fa173bb2c0908f21a16073ee1bbd5c59b2e0c92ba9b0e21c1c0da2c7d5183c8c67b642b51ae68f05ae87b9d3d783b7acd04dc0123753645ce1ad858a5dc103f92334c111740bfdfe20c1b5281c82c280539bc64e6581c92a9640c206541c1fffbefaa6ca743b9bfd8b610a73a543ba101d5625c08c2ee3221cd98e40a5e4d4e6184452a19933a2778f2a14d35a0b4df9ccf0a2833ef01a7d8dceff575053b8ab8f79d27dacf2c7377bbf99e4fe5b9bc3d562bd06fd60f63c9b69147be69d40345f2e50fd399baa33ad76a8fe7a2aef6ad774cfc20c07def6a09f556ac4fe0037402c454ba75093c2b29145acc169c1316b2b8492b30c6b820fbe66cfef126e3b5c4f1cfe7dac0a4f632d8f53148a2e42ee50cd945176e9f1ed7b5fba9e7c657845d009a78b41776ce818b86a324dd5d3524aa8afaca16fdfe87ff4e7d1640e93543cd10af2074567c3a7a1765b1709f24fdb6cc9a276c3cd8c74c09f73e1d4479627b967ab8b31cf8f1ee901ce10425cd6db7658930a5c0aa527cb4cb948aa4b2f278697f9ad73aae8e1ffc5ab8a6ae48f80dbe7073174ae90950efad1335720450e65a6142275ba5b629bd9e6fb4579fa11b6e0bcd5f7333c76d3be9a822b0f113cbc062e2b59e1b0ad1651fcddc1c87bf11a1092078714f28905b295e45b8550f196e3f57c95a060c9751e5482724512a3f827a37139182bd9f65e733071141efff9dd4fe9ac6b3b1211190785b2a11fb8b949bf3fdbef569e900abbd588ccd1a707848a8f20f9355d8ecd05a9890aa2a6a854a703490d5b54dd4df67a8e2a29995720d254d36f4a4ba473e7604fecf4a737574b38d1019237fbc3e3ce3d1fb61fa38eb31343912b3ce48baa32f3e174024855ca28076e2418ade31a60258fa03d570bf71ff121d4a2f004ce9164713cfde88e5b9dcac6b9503126af6c7b8e91042e03535f65b1c293a31eefdd33eac9f6b4f78f40e407eae5d08034b2adf4f52c7fb0b719cb3933de3b238ed75f9c89ca50e35fe6da4802a624ffb4e091eb96aecb2fd508a3fcce93d45baa68123e1a2022f5d81aca956123fb57804279ab5bf63866aea3406ae3124d41c68a1eed27b33c5d23695cc3ffd300950504c419c16e346ac6c8d4d9136acfaa2a3c4b8c5d93eb253cb4642e4d0d273d95586643694d036ab05b3429fc01f2a582d1cf1931c4a304b60e1ed9e0e722cb391bef625e235c285b3997e8e67fa1567e012661f90d2e080a4e0cd6f0b8b8d08c5e2181b6941e637fa22b81bc0dec03750757d5d252d5382ad7b56bdf1ace6f5a0b70117fd69c19380ae6d4669dfa7453bcdd5d87da6b02baa779a533790a83c03d92a55177c98b0bc0c26e51a6b5f2ed4b614e2cccca2c4cfdf24d78e4aa93c48cd3ce420ecaa841ba40b25c634247ecf1f5df89b2865fdb1cc29d09a8d327e8f8f61325fa86bb1e3513e0270f5adafd8f8e289e09e0a1efeab24363096ab0ea11eacd2facbade403f930721cf78ca929a5823779cee77d6ff3d770bcafe27483edf45dac2bda23d32bbea33375636871a7520fd9affc6eba9c552a865b7aed1c2dbe49a27f74f942b31f6a8c4561c71560a218bfc82e6f98cce27548f9843bd7c03e562ce1c68cb0b0c8dfc02145c90f1c0ac49659f9b5b90570d1eefb292a817cb33aa8e3d411e12e58435f41293f6a3dba1caf74d9d49c30421b5f3de99daf8c01320529d500ef5c6741e75d38e77897e3b90549071addaef9d5c8d1a54ae6dbfd43502083a78b01b059573d91d037dbba3ec86cdb943e2e8b0fbc61b6be8e1514536fce8d57a06c8c81389ef3d22b988a1fbbfc112e7debb79aa57d24b211c07d7c342bf91aa5f8f86c8db65cc9ac946fd8b44938e4dc95982cdcc125ae574c10602c481508cf93714f1d1fe74e5a9666238cb70ae4f13f86ba46d723d0992deed60b6d7b4440f405e1bb60f89cefbedeb968e0d086ede0b6be52b49bacad1762ccea8a8e052873132ed762fde488a445e95b24e559958a9944c8e7e5155cba13ec5caa4cc34cd95de8305ce10e95399b13a29996d033edccaea9b144f8e4ae9a5002cc93caacb068a59bbd4f80bfefb3f06edde10c4f52e4923f9c7c70abc28c783cf36f5771cf92abf7fadd0d76dfd963c54488cdf720d313fea086283fb1460579991491cc1da4527f4aae060380a3ce3120480b94226d7500df3c995b7d9ec55844d90ff5fa713466a7fdc07983cf5a30207707579c3f340011222a293495590eb2d9979eaa3c6689517ad7be24d3176110f62cf7c8dede7a5bee235cae4076d85cc9db953121a05b9a55ccd77e12422f04548f1991c36531edd171562759987c174b419728fbb590b9c031cf5c53633144f4b417e6478139eb56a1b7d81c49c50fffa816870b6f0603499e7acafc168164ecb928be7f02559f368ca7a4874a6bdae4822eba81adeb2c1070f258e1a4fd03182da44c437364a2029fc2dfd63914d20d2336c1fd3ea52c747a3dac424ec0b8037d4953b4f676f90a4e8992ab807ff58f21640883d687a5c39f0c37429d368a65939cfd60c86a7ee837e20c0e3bdbddfb31a80f1d84c8a3791dc5a4635e5bd64769f888a4d277c1a777b0601af6114bfca5efdc934dfb38418be69bd284bbab1a765baec06c665407fd6a8003246a4586b449155601d3b00c9209b01061cd80679ccb4c1b326599c284129e3ad7404936aa2cbcb3c805ece8ea47bf43591106122c7102c6fee769b84ddb35da8153a71c0fb5d505979a72f1cdf0d73b753e4d956393028d3f6490fcdb4c30a2353a2dcba191850f7c6211804218b1ebc32900c5edd85f7499c6dc52471f6e6744877dccd806945bed35c7d04d0348ba79ed8e575f5a297166133b7eb30dadda57e81241764f33ee3fdc7ca8c72c5c5c6ac8a70d76ebc2106e71c53673364081f18d0d035fd57722c89cd73c7402a8119c78c6a72f166d5a863d737e6a744ab2d0bba2017d7027c1cfd927fc6701ae088c1dc0656be73eae3ecca21538c48fe29e80801e3bcadbb05a843920fb2e8fd1e971408922caa9805eede96745aff71c360ea2e53aa6ab4fd2634c7793d63da5e5ae1ccdb1bf47d0c6e68bdfd27be04cb130bcb71c50476757fac1cf8722bf0ebe17af2257519ee058e4deeb80e40a456c49b97cd1acebb8f9ad95dbc18c4f0d0f07659ddcf1bb982fa1857f8b2e98db8deaa68dca0846839bf472afd59d9a11dab01dff72d6a5794e89581dc9aed6ae52e657230993cef856928b8d24b2dc7d64e302d7374c9c9fbc215d564c13d9f30d82c3d067556a5e091497b7596123e9b942ba8a07e58b3d23c5f89b3b4a7af74bfe5dbe33392514adfceffa8095813b14872c6e366d99e3bf0e5ab655453d415f1f0aefecf3bb64c5f82899ddcbc0ad89c38cbc3e8667ea27e1698c1f83401624fed2411a6490b59f320210e8605f04c08fc6382652787636d2b79870fda9ee1f527c881b88a408b62302ae0dcee03ebfc58ee2448246e6a585333f01f6d087b6b907c21fa0192c5b69a5bbb59f30d8f53f64a092e9f0b2b27ac2810954f1f164443f1cd6fae8e710fefb47f399e6019399e733655036a95a1ac563575331e1bcd0360e13aa9298558a4d85dc1f7a97b8044f34e8fe926225adf10b0b5f58a9921cc69b4fcd232a4fcff824433c2a793470e328f5770fb1c8380d4745e65428b93fb1ab62b7f6153690f5faa380b560c61f9d859af59c9f192b59d6533ffbd90e8fe78e0b9f4419c1c2885a3ca5cccc8af1525cd7813808b51462a1a2e50c4e5cd2c6bd35ff3d449ac92edaacf75ff9cc22cd1893f8d5557783d5455a398000322d36565840902730fce62dc694ee841e15143129fef98e94bb0154ecdc33d2e6455e92a1b259c207cc6643d3f325a11e2f3bc09afe026b21ff75ee33369ce08e271be20693d51dc1c4b0501e794a9a380e185fd7013b48f95417f21513b071e1b0a5efd6c48adb8f28f94a924c149a207e3431880547ba3e0ad943f4e03755999d01186c283419616ca4aab2dbbc38cb9273faad583861305a5ad6ae7d19b9ff0c5c3842ca55d5b688d1fde126cf29c087584baf77eb21a3b842a28dd08b38ace01c4c18f66c03a0f5ab98fb450c61d57b5cf2862703e5499a1db36de1da2fdfb1a20af23fdb860d8a4cf31ae1b0187b628a07ca568df5c7de0db345b351cf3ec672a88b1fb047057367395c511d558d3ded750d7659600a2849d2a2cdb6acb30e775b603f0750bf8bb06479b3da875724a2ed2d99842f6d4071042d183519d4b4a650acf0dc76f31cee5b1f91428f34849d90accbfba29f874c86d07e89fba8482972c137f2255792c605ed5bb13512bd6452532fee8320f2bc5a6734f5a6d29e66ed9289f3000a404259192a929430bc959bb61f2b820f0e450e7f2965a0972f2508290ede0859edebcf23dd1bd7e79071ffd011ef0d03a5ee761b961c2164bdb1ee125c848a51e8cdd0025e36cb231688eefc0d7254ded7899cc8e8bc53d4610152a722f2e8cae061d2ab16f4e22d1274b1f535934731cea2e633dae5f3fca4115fd109ccfe294a6e87242312f8bc0cad915998565d86033577c2449c8fff3d916de1174543e1a9bd2fe8299cd5ab8b00746d9a6e9c070a3819820d01b64eaff753602adfb4c1e92381143be5114fbdd320781d49a147f954f845e44a8042198b335d1abe8efe5b5ae862e5af73ab546ff9c9fbb7f125eea34fb004e3231df16f01b600b199928759643e96a6c45565a9b0d60ce9d9310c3a73d76539ef4cae98e50bfce196782902d0c26f748cd699ca63c707d0c6bd0e594ab530b218a624e7e0cb1a71d049efd6c089760f28d573c397a2ea18d047f6184faf8c06d2f3f951346f57ec6c23da6c4cb2d02b3ce0b2413120952dbb1ade8200bba3746f98c2849055e37d7aac333006f2936d6a72fb404df498a40ffeee736050f19f74069f8b2b822227c38d96be58f496e9fd8e70f60bc7bddaec22e2436942ee3e5b0688399fff74f599ced8d588f26c3b3a94cbd47f10adad3609738fdeeadf615cd3b211fff2262e5101ac98fbfe5ea7937c6c3f5fdc608c94c4cd751b8750c6ec5ee0d740fc09c6b7299ab2c91b3c3d27df9bbe5659d779ac8957d41c8e4d1be740841638044473d5ae1bdca6d682c82339d0636aa0cace9b6307ad470c8005e2944d712b328a9ea02e81b736d28d7d9e2560f554a6ef74beaba45d948b55e1b180f585aa9cd332ae34e1fd8a0e1810c503de25301282b8f9bfbc5a5b554b092e0a5f33fdbd684dc1052eff75d66755b49b9455de0c91dee21ff5b6cca9d4442d4ff9bd75daa7d0149d1c86e46beabaf343e52af3ffeb17c59bc3d656ce85d805b4319e45ab6b3cf85bd327beb167084ba766086ae544a5aa9deeb367b2a985b1be9f4adf0eb6ce163a3b29f92433a7a76a859f8ecd4d35082f6da622102c96dbf6041ab1345579d8dd958afc13da718e3a4ce1883d3f166a6e0eb8df422fc424c7d00f5fddafb1a6b16721cec8235bf9d733e8f00e0fdb19fe5d98b5f2a111132dd44d7cbcec114b895a928ca88800a4fe6e6e6e6c32acd739c9e9857cbc2518f43b99adfff566b60a3c9979b053943d1d6f5733d26e27f5b74e6aaadc702ad751eb94d6bf4aabc4c933a29f9920fad81118eee2d2ee98114535959a5e7869faf8281722e7ea6f777170902956e900669ceff2f9ce14c6a9f93a484e5d9671b78a2966144d58928378c7fb94b0ce9555b777ff9253f4000803fd346f550aebb63eaea8fa7284b05ce390bffe2ca441851c367f0aa8bf4a0bef8db224e93f65c1b4568e4f79b30aaf4d5f70e83b2da21afdd8ebf1f3b9de584c8b86d1a36f5cb8eac2f42222c620afd4f819288db56aa93e9b23b0d5a25c2dbfd9247548ec53cb76f66e18a992b7ea0fc571866f94694f6c76f5feb80258f48a9ef109a281e85a3dae97385996f2637e8809308ef19fbf4d8a74937dc3f733919991305022ff98177a88ae6878e234a14de51ddd41ce442470e657f7146a449d2ec32f7c91685348d2951235df088a87694122902324d08c4a639e1d1f77f483c0c061846e63a56c2adb44a3cf09b061c8d4e370327ef68e05ce053c40e29da49e5aa61a964c8b76086751f72d2f267ee560c58412d7877618537e016e99e7466ab8d352c6936220927c8ab088cedaea9a8084f8e5e160e263bc90741d218d4f2c2b7177fca1551e208131d01dc7d31272b52dec5b477069673c882dc28b129d868d23420e0b8e01c1dd4e2f2b0c765b5b337590bda38ae8bcef97dabb96fa3501d34c9963a8fede40791dfac8ce56cae3457d109be85adc74ed001a3467e64d57ea8071001e41527b7fede4f1777a296a606582149b7e42426624f187ad652a4ff81e71515863bff130b9f4473550468967bbc52a447dab165fc792d685cedd2d8d87d52fad5b1aa0a0b61e4cb9ac289b3ac150de8ff97eb6a9d388ce8c81e6410a62261f8d447ffa4f5a10e8aaa449edeea9fc8c241c1575bafb276132df46d89735bad00084a9f21d8809b6defbfedb16f75312a14de59048ec2b8fd82a08f59e746c8e042a29a5db5843388ef6a63ba2b300ee174aa70fa6f4968a3b5ae65b9dd10a276c8f2b9e259fca062dc1f262a1fc422524af310fb086cfadaf3fbbb0ef6ba03966cbc55d7af958f8fed72ca35e6b626e0b496d47c500ce468cf1c64add0c2818f3ad2f51dfa41946fa78bfee2e9adbd3ae52b1525257f1508954f396632e0724453b5adb236bb77303e25f9d5050c55f4fc70265851708f33490deaf671486c6754e090946446a20473ec24bf8c56dcdd9c0c9ecb102c968d0e5b2335f37a95685efdcb8af072e02ddb5aaace9aa1b571c2fe8ff11b46fa2bd1c1ca3cb77279f636ef3a2be468f52a062e5d5740ea259ff1a76c976be83ccdf45a206ba79fd96819f6a6a54adb48af57db5e341d0f5370a88bfc827dd935a7186c6577240d012e1130b0db3496fbf6f497881f4d2f3ec34af0290cac3b9a4c6b69b4fe3cae1cd590617b9df66c3aacfc2ad8c4760a843108222e1de820569b940ca2f2ed48a9845709e171b4b86d5ff6e80ba9f44c5c35eddb69ad3fb45d5c76690fa514c2c707067cf7700e98dbe075027adb2cd18ccb429284c256043f284dbb9a99af3d3a82743f86d7061a89d8588df6e19d91e34bee78c41f135f78511d9f596af9be1ee3a42ff856039ef46cce52185924d7568fcc2a331fc5f9755cb3db34b773cf86abd2f8bdbef4e48c99ad276cdcb20938a98050bc7bfa661171913ebd14ad833371d31a0602b15507971430337765818ba8c1aab21b589624e350efec20f28c6f070a2433b8a18d568ebf38653d6046b311f282207bef250c0e5b12c80c4e01a8f3a9648fc3f5503772944fc2a4cfbf871601761b4ef904f07c658b6ffde15b92fcb7e336d522848f94b750a124981ca3021cd6b61731efa87d57c99e82aa2a502294f7c87771caa3898e0dfbcb769874e0e6725b220dec2a358484403c72571286726899c6789058673d8461f3205bbfba8550775a7c2a8531b6c44a6937c9a7af29858d233771ca935a19d6219572c8dc50c3887845fd0a296f293d0abab0f2af1a0fc592c7309bb493e3ce89097f271d05b32a3743c333e075611ca26d8d7633759f1bb8239853b45db0cc746a06869102e73e93fd0c49833cb2152251d06c02f938b6f9e5b906a03fe38b0c355fca082cf9ffd1d135adae4f52965ddd60bf3e0b7d6bf377b30ad5c2a6ea56a9c42f00782941ce1886b765eb59e5a4fecbcbb9ca241876bdeda652fb808beea3ee48cad4a125d337c88bef113a41d58e142db63572689c7fab19dd767becb1440b54e19073c91b3d552ac428b9977d550e07c979542a45dc19aba329d374898141b5e60997449caa03c59b1ab18e8234c3441ea668994a61c9eda9abf20c2fac70c32941bef9afedefb9df1265d40f953f50887258fb839c3b5a4a7fa532a142c90155ec2b46c755504ed65f6e865c503efdc57126d83dd6624d4e26c49752675e07190e29a5012bd2d927fdd6f8f1255e2b045c87df4c5a7c311a001672ff800036fcb616e1caa9a351ada79c608dd313ec81f5a77b0a6087ce9efa98df582812035f31dff71015d9d34b513eee88548b0191dd5e605270b9ede03bbc38548380a262cdb7fc470e112a22589510d6f302b433f0a71259e80cd6fb976b0fe3a19cc060041c49b182f26e4307862daec3621f67d04dd12cd1a7ff8566dcc13215e7e2ce9f4dbd832861e5ff77dcbde8db69e3c3514dff660d1cebcad1efeb8844769a51058bb49acea476f66472a8b79fa2f871644bdb88650fe0af804c7f9121a3b78074c88d43a2a29dbf1bbaaea588ad71785cbcdfdef9655dc44b2524c8990d1475d03ad277cc311c8cc742f677f1c770344fc08fcd24598d71b4745749da01a469aa58c8cdaba3d4e2bbfa2fb3beefa0436c2f96ea9eadfccfc34d4d35b90edbd7bd5b56eafa544f5b764baf8e6482183f371cae2d29e1982fca22f4421f9fd2221da03219a735579c6efd03a2f4fe9ab5e8b5d29715e6c233b2135e3213037d0267de6d9182f78f868ba485954c5b35d058ee8c87727a04448d7392fcc35b1461ae58adbdba41fdbc2d1cb539c7b164b859925c7eb27389585ad73bc32ac9fff0d129b17a037fa96f1509d19778f02c361b75bfb99a54d23c4cd1b57ab00ffd53ce4ea8f9cf472ce802dbd218f36cd865535af83207e565c9c229d6c00c747fd92bb7847a2b96462891ea887e115b511bb08e23f900c86bf65611b82791672115b5bcf0d5b8622246c5a029963acb4a96d590df4613360ba3cc207565865272473726bdd5f95c7b3909ef8e15461906c8b6d7559fe5ce441bd54b7ce5f6d6f4fb9e543fc2cfcfd8d09b823e99038d10725d00b67d206559ca0755bc74de0a3136a95392215b961a7eed6fda3e327cf4f8a180fec9f5e21733876bf621de7988b92af965eedc6bda8f872995ec19ce001fd75dcb14cad2fd6b90ba4bf7bd5f0a552bb6fc95d0b9aa51809e898e9dc8f08749b5205bcd126525402d0d262165f2b5d6a70c01a48bf51e7b7067e3f51c16ed49ac2c768eb74a235a7bb592011e082279ee2688beb4b7910de20b289203c24e919dccdde783da78522877bb6b7b51a59e257c798c68db61e126190aa3ca048d40f6bf7c3582e77c44546ef0881ab1552eaa701a5e0fc497f9c4e70f9235e99a578cf8e197a69132a6453cce8e9a37a300cbd12e5f3efd5b952338ad1bcc84eec1702006c45489ad6f21ac8dfe2b52f54bc199262385334c5cf47ce1716494074c5d0859ba15eeb80cf6094bc45568162bd5997c72d4af81d8933c359213f2b6e222c51dba7efb5d15982e5d33a88d9aaf5759b113e5ac2ebd716d326f6b5253ea8ed4f54104c89b7fe293937ae1c5c710c31f76a33457f6ee89576b9ba4980118712b27f025f68c5eba6a82e2ed3a50d75ec710e4462c81f6b44dd8f8ce798f78f41d7eeca97c4b37df319891dba24fc5685f54b4c06953e74267ccb3d9ad92b036c135ec7ee54cf214acb35195419540de1780fa37b8a4197611e01cf103b3541daca919afceef33816c42ee02dcc101780031dcdf1e7d165b5ad9c61a8b27a3982c97b07c357fea511c99afd6547ab9765971571cd8e435cda9ac3c3608d8b51f08e1f7538387a31ae61a9d8565a1f30d600d9fc4ebcf618007e555c04766a137e64e730ef0608efa61780b8444596184c31d2813c741c9b26e02c49e6168ef23a33b8209aef4a155939bba8aad26e12cfcd60109fac229dc16ebaa4c07719492a538e8fb56dc17c8c6c4d4a8eb71919273780e5dea82a742cb8da436cbeac4ab2aa1cfdcae8c97967a5b2cbaaa870364457f2999d69197295f7122b2dc34bc525befe08ff06bf0106f8d5b34dd1cee8f097680ae22169e0fe05f68a6ffe30eeaec32579635c071eb9551260e9966052afd149ee55f1e407aec755a126471d89478ca04caaa7700b7403a03a635b57132de2b48bef5ebc390047cbb826e7ec4b0d78ac0943ee2d0a65fcc4972f142135ef428777ac175fd6037dbc8ddddec2facdacefe252248673690063d4308292c8eb4b4151768576067a0fd051ee6792f7ec1a1cf292b8642e003b754efc7a3795d77e0c738c43ffaf2eb25a7483f8cd303f016525c8f27ade0455b36e563ae7e6e77da5b71fbc9786e59fb94c393a01e98b3eb202cc8c8e65d540da5209e41b7cbc8996e7812159d9b6960e29f642d9896b5935d14ec72fa7fe86439c4be72784b17bd1c178baf633f93a789c3fc30e61c6f76b9c47fbf35c65b72febac7f8b2a87d3e16b8b0beaa656c892bd9aa06afacdf975c2d0d9f76a4985491051c8ae0062f6d6948e0a24e234cd93d0c866a34d0044f154dd43685</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Word排版——从制作一份期末试卷给同学模考开始</title>
      <link href="/2024/07/11/word/"/>
      <url>/2024/07/11/word/</url>
      
        <content type="html"><![CDATA[<h1 id="前情回顾"><a href="#前情回顾" class="headerlink" title="前情回顾"></a>前情回顾</h1><p>在期末考前，我受启发于上学期某同学的伪造期末试卷，这学期也制作了一份C++的仿真期末试卷，部分页面如下：</p><p><img src="/images/word/1.png" alt="期末卷1"><br><img src="/images/word/2.png" alt="期末卷2"></p><p>其实还可以再加上页码，发给同学的时候再给个文档加密，那样就更加惟妙惟肖，不过这样也已经可以以假乱真，收获到一批小问号和“不是哥们”。</p><p>能获得如此效果，首先是因为 Word 排版的比较好，保证第一眼不会被识破；其次是因为考点真的基本上全覆盖，能让人做完试卷还有将信将疑，回味无穷的效果。</p><p>所以我们接下来介绍的是如何进行如此高仿真的 Word 排版。（虽然制作这份试卷用不到多少内容）</p><hr><h1 id="我的Word-排版学习"><a href="#我的Word-排版学习" class="headerlink" title="我的Word 排版学习"></a>我的Word 排版学习</h1><p>首先是一个B站视频：<br><a href="https://www.bilibili.com/video/BV1t64y1x7GA/?share_source=copy_web">【Word教程 | 拜托三连了！全B站最用心（没有之一）的Word免费课程！OFFICE&#x2F;WPS&#x2F;办公软件&#x2F;排版&#x2F;论文&#x2F;毕业&#x2F;文档&#x2F;行政&#x2F;打印&#x2F;标书&#x2F;报告&#x2F;方案】</a></p><p>就平常使用，写写论文报告，推荐第2、3、15集，搭配 global speed 插件食用更佳，快捷键 <code>s</code> 和 <code>d</code> 反复切换视频速度，快速了解基本 Word 操作。</p><p><img src="/images/word/3.png" alt="插件"></p><p>然后是一个B站视频（通过 csdiy.wiki 指路发现）：</p><p><a href="https://www.bilibili.com/video/BV1YQ4y1M73G/?share_source=copy_web&vd_source=4e6e3d05c54fbafa49b2a00b5cc81815">【Word论文排版教程】</a></p><p>指路教程地址：<a href="https://csdiy.wiki/%E5%BF%85%E5%AD%A6%E5%B7%A5%E5%85%B7/thesis/">毕业论文 - CS自学指南 (csdiy.wiki)</a></p><p>最后是一个查看快捷键的视频（我认为想要快速了解一个软件有什么功能，通过查看它的快捷键手册是一个非常好的途径，既可以全面了解它的功能，又可以学会迅速使用它的方法）：</p><p>【如何查看并设置word中的快捷键】 <a href="https://www.bilibili.com/video/BV1ja411d7y6/?share_source=copy_web&vd_source=4e6e3d05c54fbafa49b2a00b5cc81815">https://www.bilibili.com/video/BV1ja411d7y6/?share_source=copy_web&amp;vd_source=4e6e3d05c54fbafa49b2a00b5cc81815</a></p><hr><h1 id="一些-Word-操作回顾"><a href="#一些-Word-操作回顾" class="headerlink" title="一些 Word 操作回顾"></a>一些 Word 操作回顾</h1><p>首先是放弃 WPS 作为默认应用:</p><p><img src="/images/word/4.png" alt="默认应用"></p><p>印象比较深刻的（杂乱的回忆）：</p><ul><li><p>按住 <code>alt</code> 键，进行矩形框选中；</p></li><li><p>文档属性设置；</p></li><li><p>自动编号，解决删除一个编号，下面编号不变或者都变的问题；</p></li><li><p>多级列表的设置；</p></li><li><p>首行缩进，悬挂缩进，缩进与标尺的结合应用；</p></li><li><p><code>Fn+F4</code> 重复上一次操作；</p></li><li><p><code>Fn+F12</code> 另存文件；</p></li><li><p><code>ctrl+q</code> 清除格式或者左对齐</p></li><li><p>保护文档（原来 c 和 c++ 报告中黄色的那块区域是特选出来可供编辑的区域）；</p></li></ul><hr><p>2024-10-28</p><p>回看</p><p>在习惯了 VS Code 和 vim 之后，深受他们的设计哲学启发。</p><p>在此之后回看 Word 学习，认为还是直接看着他的界面一个图标一个图标玩过去效率最高。</p><p>在了解到 Word 中的一些概念后，所有的操作后面的原理就非常清楚了。</p><p>最基础的是<strong>字体</strong>，然后由小到大是<strong>段落</strong>，<strong>样式</strong>，<strong>文档格式</strong>。</p><p>所有的操作都基于这几个概念。</p><p>使用 ai 完成一份作业的流程应该是：</p><ol><li>提示词工程</li><li>清除格式（3种复制粘贴的快捷键）</li><li>样式设计</li><li>多页面视图</li><li>格式刷</li><li>标尺（有大用），段落微调（相同格式段落之间无间距）</li><li>备份文件，从云端到本地</li></ol><p>在这之前，自定义了功能区，减少了很多不用的东西。侧边可以开启粘贴板，导航栏。</p><p>另外发现有 python 的自动化办公</p><p><a href="https://python-docx.readthedocs.io/en/latest/">python-docx</a></p><p><a href="https://hellowac.github.io/docx-doc-zh/tutorial.html">中文文档</a></p><p>好吧，暂且也没用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2024/07/07/blog/"/>
      <url>/2024/07/07/blog/</url>
      
        <content type="html"><![CDATA[<blockquote><p>提取了整篇文章中的有用教程<br><a href="https://lctt.github.io/wiki/tutorials/copywriting.html">中文文案排版指北（LCTT改）</a></p><p><a href="https://markdown.com.cn/basic-syntax/">markdown 语法教程</a></p></blockquote><h2 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h2><h3 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h3><p>我看到的第一篇博客，是来自于一个学姐。 <a href="https://www.dilettante258.cyou/">浅尝辄止 - Dilettante258 | Home</a></p><p>简约美观的页面，奇怪的cyou域名，和内容中对于强化学习的热爱，给了我眼前一亮的感觉。</p><p>之后在计算机的学习过程中，我逐步了解到阮一峰，廖雪峰等知名ip，还有一些页面让我很来电的博客。 <a href="https://fangkaipeng.com/?tag=cs231n">CS231n – 码途拾遗 (fangkaipeng.com)</a></p><p>其中，我现在最喜欢看的还得数之前一起进行开发过的朋友的博客，他的博客尤为触动我心。 <a href="https://mx-pai.github.io/">Max (mx-pai.github.io)</a></p><p>他的一些关于写博客的思想和我有些不谋而合。</p><h3 id="记录博客目的"><a href="#记录博客目的" class="headerlink" title="记录博客目的"></a>记录博客目的</h3><ol><li>记录自己的学习历程和经验总结，分享自己的心得体会，帮助他人。</li><li>记录自己的一些 toy project 的实现过程，方便自己以后遗忘时快速复现。</li><li>比较好玩，可以和朋友一起愉快的感受博客搭建和维护的乐趣。</li></ol><h3 id="主要教程"><a href="#主要教程" class="headerlink" title="主要教程"></a>主要教程</h3><p><a href="https://www.bilibili.com/video/BV1kR4y1n7zZ/?share_source=copy_web&vd_source=4e6e3d05c54fbafa49b2a00b5cc81815">【方草地公开课】搭建第一个个人博客</a></p><div class="note warning flat"><p>视频中淘宝的源已经过期，命令可更换为 <code>npm config set registry http://registry.npmmirror.com</code><br>node 官网也更新了，和视频中的界面不一样，需要注意。</p></div><p><a href="https://blog.csdn.net/yaorongke/article/details/119089190">GitHub Pages + Hexo搭建个人博客网站，史上最全教程_hexo博客-CSDN博客</a></p><p>主题配置：<br><a href="https://hexo.io/zh-cn/docs/">hexo 官网</a><br><a href="https://www.bilibili.com/video/BV1Ko4y1S7mv/?share_source=copy_web&vd_source=4e6e3d05c54fbafa49b2a00b5cc81815">使用Hexo搭建个人博客手摸手教学(10)|ButterFly主题配置一</a><br><a href="https://zxblog.eu.org/posts/5a75/#%E6%96%B0%E6%89%8B%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2">2024全教程</a></p><h3 id="主要问题"><a href="#主要问题" class="headerlink" title="主要问题"></a>主要问题</h3><h4 id="图片路径"><a href="#图片路径" class="headerlink" title="图片路径"></a>图片路径</h4><p>这是我在搭建博客时花时间最长的地方，因为图片路径问题导致图片加载不出来。相关资料最终指向官网。<br>正确的路径：<br><img src="/images/blog/image.png"><br>为什么我花了那么长时间呢，因为正确的路径在本地是预览不出来的，就像上图中一样。而我之前错误的路径一直是能够在本地预览成功的状态。</p><div class="note warning flat"><p>由于<code>hexo-asset-image</code>插件更新出现的新问题：<code>hexo-asset-image</code>在Hexo 5及更高版本中已失效。<br>对我来说没有用的解决方法: 卸载原插件，使用<code>cnpm install--save hexo-asset-img</code>安装新的插件，并调整图片引用格式为<code>![alt](文章名/图片名.png)</code>。<br>我的最终解决方案：在images文件夹里新建各篇博客的对应文件夹，并将图片放入对应文件夹，然后在md文件中引用时使用<code>![alt](images/文章名/图片名.png)</code>格式。所以，那俩插件没一个有用的。</p></div><h4 id="css样式文件丢失"><a href="#css样式文件丢失" class="headerlink" title="css样式文件丢失"></a>css样式文件丢失</h4><p>这是朋友在搭建博客时出现的问题:<br><img src="/images/blog/aurora0x27.png"><br>本地预览成功，而部署到 Github Pages 上后，就会看到上面的问题。<br>解决方法：<br><img src="/images/blog/bug3.png"><br>添加 root 字段即可。<br>但是我在搭建博客的过程中没有这个字段照样是成功的。<br>原因不明。</p><h4 id="后期美化"><a href="#后期美化" class="headerlink" title="后期美化"></a>后期美化</h4><p><a href="https://butterfly.zhheo.com/create.html">官方美化教程</a><br><a href="https://akilar.top/posts/57291286/">友链</a><br><a href="https://moonshuo.cn/posts/43310.html">美化</a><br><a href="https://www.nightb.cn/archives/tian-jia-ri-li----hexomei-hua#%E6%96%B9%E6%B3%95%E4%B8%80">添加日历</a></p><h4 id="相对链接"><a href="#相对链接" class="headerlink" title="相对链接"></a>相对链接</h4><p>如果这里设置成true，博客内网站就无法自由跳转</p><p><img src="/images/blog/relative_link.png"></p><h4 id="静态站点生成器-MkDocs"><a href="#静态站点生成器-MkDocs" class="headerlink" title="静态站点生成器 MkDocs"></a>静态站点生成器 MkDocs</h4><p>MkDocs是一个基于Python的静态站点生成器，可以快速将Markdown格式的文档转换为静态网站，非常适合用于项目文档、知识库和个性化博客的构建。<br><a href="https://squidfunk.github.io/mkdocs-material/getting-started/">MkDocs</a></p><h4 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a><del>草稿</del></h4><p><del><a href="https://novnan.github.io/Hexo/hexo-draft/">如何在hexo中实现草稿功能</a></del></p><hr><h2 id="markdown-中刚开始容易忽略的地方"><a href="#markdown-中刚开始容易忽略的地方" class="headerlink" title="markdown 中刚开始容易忽略的地方"></a>markdown 中刚开始容易忽略的地方</h2><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>无序列表中，<code>-</code>、<code>+</code>、<code>*</code> 三种符号都可以，但建议统一使用<code>-</code>符号。且无序列表中，<code>-</code>符号后面必须有空格。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 无序列表</span><br><span class="line"><span class="bullet">-</span> 无序列表</span><br><span class="line"><span class="bullet">-</span> 无序列表</span><br></pre></td></tr></table></figure><p>有序列表中，数字后面必须有空格。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 有序列表</span><br><span class="line"><span class="bullet">2.</span> 有序列表</span><br><span class="line"><span class="bullet">3.</span> 有序列表</span><br></pre></td></tr></table></figure><h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><p>三个或三个以上的<code>*</code>、<code>-</code>、<code>+</code>符号，都可以。且符号上下行都需要空行。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"><span class="strong">***</span></span></span><br><span class="line"><span class="strong"><span class="section">---</span></span></span><br></pre></td></tr></table></figure><h3 id="图片链接"><a href="#图片链接" class="headerlink" title="图片链接"></a>图片链接</h3><p>图片链接语法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片描述</span>](<span class="link">图片路径</span>)</span><br></pre></td></tr></table></figure><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p><code>|</code> 控制分列，<code>-</code> 控制分行，<code>:</code> 控制对齐。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 表头1 | 表头2 | 表头3 |</span><br><span class="line">| :----- | -----: | :-----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure><h3 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> [ ] 任务1</span><br><span class="line"><span class="bullet">-</span> [ ] 任务2</span><br><span class="line"><span class="bullet">-</span> [x] 任务3</span><br></pre></td></tr></table></figure><h3 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h3><p>参考 <a href="https://wizardforcel.gitbooks.io/hexo-doc/content/10.html">标签插件</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote David Levithan, Wide Awake %&#125;</span><br><span class="line">不要只为自己寻求幸福。要为所有人寻求幸福。通过仁慈。通过怜悯。</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><p>渲染效果如下：</p><blockquote><p>不要只为自己寻求幸福。要为所有人寻求幸福。通过仁慈。通过怜悯。</p><footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote><h3 id="Hexo-引用块"><a href="#Hexo-引用块" class="headerlink" title="Hexo 引用块"></a>Hexo 引用块</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note success %&#125;</span><br><span class="line">success <span class="strong">**欢迎**</span>[<span class="string">note</span>](<span class="link">.</span>)</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info %&#125;</span><br><span class="line">info</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning %&#125;</span><br><span class="line">warning</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger %&#125;</span><br><span class="line">danger</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary fas fa-home %&#125;</span><br><span class="line">primary</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>渲染效果如下：</p><div class="note success flat"><p>success <strong>欢迎</strong><a href=".">note</a></p></div><div class="note info flat"><p>info</p></div><div class="note warning flat"><p>warning</p></div><div class="note danger flat"><p>danger</p></div><h3 id="Github-引用块"><a href="#Github-引用块" class="headerlink" title="Github 引用块"></a>Github 引用块</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; [!NOTE]</span></span><br><span class="line"><span class="quote">&gt; [!TIP]</span></span><br><span class="line"><span class="quote">&gt; [!IMPORTANT]</span></span><br><span class="line"><span class="quote">&gt; [!WARNING]</span></span><br><span class="line"><span class="quote">&gt; [!CAUTION]</span></span><br><span class="line"><span class="quote">&gt; [!DANGER]</span></span><br><span class="line"><span class="quote">&gt; [!ATTENTION]</span></span><br><span class="line"><span class="quote">&gt; [!ERROR]</span></span><br><span class="line"><span class="quote">&gt; [!QUESTION]</span></span><br><span class="line"><span class="quote">&gt; [!INFO]</span></span><br></pre></td></tr></table></figure><p>渲染效果如下：</p><p><img src="/./images/blog/note.png"></p><h3 id="font-awesome-图标"><a href="#font-awesome-图标" class="headerlink" title="font-awesome 图标"></a>font-awesome 图标</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-adjust&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 md 文件中直接写即可，渲染效果如下：</p><p><i class="fas fa-adjust"></i></p><p><a href="https://www.runoob.com/font-awesome/fontawesome-icons-webapp.html">其他font-awesome图标</a></p><h3 id="HTML-标签"><a href="#HTML-标签" class="headerlink" title="HTML 标签"></a>HTML 标签</h3><h4 id="更改字体、大小、颜色"><a href="#更改字体、大小、颜色" class="headerlink" title="更改字体、大小、颜色"></a>更改字体、大小、颜色</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span>我是黑体字<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;微软雅黑&quot;</span>&gt;</span>我是微软雅黑<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;STCAIYUN&quot;</span>&gt;</span>我是华文彩云<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span>我是红色<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">#008000</span>&gt;</span>我是绿色<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">Blue</span>&gt;</span>我是蓝色<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span> <span class="attr">color</span>=<span class="string">green</span> <span class="attr">size</span>=<span class="string">5</span>&gt;</span>我是黑体，绿色，尺寸为5<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure><p>渲染效果如下：</p><p><font face="黑体">我是黑体字</font><br><font face="微软雅黑">我是微软雅黑</font><br><font face="STCAIYUN">我是华文彩云</font><br><font color=red>我是红色</font><br><font color=#008000>我是绿色</font><br><font color=Blue>我是蓝色</font><br><font face="黑体" color=green size=5>我是黑体，绿色，尺寸为5</font></p><h4 id="文字背景色"><a href="#文字背景色" class="headerlink" title="文字背景色"></a>文字背景色</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">violet</span>&gt;</span>背景色<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">#FDF5E6</span>&gt;</span>背景色<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">#C1FFC1</span>&gt;</span>背景色<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">#8470FF</span>&gt;</span>背景色<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>渲染效果如下：</p><table><tr><td bgcolor=violet>背景色</td></tr></table><table><tr><td bgcolor=#FDF5E6>背景色</td><td bgcolor=#C1FFC1>背景色</td><td bgcolor=#8470FF>背景色</td></tr></table><p>建议使用十六进制颜色代码，rgb渲染效果不好。</p><h4 id="文字居中"><a href="#文字居中" class="headerlink" title="文字居中"></a>文字居中</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span>我是居中的文字<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span>&gt;</span>我是左对齐的文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span>我是右对齐的文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>渲染效果如下：</p><center>我是居中的文字</center><p align="left">我是左对齐的文字</p><p align="right">我是右对齐的文字</p><h3 id="markdown-格式转换"><a href="#markdown-格式转换" class="headerlink" title="markdown 格式转换"></a>markdown 格式转换</h3><p><a href="https://www.bookstack.cn/read/Learning-Markdown/article-convert-readme.md">markdown 格式转换</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
